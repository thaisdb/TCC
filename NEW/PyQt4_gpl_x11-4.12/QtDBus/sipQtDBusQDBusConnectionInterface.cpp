/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDBus.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qdbusconnectioninterface.sip"
#include <qdbusconnectioninterface.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"

#line 46 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qdbuserror.sip"
#include <qdbuserror.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qdbusmessage.sip"
#include <qdbusmessage.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 49 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 164 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 53 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 205 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 123 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 61 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 46 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 65 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 68 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 68 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 46 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qpydbusreply.sip"
#include <qdbusreply.h>
#include <qpydbusreply.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 47 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qdbuspendingcall.sip"
#include <qdbuspendingcall.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qdbusconnection.sip"
#include <qdbusconnection.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 114 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 117 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 120 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 123 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"


PyDoc_STRVAR(doc_QDBusConnectionInterface_registeredServiceNames, "registeredServiceNames(self) -> object");

extern "C" {static PyObject *meth_QDBusConnectionInterface_registeredServiceNames(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_registeredServiceNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp))
        {
            QDBusReply< ::QStringList>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusReply< ::QStringList>(sipCpp->registeredServiceNames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_0100QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_registeredServiceNames, doc_QDBusConnectionInterface_registeredServiceNames);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_isServiceRegistered, "isServiceRegistered(self, str) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_isServiceRegistered(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_isServiceRegistered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDBusReply<bool>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDBusReply<bool>(sipCpp->isServiceRegistered(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_2600,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_isServiceRegistered, doc_QDBusConnectionInterface_isServiceRegistered);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_serviceOwner, "serviceOwner(self, str) -> object");

extern "C" {static PyObject *meth_QDBusConnectionInterface_serviceOwner(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_serviceOwner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDBusReply< ::QString>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDBusReply< ::QString>(sipCpp->serviceOwner(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_serviceOwner, doc_QDBusConnectionInterface_serviceOwner);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_unregisterService, "unregisterService(self, str) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_unregisterService(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_unregisterService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDBusReply<bool>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDBusReply<bool>(sipCpp->unregisterService(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_2600,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_unregisterService, doc_QDBusConnectionInterface_unregisterService);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_registerService, "registerService(self, str, qoption: QDBusConnectionInterface.ServiceQueueOptions = QDBusConnectionInterface.DontQueueService, roption: QDBusConnectionInterface.ServiceReplacementOptions = QDBusConnectionInterface.DontAllowReplacement) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_registerService(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_registerService(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDBusConnectionInterface::ServiceQueueOptions a1 = QDBusConnectionInterface::DontQueueService;
         ::QDBusConnectionInterface::ServiceReplacementOptions a2 = QDBusConnectionInterface::DontAllowReplacement;
         ::QDBusConnectionInterface *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_qoption,
            sipName_roption,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EE", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State, sipType_QDBusConnectionInterface_ServiceQueueOptions, &a1, sipType_QDBusConnectionInterface_ServiceReplacementOptions, &a2))
        {
             ::QDBusReply< ::QDBusConnectionInterface::RegisterServiceReply>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDBusReply< ::QDBusConnectionInterface::RegisterServiceReply>(sipCpp->registerService(*a0,a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_0100QDBusConnectionInterface_RegisterServiceReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_registerService, doc_QDBusConnectionInterface_registerService);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_servicePid, "servicePid(self, str) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_servicePid(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_servicePid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDBusReply<uint>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDBusReply<uint>(sipCpp->servicePid(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_1900,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_servicePid, doc_QDBusConnectionInterface_servicePid);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_serviceUid, "serviceUid(self, str) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_serviceUid(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_serviceUid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDBusReply<uint>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDBusReply<uint>(sipCpp->serviceUid(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_1900,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_serviceUid, doc_QDBusConnectionInterface_serviceUid);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_startService, "startService(self, str) -> QDBusReply");

extern "C" {static PyObject *meth_QDBusConnectionInterface_startService(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_startService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDBusReply<void>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDBusReply<void>(sipCpp->startService(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDBusReply_0400,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_startService, doc_QDBusConnectionInterface_startService);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_connectNotify, "connectNotify(self, QT_SIGNAL)");

extern "C" {static PyObject *meth_QDBusConnectionInterface_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        PyObject * a0;
         ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pP0", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 77 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qdbusconnectioninterface.sip"
        typedef const char *(*pyqt4_get_signal_t)(PyObject *);
        
        static pyqt4_get_signal_t pyqt4_get_signal = 0;
        
        if (!pyqt4_get_signal)
        {
            pyqt4_get_signal = (pyqt4_get_signal_t)sipImportSymbol("pyqt4_get_signal");
            Q_ASSERT(pyqt4_get_signal);
        }
        
        const char *sig = pyqt4_get_signal(a0);
            
        if (sig)
        {
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            (sipSelfWasArg ? sipCpp->QDBusConnectionInterface::connectNotify(sig) : sipCpp->connectNotify(sig));
        #else
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg, sig);
        #endif
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 437 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_connectNotify, doc_QDBusConnectionInterface_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QDBusConnectionInterface_disconnectNotify, "disconnectNotify(self, QT_SIGNAL)");

extern "C" {static PyObject *meth_QDBusConnectionInterface_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDBusConnectionInterface_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        PyObject * a0;
         ::QDBusConnectionInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pP0", &sipSelf, sipType_QDBusConnectionInterface, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 110 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDBus/qdbusconnectioninterface.sip"
        typedef const char *(*pyqt4_get_signal_t)(PyObject *);
        
        static pyqt4_get_signal_t pyqt4_get_signal = 0;
        
        if (!pyqt4_get_signal)
        {
            pyqt4_get_signal = (pyqt4_get_signal_t)sipImportSymbol("pyqt4_get_signal");
            Q_ASSERT(pyqt4_get_signal);
        }
        
        const char *sig = pyqt4_get_signal(a0);
            
        if (sig)
        {
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            (sipSelfWasArg ? sipCpp->QDBusConnectionInterface::disconnectNotify(sig) : sipCpp->disconnectNotify(sig));
        #else
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg, sig);
        #endif
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 501 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDBus/sipQtDBusQDBusConnectionInterface.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDBusConnectionInterface, sipName_disconnectNotify, doc_QDBusConnectionInterface_disconnectNotify);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDBusConnectionInterface(void *, const sipTypeDef *);}
static void *cast_QDBusConnectionInterface(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDBusConnectionInterface *sipCpp = reinterpret_cast< ::QDBusConnectionInterface *>(sipCppV);

    if (targetType == sipType_QDBusAbstractInterface)
        return static_cast< ::QDBusAbstractInterface *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDBusConnectionInterface(void *, int);}
static void release_QDBusConnectionInterface(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDBusConnectionInterface[] = {{3, 255, 1}};


static PyMethodDef methods_QDBusConnectionInterface[] = {
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QDBusConnectionInterface_connectNotify, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_connectNotify)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QDBusConnectionInterface_disconnectNotify, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_disconnectNotify)},
    {SIP_MLNAME_CAST(sipName_isServiceRegistered), meth_QDBusConnectionInterface_isServiceRegistered, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_isServiceRegistered)},
    {SIP_MLNAME_CAST(sipName_registerService), (PyCFunction)meth_QDBusConnectionInterface_registerService, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_registerService)},
    {SIP_MLNAME_CAST(sipName_registeredServiceNames), meth_QDBusConnectionInterface_registeredServiceNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_registeredServiceNames)},
    {SIP_MLNAME_CAST(sipName_serviceOwner), meth_QDBusConnectionInterface_serviceOwner, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_serviceOwner)},
    {SIP_MLNAME_CAST(sipName_servicePid), meth_QDBusConnectionInterface_servicePid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_servicePid)},
    {SIP_MLNAME_CAST(sipName_serviceUid), meth_QDBusConnectionInterface_serviceUid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_serviceUid)},
    {SIP_MLNAME_CAST(sipName_startService), meth_QDBusConnectionInterface_startService, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_startService)},
    {SIP_MLNAME_CAST(sipName_unregisterService), meth_QDBusConnectionInterface_unregisterService, METH_VARARGS, SIP_MLDOC_CAST(doc_QDBusConnectionInterface_unregisterService)}
};

static sipEnumMemberDef enummembers_QDBusConnectionInterface[] = {
    {sipName_AllowReplacement, static_cast<int>( ::QDBusConnectionInterface::AllowReplacement), 15},
    {sipName_DontAllowReplacement, static_cast<int>( ::QDBusConnectionInterface::DontAllowReplacement), 15},
    {sipName_DontQueueService, static_cast<int>( ::QDBusConnectionInterface::DontQueueService), 14},
    {sipName_QueueService, static_cast<int>( ::QDBusConnectionInterface::QueueService), 14},
    {sipName_ReplaceExistingService, static_cast<int>( ::QDBusConnectionInterface::ReplaceExistingService), 14},
    {sipName_ServiceNotRegistered, static_cast<int>( ::QDBusConnectionInterface::ServiceNotRegistered), 13},
    {sipName_ServiceQueued, static_cast<int>( ::QDBusConnectionInterface::ServiceQueued), 13},
    {sipName_ServiceRegistered, static_cast<int>( ::QDBusConnectionInterface::ServiceRegistered), 13},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QDBusConnectionInterface[] = {
    {"callWithCallbackFailed(QDBusError,QDBusMessage)", "\1callWithCallbackFailed(self, QDBusError, QDBusMessage)", 0, 0},
    {"serviceOwnerChanged(QString,QString,QString)", "\1serviceOwnerChanged(self, str, str, str)", 0, 0},
    {"serviceUnregistered(QString)", "\1serviceUnregistered(self, str)", 0, 0},
    {"serviceRegistered(QString)", "\1serviceRegistered(self, str)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QDBusConnectionInterface = {
    & ::QDBusConnectionInterface::staticMetaObject,
    0,
    signals_QDBusConnectionInterface
};


sipClassTypeDef sipTypeDef_QtDBus_QDBusConnectionInterface = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDBusConnectionInterface,
        {0},
        &plugin_QDBusConnectionInterface
    },
    {
        sipNameNr_QDBusConnectionInterface,
        {0, 0, 1},
        10, methods_QDBusConnectionInterface,
        8, enummembers_QDBusConnectionInterface,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QDBusConnectionInterface,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QDBusConnectionInterface,
    cast_QDBusConnectionInterface,
    0,
    0,
    0,
    0,
    0,
    0
};

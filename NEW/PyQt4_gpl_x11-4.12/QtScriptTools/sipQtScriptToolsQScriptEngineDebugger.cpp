/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtScriptTools.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtScriptTools/qscriptenginedebugger.sip"
#include <qscriptenginedebugger.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 26 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 28 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 26 "sip/QtGui/qmenu.sip"
#include <qmenu.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 26 "sip/QtGui/qtoolbar.sip"
#include <qtoolbar.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 26 "sip/QtGui/qmainwindow.sip"
#include <qmainwindow.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 34 "sip/QtScript/qscriptengine.sip"
#include <qscriptengine.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScriptTools/sipQtScriptToolsQScriptEngineDebugger.cpp"


class sipQScriptEngineDebugger : public  ::QScriptEngineDebugger
{
public:
    sipQScriptEngineDebugger( ::QObject*);
    virtual ~sipQScriptEngineDebugger();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQScriptEngineDebugger(const sipQScriptEngineDebugger &);
    sipQScriptEngineDebugger &operator = (const sipQScriptEngineDebugger &);

    char sipPyMethods[7];
};

sipQScriptEngineDebugger::sipQScriptEngineDebugger( ::QObject*a0):  ::QScriptEngineDebugger(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQScriptEngineDebugger::~sipQScriptEngineDebugger()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQScriptEngineDebugger::metaObject() const
{
    return sip_QtScriptTools_qt_metaobject(sipPySelf,sipType_QScriptEngineDebugger);
}

int sipQScriptEngineDebugger::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QScriptEngineDebugger::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtScriptTools_qt_metacall(sipPySelf,sipType_QScriptEngineDebugger,_c,_id,_a);

    return _id;
}

void *sipQScriptEngineDebugger::qt_metacast(const char *_clname)
{
    return (sip_QtScriptTools_qt_metacast(sipPySelf, sipType_QScriptEngineDebugger, _clname)) ? this :  ::QScriptEngineDebugger::qt_metacast(_clname);
}

bool sipQScriptEngineDebugger::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QScriptEngineDebugger::event(a0);

    extern bool sipVH_QtScriptTools_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtScriptTools_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQScriptEngineDebugger::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QScriptEngineDebugger::eventFilter(a0,a1);

    extern bool sipVH_QtScriptTools_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtScriptTools_4(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQScriptEngineDebugger::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QScriptEngineDebugger::timerEvent(a0);
        return;
    }

    extern void sipVH_QtScriptTools_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtScriptTools_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQScriptEngineDebugger::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QScriptEngineDebugger::childEvent(a0);
        return;
    }

    extern void sipVH_QtScriptTools_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtScriptTools_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQScriptEngineDebugger::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QScriptEngineDebugger::customEvent(a0);
        return;
    }

    extern void sipVH_QtScriptTools_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtScriptTools_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQScriptEngineDebugger::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QScriptEngineDebugger::connectNotify(a0);
        return;
    }

    extern void sipVH_QtScriptTools_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtScriptTools_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQScriptEngineDebugger::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QScriptEngineDebugger::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtScriptTools_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtScriptTools_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_attachTo, "attachTo(self, QScriptEngine)");

extern "C" {static PyObject *meth_QScriptEngineDebugger_attachTo(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_attachTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QScriptEngine* a0;
         ::QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp, sipType_QScriptEngine, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->attachTo(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_attachTo, doc_QScriptEngineDebugger_attachTo);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_detach, "detach(self)");

extern "C" {static PyObject *meth_QScriptEngineDebugger_detach(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->detach();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_detach, doc_QScriptEngineDebugger_detach);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_autoShowStandardWindow, "autoShowStandardWindow(self) -> bool");

extern "C" {static PyObject *meth_QScriptEngineDebugger_autoShowStandardWindow(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_autoShowStandardWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoShowStandardWindow();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_autoShowStandardWindow, doc_QScriptEngineDebugger_autoShowStandardWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_setAutoShowStandardWindow, "setAutoShowStandardWindow(self, bool)");

extern "C" {static PyObject *meth_QScriptEngineDebugger_setAutoShowStandardWindow(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_setAutoShowStandardWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoShowStandardWindow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_setAutoShowStandardWindow, doc_QScriptEngineDebugger_setAutoShowStandardWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_standardWindow, "standardWindow(self) -> QMainWindow");

extern "C" {static PyObject *meth_QScriptEngineDebugger_standardWindow(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_standardWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp))
        {
             ::QMainWindow*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->standardWindow();
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMainWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_standardWindow, doc_QScriptEngineDebugger_standardWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_createStandardToolBar, "createStandardToolBar(self, parent: QWidget = None) -> QToolBar");

extern "C" {static PyObject *meth_QScriptEngineDebugger_createStandardToolBar(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_createStandardToolBar(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0 = 0;
        sipWrapper *sipOwner = 0;
         ::QScriptEngineDebugger *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|JH", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp, sipType_QWidget, &a0, &sipOwner))
        {
             ::QToolBar*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createStandardToolBar(a0);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);

            return sipConvertFromType(sipRes,sipType_QToolBar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_createStandardToolBar, doc_QScriptEngineDebugger_createStandardToolBar);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_createStandardMenu, "createStandardMenu(self, parent: QWidget = None) -> QMenu");

extern "C" {static PyObject *meth_QScriptEngineDebugger_createStandardMenu(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_createStandardMenu(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0 = 0;
        sipWrapper *sipOwner = 0;
         ::QScriptEngineDebugger *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|JH", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp, sipType_QWidget, &a0, &sipOwner))
        {
             ::QMenu*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createStandardMenu(a0);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);

            return sipConvertFromType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_createStandardMenu, doc_QScriptEngineDebugger_createStandardMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_widget, "widget(self, QScriptEngineDebugger.DebuggerWidget) -> QWidget");

extern "C" {static PyObject *meth_QScriptEngineDebugger_widget(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QScriptEngineDebugger::DebuggerWidget a0;
        const  ::QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp, sipType_QScriptEngineDebugger_DebuggerWidget, &a0))
        {
             ::QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->widget(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_widget, doc_QScriptEngineDebugger_widget);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_action, "action(self, QScriptEngineDebugger.DebuggerAction) -> QAction");

extern "C" {static PyObject *meth_QScriptEngineDebugger_action(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_action(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QScriptEngineDebugger::DebuggerAction a0;
        const  ::QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp, sipType_QScriptEngineDebugger_DebuggerAction, &a0))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->action(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_action, doc_QScriptEngineDebugger_action);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptEngineDebugger_state, "state(self) -> QScriptEngineDebugger.DebuggerState");

extern "C" {static PyObject *meth_QScriptEngineDebugger_state(PyObject *, PyObject *);}
static PyObject *meth_QScriptEngineDebugger_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptEngineDebugger *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptEngineDebugger, &sipCpp))
        {
             ::QScriptEngineDebugger::DebuggerState sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QScriptEngineDebugger_DebuggerState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptEngineDebugger, sipName_state, doc_QScriptEngineDebugger_state);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QScriptEngineDebugger(void *, const sipTypeDef *);}
static void *cast_QScriptEngineDebugger(void *sipCppV, const sipTypeDef *targetType)
{
     ::QScriptEngineDebugger *sipCpp = reinterpret_cast< ::QScriptEngineDebugger *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScriptEngineDebugger(void *, int);}
static void release_QScriptEngineDebugger(void *sipCppV, int)
{
     ::QScriptEngineDebugger *sipCpp = reinterpret_cast< ::QScriptEngineDebugger *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QScriptEngineDebugger(sipSimpleWrapper *);}
static void dealloc_QScriptEngineDebugger(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQScriptEngineDebugger *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QScriptEngineDebugger(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QScriptEngineDebugger(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QScriptEngineDebugger(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQScriptEngineDebugger *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQScriptEngineDebugger(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QScriptEngineDebugger[] = {{2, 0, 1}};


static PyMethodDef methods_QScriptEngineDebugger[] = {
    {SIP_MLNAME_CAST(sipName_action), meth_QScriptEngineDebugger_action, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_action)},
    {SIP_MLNAME_CAST(sipName_attachTo), meth_QScriptEngineDebugger_attachTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_attachTo)},
    {SIP_MLNAME_CAST(sipName_autoShowStandardWindow), meth_QScriptEngineDebugger_autoShowStandardWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_autoShowStandardWindow)},
    {SIP_MLNAME_CAST(sipName_createStandardMenu), (PyCFunction)meth_QScriptEngineDebugger_createStandardMenu, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_createStandardMenu)},
    {SIP_MLNAME_CAST(sipName_createStandardToolBar), (PyCFunction)meth_QScriptEngineDebugger_createStandardToolBar, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_createStandardToolBar)},
    {SIP_MLNAME_CAST(sipName_detach), meth_QScriptEngineDebugger_detach, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_detach)},
    {SIP_MLNAME_CAST(sipName_setAutoShowStandardWindow), meth_QScriptEngineDebugger_setAutoShowStandardWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_setAutoShowStandardWindow)},
    {SIP_MLNAME_CAST(sipName_standardWindow), meth_QScriptEngineDebugger_standardWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_standardWindow)},
    {SIP_MLNAME_CAST(sipName_state), meth_QScriptEngineDebugger_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_state)},
    {SIP_MLNAME_CAST(sipName_widget), meth_QScriptEngineDebugger_widget, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptEngineDebugger_widget)}
};

static sipEnumMemberDef enummembers_QScriptEngineDebugger[] = {
    {sipName_BreakpointsWidget, static_cast<int>( ::QScriptEngineDebugger::BreakpointsWidget), 3},
    {sipName_ClearConsoleAction, static_cast<int>( ::QScriptEngineDebugger::ClearConsoleAction), 1},
    {sipName_ClearDebugOutputAction, static_cast<int>( ::QScriptEngineDebugger::ClearDebugOutputAction), 1},
    {sipName_ClearErrorLogAction, static_cast<int>( ::QScriptEngineDebugger::ClearErrorLogAction), 1},
    {sipName_CodeFinderWidget, static_cast<int>( ::QScriptEngineDebugger::CodeFinderWidget), 3},
    {sipName_CodeWidget, static_cast<int>( ::QScriptEngineDebugger::CodeWidget), 3},
    {sipName_ConsoleWidget, static_cast<int>( ::QScriptEngineDebugger::ConsoleWidget), 3},
    {sipName_ContinueAction, static_cast<int>( ::QScriptEngineDebugger::ContinueAction), 1},
    {sipName_DebugOutputWidget, static_cast<int>( ::QScriptEngineDebugger::DebugOutputWidget), 3},
    {sipName_ErrorLogWidget, static_cast<int>( ::QScriptEngineDebugger::ErrorLogWidget), 3},
    {sipName_FindInScriptAction, static_cast<int>( ::QScriptEngineDebugger::FindInScriptAction), 1},
    {sipName_FindNextInScriptAction, static_cast<int>( ::QScriptEngineDebugger::FindNextInScriptAction), 1},
    {sipName_FindPreviousInScriptAction, static_cast<int>( ::QScriptEngineDebugger::FindPreviousInScriptAction), 1},
    {sipName_GoToLineAction, static_cast<int>( ::QScriptEngineDebugger::GoToLineAction), 1},
    {sipName_InterruptAction, static_cast<int>( ::QScriptEngineDebugger::InterruptAction), 1},
    {sipName_LocalsWidget, static_cast<int>( ::QScriptEngineDebugger::LocalsWidget), 3},
    {sipName_RunToCursorAction, static_cast<int>( ::QScriptEngineDebugger::RunToCursorAction), 1},
    {sipName_RunToNewScriptAction, static_cast<int>( ::QScriptEngineDebugger::RunToNewScriptAction), 1},
    {sipName_RunningState, static_cast<int>( ::QScriptEngineDebugger::RunningState), 2},
    {sipName_ScriptsWidget, static_cast<int>( ::QScriptEngineDebugger::ScriptsWidget), 3},
    {sipName_StackWidget, static_cast<int>( ::QScriptEngineDebugger::StackWidget), 3},
    {sipName_StepIntoAction, static_cast<int>( ::QScriptEngineDebugger::StepIntoAction), 1},
    {sipName_StepOutAction, static_cast<int>( ::QScriptEngineDebugger::StepOutAction), 1},
    {sipName_StepOverAction, static_cast<int>( ::QScriptEngineDebugger::StepOverAction), 1},
    {sipName_SuspendedState, static_cast<int>( ::QScriptEngineDebugger::SuspendedState), 2},
    {sipName_ToggleBreakpointAction, static_cast<int>( ::QScriptEngineDebugger::ToggleBreakpointAction), 1},
};

PyDoc_STRVAR(doc_QScriptEngineDebugger, "\1QScriptEngineDebugger(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QScriptEngineDebugger[] = {
    {"evaluationResumed()", "\1evaluationResumed(self)", 0, 0},
    {"evaluationSuspended()", "\1evaluationSuspended(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QScriptEngineDebugger = {
    & ::QScriptEngineDebugger::staticMetaObject,
    0,
    signals_QScriptEngineDebugger
};


sipClassTypeDef sipTypeDef_QtScriptTools_QScriptEngineDebugger = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QScriptEngineDebugger,
        {0},
        &plugin_QScriptEngineDebugger
    },
    {
        sipNameNr_QScriptEngineDebugger,
        {0, 0, 1},
        10, methods_QScriptEngineDebugger,
        26, enummembers_QScriptEngineDebugger,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QScriptEngineDebugger,
    -1,
    -1,
    supers_QScriptEngineDebugger,
    0,
    init_type_QScriptEngineDebugger,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QScriptEngineDebugger,
    0,
    0,
    0,
    release_QScriptEngineDebugger,
    cast_QScriptEngineDebugger,
    0,
    0,
    0,
    0,
    0,
    0
};

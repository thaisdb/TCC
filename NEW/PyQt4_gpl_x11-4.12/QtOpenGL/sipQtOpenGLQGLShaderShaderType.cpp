/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtOpenGL.h"

#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtOpenGL/qglshaderprogram.sip"
#include <qglshaderprogram.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderShaderType.cpp"

#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtOpenGL/qglshaderprogram.sip"
#include <qglshaderprogram.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderShaderType.cpp"


extern "C" {static int slot_QGLShader_ShaderType___bool__(PyObject *);}
static int slot_QGLShader_ShaderType___bool__(PyObject *sipSelf)
{
     ::QGLShader::ShaderType *sipCpp = reinterpret_cast< ::QGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLShader_ShaderType));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 381 "sip/QtCore/qglobal.sip"
#if QT_VERSION >= 0x050000
        sipRes = (sipCpp->operator QGLShader::ShaderType::Int() != 0);
#else
        sipRes = (sipCpp->operator int() != 0);
#endif
#line 55 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderShaderType.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QGLShader_ShaderType___ne__(PyObject *,PyObject *);}
static PyObject *slot_QGLShader_ShaderType___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGLShader::ShaderType *sipCpp = reinterpret_cast< ::QGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLShader_ShaderType));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QGLShader::ShaderType* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QGLShader_ShaderType, &a0, &a0State))
        {
            bool sipRes = 0;

#line 372 "sip/QtCore/qglobal.sip"
#if QT_VERSION >= 0x050000
        sipRes = (sipCpp->operator QGLShader::ShaderType::Int() != a0->operator QGLShader::ShaderType::Int());
#else
        sipRes = (sipCpp->operator int() != a0->operator int());
#endif
#line 89 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderShaderType.cpp"
            sipReleaseType(const_cast< ::QGLShader::ShaderType *>(a0),sipType_QGLShader_ShaderType,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtOpenGL, ne_slot, sipType_QGLShader_ShaderType, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QGLShader_ShaderType___eq__(PyObject *,PyObject *);}
static PyObject *slot_QGLShader_ShaderType___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QGLShader::ShaderType *sipCpp = reinterpret_cast< ::QGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLShader_ShaderType));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QGLShader::ShaderType* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QGLShader_ShaderType, &a0, &a0State))
        {
            bool sipRes = 0;

#line 363 "sip/QtCore/qglobal.sip"
#if QT_VERSION >= 0x050000
        sipRes = (sipCpp->operator QGLShader::ShaderType::Int() == a0->operator QGLShader::ShaderType::Int());
#else
        sipRes = (sipCpp->operator int() == a0->operator int());
#endif
#line 129 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderShaderType.cpp"
            sipReleaseType(const_cast< ::QGLShader::ShaderType *>(a0),sipType_QGLShader_ShaderType,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtOpenGL, eq_slot, sipType_QGLShader_ShaderType, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QGLShader_ShaderType___ixor__(PyObject *,PyObject *);}
static PyObject *slot_QGLShader_ShaderType___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QGLShader_ShaderType)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QGLShader::ShaderType *sipCpp = reinterpret_cast< ::QGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLShader_ShaderType));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 357 "sip/QtCore/qglobal.sip"
        *sipCpp = QGLShader::ShaderType(*sipCpp ^ a0);
#line 168 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderShaderType.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QGLShader_ShaderType___xor__(PyObject *,PyObject *);}
static PyObject *slot_QGLShader_ShaderType___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGLShader::ShaderType* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QGLShader_ShaderType, &a0, &a0State, &a1))
        {
             ::QGLShader::ShaderType*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QGLShader::ShaderType((*a0 ^ a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QGLShader_ShaderType,a0State);

            return sipConvertFromNewType(sipRes,sipType_QGLShader_ShaderType,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtOpenGL, xor_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QGLShader_ShaderType___ior__(PyObject *,PyObject *);}
static PyObject *slot_QGLShader_ShaderType___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QGLShader_ShaderType)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QGLShader::ShaderType *sipCpp = reinterpret_cast< ::QGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLShader_ShaderType));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
#line 351 "sip/QtCore/qglobal.sip"
        *sipCpp = QGLShader::ShaderType(*sipCpp | a0);
#line 242 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderShaderType.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QGLShader_ShaderType___or__(PyObject *,PyObject *);}
static PyObject *slot_QGLShader_ShaderType___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGLShader::ShaderType* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QGLShader_ShaderType, &a0, &a0State, &a1))
        {
             ::QGLShader::ShaderType*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QGLShader::ShaderType((*a0 | a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QGLShader_ShaderType,a0State);

            return sipConvertFromNewType(sipRes,sipType_QGLShader_ShaderType,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtOpenGL, or_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QGLShader_ShaderType___iand__(PyObject *,PyObject *);}
static PyObject *slot_QGLShader_ShaderType___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QGLShader_ShaderType)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QGLShader::ShaderType *sipCpp = reinterpret_cast< ::QGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLShader_ShaderType));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::QGLShader::ShaderType::operator&=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QGLShader_ShaderType___and__(PyObject *,PyObject *);}
static PyObject *slot_QGLShader_ShaderType___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGLShader::ShaderType* a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J1i", sipType_QGLShader_ShaderType, &a0, &a0State, &a1))
        {
             ::QGLShader::ShaderType*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QGLShader::ShaderType((*a0 & a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QGLShader_ShaderType,a0State);

            return sipConvertFromNewType(sipRes,sipType_QGLShader_ShaderType,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtOpenGL, and_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QGLShader_ShaderType___invert__(PyObject *);}
static PyObject *slot_QGLShader_ShaderType___invert__(PyObject *sipSelf)
{
     ::QGLShader::ShaderType *sipCpp = reinterpret_cast< ::QGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLShader_ShaderType));

    if (!sipCpp)
        return 0;


    {
        {
             ::QGLShader::ShaderType*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QGLShader::ShaderType(~(*sipCpp));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QGLShader_ShaderType,NULL);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QGLShader_ShaderType___int__(PyObject *);}
static PyObject *slot_QGLShader_ShaderType___int__(PyObject *sipSelf)
{
     ::QGLShader::ShaderType *sipCpp = reinterpret_cast< ::QGLShader::ShaderType *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLShader_ShaderType));

    if (!sipCpp)
        return 0;


    {
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = *sipCpp;
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGLShader_ShaderType(void *, int);}
static void release_QGLShader_ShaderType(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QGLShader::ShaderType *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QGLShader_ShaderType(void *, SIP_SSIZE_T, const void *);}
static void assign_QGLShader_ShaderType(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::QGLShader::ShaderType *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::QGLShader::ShaderType *>(sipSrc);
}


extern "C" {static void *array_QGLShader_ShaderType(SIP_SSIZE_T);}
static void *array_QGLShader_ShaderType(SIP_SSIZE_T sipNrElem)
{
    return new  ::QGLShader::ShaderType[sipNrElem];
}


extern "C" {static void *copy_QGLShader_ShaderType(const void *, SIP_SSIZE_T);}
static void *copy_QGLShader_ShaderType(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QGLShader::ShaderType(reinterpret_cast<const  ::QGLShader::ShaderType *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QGLShader_ShaderType(sipSimpleWrapper *);}
static void dealloc_QGLShader_ShaderType(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGLShader_ShaderType(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QGLShader_ShaderType(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGLShader_ShaderType(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QGLShader::ShaderType *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QGLShader::ShaderType();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QGLShader::ShaderType(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QGLShader::ShaderType* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QGLShader_ShaderType, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QGLShader::ShaderType(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QGLShader::ShaderType *>(a0),sipType_QGLShader_ShaderType,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static int convertTo_QGLShader_ShaderType(PyObject *, void **, int *, PyObject *);}
static int convertTo_QGLShader_ShaderType(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QGLShader::ShaderType **sipCppPtr = reinterpret_cast< ::QGLShader::ShaderType **>(sipCppPtrV);

#line 390 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a QGLShader::ShaderType is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QGLShader_ShaderTypeBit)) ||
            sipCanConvertToType(sipPy, sipType_QGLShader_ShaderType, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QGLShader_ShaderTypeBit)))
{
    *sipCppPtr = new QGLShader::ShaderType(int(SIPLong_AsLong(sipPy)));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QGLShader::ShaderType *>(sipConvertToType(sipPy, sipType_QGLShader_ShaderType, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 530 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderShaderType.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QGLShader_ShaderType[] = {
    {(void *)slot_QGLShader_ShaderType___bool__, bool_slot},
    {(void *)slot_QGLShader_ShaderType___ne__, ne_slot},
    {(void *)slot_QGLShader_ShaderType___eq__, eq_slot},
    {(void *)slot_QGLShader_ShaderType___ixor__, ixor_slot},
    {(void *)slot_QGLShader_ShaderType___xor__, xor_slot},
    {(void *)slot_QGLShader_ShaderType___ior__, ior_slot},
    {(void *)slot_QGLShader_ShaderType___or__, or_slot},
    {(void *)slot_QGLShader_ShaderType___iand__, iand_slot},
    {(void *)slot_QGLShader_ShaderType___and__, and_slot},
    {(void *)slot_QGLShader_ShaderType___invert__, invert_slot},
    {(void *)slot_QGLShader_ShaderType___int__, int_slot},
    {0, (sipPySlotType)0}
};

PyDoc_STRVAR(doc_QGLShader_ShaderType, "\1QGLShader.ShaderType()\n"
    "QGLShader.ShaderType(Union[QGLShader.ShaderType, QGLShader.ShaderTypeBit])\n"
    "QGLShader.ShaderType(QGLShader.ShaderType)");


static pyqt4ClassPluginDef plugin_QGLShader_ShaderType = {
    0,
    1,
    0
};


sipClassTypeDef sipTypeDef_QtOpenGL_QGLShader_ShaderType = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QGLShader__ShaderType,
        {0},
        &plugin_QGLShader_ShaderType
    },
    {
        sipNameNr_ShaderType,
        {19, 255, 0},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGLShader_ShaderType,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QGLShader_ShaderType,
    init_type_QGLShader_ShaderType,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGLShader_ShaderType,
    assign_QGLShader_ShaderType,
    array_QGLShader_ShaderType,
    copy_QGLShader_ShaderType,
    release_QGLShader_ShaderType,
    0,
    convertTo_QGLShader_ShaderType,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtOpenGL.h"

#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtOpenGL/qglshaderprogram.sip"
#include <qglshaderprogram.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 225 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 34 "sip/QtGui/qvector2d.sip"
#include <qvector2d.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 34 "sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 34 "sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 26 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 110 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 103 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 1088 "sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 940 "sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 792 "sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 641 "sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 490 "sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 336 "sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 182 "sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 28 "sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 34 "sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 34 "sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtOpenGL/qglshaderprogram.sip"
#include <qglshaderprogram.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtOpenGL/qglshaderprogram.sip"
#include <qglshaderprogram.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 114 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 117 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 120 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 123 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 126 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 129 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 132 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 135 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"


class sipQGLShaderProgram : public  ::QGLShaderProgram
{
public:
    sipQGLShaderProgram( ::QObject*);
    sipQGLShaderProgram(const  ::QGLContext*, ::QObject*);
    virtual ~sipQGLShaderProgram();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool link();
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGLShaderProgram(const sipQGLShaderProgram &);
    sipQGLShaderProgram &operator = (const sipQGLShaderProgram &);

    char sipPyMethods[8];
};

sipQGLShaderProgram::sipQGLShaderProgram( ::QObject*a0):  ::QGLShaderProgram(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLShaderProgram::sipQGLShaderProgram(const  ::QGLContext*a0, ::QObject*a1):  ::QGLShaderProgram(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLShaderProgram::~sipQGLShaderProgram()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGLShaderProgram::metaObject() const
{
    return sip_QtOpenGL_qt_metaobject(sipPySelf,sipType_QGLShaderProgram);
}

int sipQGLShaderProgram::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QGLShaderProgram::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtOpenGL_qt_metacall(sipPySelf,sipType_QGLShaderProgram,_c,_id,_a);

    return _id;
}

void *sipQGLShaderProgram::qt_metacast(const char *_clname)
{
    return (sip_QtOpenGL_qt_metacast(sipPySelf, sipType_QGLShaderProgram, _clname)) ? this :  ::QGLShaderProgram::qt_metacast(_clname);
}

bool sipQGLShaderProgram::link()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_link);

    if (!sipMeth)
        return  ::QGLShaderProgram::link();

    extern bool sipVH_QtOpenGL_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtOpenGL_38(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQGLShaderProgram::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QGLShaderProgram::event(a0);

    extern bool sipVH_QtOpenGL_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtOpenGL_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQGLShaderProgram::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QGLShaderProgram::eventFilter(a0,a1);

    extern bool sipVH_QtOpenGL_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtOpenGL_33(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQGLShaderProgram::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QGLShaderProgram::timerEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtOpenGL_34(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGLShaderProgram::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QGLShaderProgram::childEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtOpenGL_35(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGLShaderProgram::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QGLShaderProgram::customEvent(a0);
        return;
    }

    extern void sipVH_QtOpenGL_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtOpenGL_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGLShaderProgram::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QGLShaderProgram::connectNotify(a0);
        return;
    }

    extern void sipVH_QtOpenGL_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtOpenGL_36(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQGLShaderProgram::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QGLShaderProgram::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtOpenGL_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtOpenGL_36(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QGLShaderProgram_addShader, "addShader(self, QGLShader) -> bool");

extern "C" {static PyObject *meth_QGLShaderProgram_addShader(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_addShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGLShader* a0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGLShaderProgram, &sipCpp, sipType_QGLShader, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addShader(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_addShader, doc_QGLShaderProgram_addShader);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_removeShader, "removeShader(self, QGLShader)");

extern "C" {static PyObject *meth_QGLShaderProgram_removeShader(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_removeShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGLShader* a0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGLShaderProgram, &sipCpp, sipType_QGLShader, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeShader(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_removeShader, doc_QGLShaderProgram_removeShader);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_shaders, "shaders(self) -> object");

extern "C" {static PyObject *meth_QGLShaderProgram_shaders(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_shaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLShaderProgram, &sipCpp))
        {
            QList< ::QGLShader*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QGLShader*>(sipCpp->shaders());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGLShader,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_shaders, doc_QGLShaderProgram_shaders);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_addShaderFromSourceCode, "addShaderFromSourceCode(self, QGLShader.ShaderType, Union[QByteArray, bytes, bytearray]) -> bool\n"
    "addShaderFromSourceCode(self, QGLShader.ShaderType, str) -> bool");

extern "C" {static PyObject *meth_QGLShaderProgram_addShaderFromSourceCode(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_addShaderFromSourceCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QGLShaderProgram, &sipCpp, sipType_QGLShader_ShaderType, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addShaderFromSourceCode(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QGLShaderProgram, &sipCpp, sipType_QGLShader_ShaderType, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addShaderFromSourceCode(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_addShaderFromSourceCode, doc_QGLShaderProgram_addShaderFromSourceCode);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_addShaderFromSourceFile, "addShaderFromSourceFile(self, QGLShader.ShaderType, str) -> bool");

extern "C" {static PyObject *meth_QGLShaderProgram_addShaderFromSourceFile(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_addShaderFromSourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGLShader::ShaderType* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QGLShaderProgram, &sipCpp, sipType_QGLShader_ShaderType, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addShaderFromSourceFile(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QGLShader_ShaderType,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_addShaderFromSourceFile, doc_QGLShaderProgram_addShaderFromSourceFile);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_removeAllShaders, "removeAllShaders(self)");

extern "C" {static PyObject *meth_QGLShaderProgram_removeAllShaders(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_removeAllShaders(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLShaderProgram, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeAllShaders();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_removeAllShaders, doc_QGLShaderProgram_removeAllShaders);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_link, "link(self) -> bool");

extern "C" {static PyObject *meth_QGLShaderProgram_link(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_link(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QGLShaderProgram::link() : sipCpp->link());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_link, doc_QGLShaderProgram_link);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_isLinked, "isLinked(self) -> bool");

extern "C" {static PyObject *meth_QGLShaderProgram_isLinked(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_isLinked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isLinked();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_isLinked, doc_QGLShaderProgram_isLinked);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_log, "log(self) -> str");

extern "C" {static PyObject *meth_QGLShaderProgram_log(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_log(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLShaderProgram, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->log());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_log, doc_QGLShaderProgram_log);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_bind, "bind(self) -> bool");

extern "C" {static PyObject *meth_QGLShaderProgram_bind(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_bind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLShaderProgram, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bind();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_bind, doc_QGLShaderProgram_bind);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_release, "release(self)");

extern "C" {static PyObject *meth_QGLShaderProgram_release(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_release(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLShaderProgram, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->release();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_release, doc_QGLShaderProgram_release);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_programId, "programId(self) -> int");

extern "C" {static PyObject *meth_QGLShaderProgram_programId(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_programId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLShaderProgram, &sipCpp))
        {
             ::GLuint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->programId();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_programId, doc_QGLShaderProgram_programId);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_bindAttributeLocation, "bindAttributeLocation(self, Union[QByteArray, bytes, bytearray], int)\n"
    "bindAttributeLocation(self, str, int)");

extern "C" {static PyObject *meth_QGLShaderProgram_bindAttributeLocation(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_bindAttributeLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        int a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QGLShaderProgram, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->bindAttributeLocation(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QGLShaderProgram, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->bindAttributeLocation(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_bindAttributeLocation, doc_QGLShaderProgram_bindAttributeLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_attributeLocation, "attributeLocation(self, Union[QByteArray, bytes, bytearray]) -> int\n"
    "attributeLocation(self, str) -> int");

extern "C" {static PyObject *meth_QGLShaderProgram_attributeLocation(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_attributeLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGLShaderProgram, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->attributeLocation(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGLShaderProgram, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->attributeLocation(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_attributeLocation, doc_QGLShaderProgram_attributeLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_setAttributeArray, "setAttributeArray(self, int, PYQT_SHADER_ATTRIBUTE_ARRAY)\n"
    "setAttributeArray(self, str, PYQT_SHADER_ATTRIBUTE_ARRAY)");

extern "C" {static PyObject *meth_QGLShaderProgram_setAttributeArray(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_setAttributeArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        PyObject * a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 101 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtOpenGL/qglshaderprogram.sip"
        const GLfloat *values;
        int tsize;
        
        values = qpyopengl_attribute_array(a1, sipSelf, SIPLong_FromLong(a0), &tsize,
                &sipError);
        
        if (values)
            sipCpp->setAttributeArray(a0, values, tsize);
#line 873 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const char* a0;
        PyObject * a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsP0", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 113 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtOpenGL/qglshaderprogram.sip"
        const GLfloat *values;
        int tsize;
        
        values = qpyopengl_attribute_array(a1, sipSelf, SIPBytes_FromString(a0),
                &tsize, &sipError);
        
        if (values)
            sipCpp->setAttributeArray(a0, values, tsize);
#line 906 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_setAttributeArray, doc_QGLShaderProgram_setAttributeArray);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_setAttributeValue, "setAttributeValue(self, int, float)\n"
    "setAttributeValue(self, int, float, float)\n"
    "setAttributeValue(self, int, float, float, float)\n"
    "setAttributeValue(self, int, float, float, float, float)\n"
    "setAttributeValue(self, int, QVector2D)\n"
    "setAttributeValue(self, int, QVector3D)\n"
    "setAttributeValue(self, int, QVector4D)\n"
    "setAttributeValue(self, int, Union[QColor, Qt.GlobalColor])\n"
    "setAttributeValue(self, str, float)\n"
    "setAttributeValue(self, str, float, float)\n"
    "setAttributeValue(self, str, float, float, float)\n"
    "setAttributeValue(self, str, float, float, float, float)\n"
    "setAttributeValue(self, str, QVector2D)\n"
    "setAttributeValue(self, str, QVector3D)\n"
    "setAttributeValue(self, str, QVector4D)\n"
    "setAttributeValue(self, str, Union[QColor, Qt.GlobalColor])");

extern "C" {static PyObject *meth_QGLShaderProgram_setAttributeValue(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_setAttributeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::GLfloat a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bif", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biff", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bifff", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::GLfloat a4;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biffff", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector2D* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QVector2D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector3D* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QVector3D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector4D* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
         ::GLfloat a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bsf", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bsff", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bsfff", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::GLfloat a4;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bsffff", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QVector2D* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QVector2D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QVector3D* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QVector3D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QVector4D* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ1", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeValue(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_setAttributeValue, doc_QGLShaderProgram_setAttributeValue);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_enableAttributeArray, "enableAttributeArray(self, int)\n"
    "enableAttributeArray(self, str)");

extern "C" {static PyObject *meth_QGLShaderProgram_enableAttributeArray(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_enableAttributeArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->enableAttributeArray(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->enableAttributeArray(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_enableAttributeArray, doc_QGLShaderProgram_enableAttributeArray);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_disableAttributeArray, "disableAttributeArray(self, int)\n"
    "disableAttributeArray(self, str)");

extern "C" {static PyObject *meth_QGLShaderProgram_disableAttributeArray(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_disableAttributeArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->disableAttributeArray(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->disableAttributeArray(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_disableAttributeArray, doc_QGLShaderProgram_disableAttributeArray);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_uniformLocation, "uniformLocation(self, Union[QByteArray, bytes, bytearray]) -> int\n"
    "uniformLocation(self, str) -> int");

extern "C" {static PyObject *meth_QGLShaderProgram_uniformLocation(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_uniformLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGLShaderProgram, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->uniformLocation(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGLShaderProgram, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->uniformLocation(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_uniformLocation, doc_QGLShaderProgram_uniformLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_setUniformValueArray, "setUniformValueArray(self, int, PYQT_SHADER_UNIFORM_VALUE_ARRAY)\n"
    "setUniformValueArray(self, str, PYQT_SHADER_UNIFORM_VALUE_ARRAY)");

extern "C" {static PyObject *meth_QGLShaderProgram_setUniformValueArray(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_setUniformValueArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        PyObject * a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiP0", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 147 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtOpenGL/qglshaderprogram.sip"
        const void *values;
        const sipTypeDef *array_type;
        int array_len, tsize;
        
        values = qpyopengl_uniform_value_array(a1, sipSelf, SIPLong_FromLong(a0),
                    &array_type, &array_len, &tsize, &sipError);
                
        if (values)
        {
            if (array_type == sipType_QVector2D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector2D *>(values), array_len);
            else if (array_type == sipType_QVector3D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector3D *>(values), array_len);
            else if (array_type == sipType_QVector4D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector4D *>(values), array_len);
            else if (array_type == sipType_QMatrix2x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x4 *>(values), array_len);
            else
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const GLfloat *>(values), array_len, tsize);
        }
#line 1461 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        const char* a0;
        PyObject * a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsP0", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 200 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtOpenGL/qglshaderprogram.sip"
        const void *values;
        const sipTypeDef *array_type;
        int array_len, tsize;
        
        values = qpyopengl_uniform_value_array(a1, sipSelf, SIPBytes_FromString(a0),
                    &array_type, &array_len, &tsize, &sipError);
                
        if (values)
        {
            if (array_type == sipType_QVector2D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector2D *>(values), array_len);
            else if (array_type == sipType_QVector3D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector3D *>(values), array_len);
            else if (array_type == sipType_QVector4D)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QVector4D *>(values), array_len);
            else if (array_type == sipType_QMatrix2x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix2x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix2x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix3x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix3x4 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x2)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x2 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x3)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x3 *>(values), array_len);
            else if (array_type == sipType_QMatrix4x4)
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const QMatrix4x4 *>(values), array_len);
            else
                sipCpp->setUniformValueArray(a0,
                        reinterpret_cast<const GLfloat *>(values), array_len, tsize);
        }
#line 1535 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtOpenGL/sipQtOpenGLQGLShaderProgram.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_setUniformValueArray, doc_QGLShaderProgram_setUniformValueArray);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_setUniformValue, "setUniformValue(self, int, int)\n"
    "setUniformValue(self, int, float)\n"
    "setUniformValue(self, int, float, float)\n"
    "setUniformValue(self, int, float, float, float)\n"
    "setUniformValue(self, int, float, float, float, float)\n"
    "setUniformValue(self, int, QVector2D)\n"
    "setUniformValue(self, int, QVector3D)\n"
    "setUniformValue(self, int, QVector4D)\n"
    "setUniformValue(self, int, Union[QColor, Qt.GlobalColor])\n"
    "setUniformValue(self, int, QPoint)\n"
    "setUniformValue(self, int, Union[QPointF, QPoint])\n"
    "setUniformValue(self, int, QSize)\n"
    "setUniformValue(self, int, QSizeF)\n"
    "setUniformValue(self, int, QMatrix2x2)\n"
    "setUniformValue(self, int, QMatrix2x3)\n"
    "setUniformValue(self, int, QMatrix2x4)\n"
    "setUniformValue(self, int, QMatrix3x2)\n"
    "setUniformValue(self, int, QMatrix3x3)\n"
    "setUniformValue(self, int, QMatrix3x4)\n"
    "setUniformValue(self, int, QMatrix4x2)\n"
    "setUniformValue(self, int, QMatrix4x3)\n"
    "setUniformValue(self, int, QMatrix4x4)\n"
    "setUniformValue(self, int, QTransform)\n"
    "setUniformValue(self, str, int)\n"
    "setUniformValue(self, str, float)\n"
    "setUniformValue(self, str, float, float)\n"
    "setUniformValue(self, str, float, float, float)\n"
    "setUniformValue(self, str, float, float, float, float)\n"
    "setUniformValue(self, str, QVector2D)\n"
    "setUniformValue(self, str, QVector3D)\n"
    "setUniformValue(self, str, QVector4D)\n"
    "setUniformValue(self, str, Union[QColor, Qt.GlobalColor])\n"
    "setUniformValue(self, str, QPoint)\n"
    "setUniformValue(self, str, Union[QPointF, QPoint])\n"
    "setUniformValue(self, str, QSize)\n"
    "setUniformValue(self, str, QSizeF)\n"
    "setUniformValue(self, str, QMatrix2x2)\n"
    "setUniformValue(self, str, QMatrix2x3)\n"
    "setUniformValue(self, str, QMatrix2x4)\n"
    "setUniformValue(self, str, QMatrix3x2)\n"
    "setUniformValue(self, str, QMatrix3x3)\n"
    "setUniformValue(self, str, QMatrix3x4)\n"
    "setUniformValue(self, str, QMatrix4x2)\n"
    "setUniformValue(self, str, QMatrix4x3)\n"
    "setUniformValue(self, str, QMatrix4x4)\n"
    "setUniformValue(self, str, QTransform)");

extern "C" {static PyObject *meth_QGLShaderProgram_setUniformValue(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_setUniformValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::GLint a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiXi", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiXf", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biff", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bifff", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::GLfloat a4;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biffff", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector2D* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QVector2D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector3D* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QVector3D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QVector4D* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QPoint* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QPoint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QPointF, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QSize* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QSize, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QSizeF* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QSizeF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix2x2* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x2, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix2x3* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x3, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix2x4* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x4, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix3x2* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x2, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix3x3* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x3, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix3x4* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x4, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix4x2* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x2, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix4x3* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x3, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QMatrix4x4* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x4, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QTransform* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QTransform, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
         ::GLint a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsXi", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
         ::GLfloat a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsXf", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bsff", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bsfff", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
         ::GLfloat a1;
         ::GLfloat a2;
         ::GLfloat a3;
         ::GLfloat a4;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bsffff", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QVector2D* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QVector2D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QVector3D* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QVector3D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QVector4D* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QVector4D, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QColor* a1;
        int a1State = 0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ1", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QColor, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QPoint* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QPoint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QPointF* a1;
        int a1State = 0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ1", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QPointF, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QSize* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QSize, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QSizeF* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QSizeF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QMatrix2x2* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x2, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QMatrix2x3* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x3, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QMatrix2x4* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix2x4, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QMatrix3x2* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x2, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QMatrix3x3* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x3, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QMatrix3x4* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix3x4, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QMatrix4x2* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x2, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QMatrix4x3* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x3, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QMatrix4x4* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QMatrix4x4, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        const  ::QTransform* a1;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BsJ9", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, sipType_QTransform, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformValue(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_setUniformValue, doc_QGLShaderProgram_setUniformValue);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_hasOpenGLShaderPrograms, "hasOpenGLShaderPrograms(context: QGLContext = None) -> bool");

extern "C" {static PyObject *meth_QGLShaderProgram_hasOpenGLShaderPrograms(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_hasOpenGLShaderPrograms(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGLContext* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_context,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8", sipType_QGLContext, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QGLShaderProgram::hasOpenGLShaderPrograms(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_hasOpenGLShaderPrograms, doc_QGLShaderProgram_hasOpenGLShaderPrograms);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_setGeometryOutputVertexCount, "setGeometryOutputVertexCount(self, int)");

extern "C" {static PyObject *meth_QGLShaderProgram_setGeometryOutputVertexCount(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_setGeometryOutputVertexCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGeometryOutputVertexCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_setGeometryOutputVertexCount, doc_QGLShaderProgram_setGeometryOutputVertexCount);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_geometryOutputVertexCount, "geometryOutputVertexCount(self) -> int");

extern "C" {static PyObject *meth_QGLShaderProgram_geometryOutputVertexCount(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_geometryOutputVertexCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLShaderProgram, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->geometryOutputVertexCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_geometryOutputVertexCount, doc_QGLShaderProgram_geometryOutputVertexCount);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_setGeometryInputType, "setGeometryInputType(self, int)");

extern "C" {static PyObject *meth_QGLShaderProgram_setGeometryInputType(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_setGeometryInputType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::GLenum a0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGeometryInputType(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_setGeometryInputType, doc_QGLShaderProgram_setGeometryInputType);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_geometryInputType, "geometryInputType(self) -> int");

extern "C" {static PyObject *meth_QGLShaderProgram_geometryInputType(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_geometryInputType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLShaderProgram, &sipCpp))
        {
             ::GLenum sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->geometryInputType();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_geometryInputType, doc_QGLShaderProgram_geometryInputType);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_setGeometryOutputType, "setGeometryOutputType(self, int)");

extern "C" {static PyObject *meth_QGLShaderProgram_setGeometryOutputType(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_setGeometryOutputType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::GLenum a0;
         ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGeometryOutputType(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_setGeometryOutputType, doc_QGLShaderProgram_setGeometryOutputType);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_geometryOutputType, "geometryOutputType(self) -> int");

extern "C" {static PyObject *meth_QGLShaderProgram_geometryOutputType(PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_geometryOutputType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QGLShaderProgram *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLShaderProgram, &sipCpp))
        {
             ::GLenum sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->geometryOutputType();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_geometryOutputType, doc_QGLShaderProgram_geometryOutputType);

    return NULL;
}


PyDoc_STRVAR(doc_QGLShaderProgram_setAttributeBuffer, "setAttributeBuffer(self, int, int, int, int, stride: int = 0)\n"
    "setAttributeBuffer(self, str, int, int, int, stride: int = 0)");

extern "C" {static PyObject *meth_QGLShaderProgram_setAttributeBuffer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGLShaderProgram_setAttributeBuffer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::GLenum a1;
        int a2;
        int a3;
        int a4 = 0;
         ::QGLShaderProgram *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_stride,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biuii|i", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeBuffer(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
         ::GLenum a1;
        int a2;
        int a3;
        int a4 = 0;
         ::QGLShaderProgram *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_stride,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bsuii|i", &sipSelf, sipType_QGLShaderProgram, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttributeBuffer(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLShaderProgram, sipName_setAttributeBuffer, doc_QGLShaderProgram_setAttributeBuffer);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QGLShaderProgram(void *, const sipTypeDef *);}
static void *cast_QGLShaderProgram(void *sipCppV, const sipTypeDef *targetType)
{
     ::QGLShaderProgram *sipCpp = reinterpret_cast< ::QGLShaderProgram *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGLShaderProgram(void *, int);}
static void release_QGLShaderProgram(void *sipCppV, int)
{
     ::QGLShaderProgram *sipCpp = reinterpret_cast< ::QGLShaderProgram *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGLShaderProgram(sipSimpleWrapper *);}
static void dealloc_QGLShaderProgram(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQGLShaderProgram *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QGLShaderProgram(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QGLShaderProgram(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGLShaderProgram(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGLShaderProgram *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGLShaderProgram(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QGLContext* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QGLContext, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGLShaderProgram(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGLShaderProgram[] = {{3, 0, 1}};


static PyMethodDef methods_QGLShaderProgram[] = {
    {SIP_MLNAME_CAST(sipName_addShader), meth_QGLShaderProgram_addShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_addShader)},
    {SIP_MLNAME_CAST(sipName_addShaderFromSourceCode), meth_QGLShaderProgram_addShaderFromSourceCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_addShaderFromSourceCode)},
    {SIP_MLNAME_CAST(sipName_addShaderFromSourceFile), meth_QGLShaderProgram_addShaderFromSourceFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_addShaderFromSourceFile)},
    {SIP_MLNAME_CAST(sipName_attributeLocation), meth_QGLShaderProgram_attributeLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_attributeLocation)},
    {SIP_MLNAME_CAST(sipName_bind), meth_QGLShaderProgram_bind, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_bind)},
    {SIP_MLNAME_CAST(sipName_bindAttributeLocation), meth_QGLShaderProgram_bindAttributeLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_bindAttributeLocation)},
    {SIP_MLNAME_CAST(sipName_disableAttributeArray), meth_QGLShaderProgram_disableAttributeArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_disableAttributeArray)},
    {SIP_MLNAME_CAST(sipName_enableAttributeArray), meth_QGLShaderProgram_enableAttributeArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_enableAttributeArray)},
    {SIP_MLNAME_CAST(sipName_geometryInputType), meth_QGLShaderProgram_geometryInputType, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_geometryInputType)},
    {SIP_MLNAME_CAST(sipName_geometryOutputType), meth_QGLShaderProgram_geometryOutputType, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_geometryOutputType)},
    {SIP_MLNAME_CAST(sipName_geometryOutputVertexCount), meth_QGLShaderProgram_geometryOutputVertexCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_geometryOutputVertexCount)},
    {SIP_MLNAME_CAST(sipName_hasOpenGLShaderPrograms), (PyCFunction)meth_QGLShaderProgram_hasOpenGLShaderPrograms, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGLShaderProgram_hasOpenGLShaderPrograms)},
    {SIP_MLNAME_CAST(sipName_isLinked), meth_QGLShaderProgram_isLinked, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_isLinked)},
    {SIP_MLNAME_CAST(sipName_link), meth_QGLShaderProgram_link, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_link)},
    {SIP_MLNAME_CAST(sipName_log), meth_QGLShaderProgram_log, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_log)},
    {SIP_MLNAME_CAST(sipName_programId), meth_QGLShaderProgram_programId, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_programId)},
    {SIP_MLNAME_CAST(sipName_release), meth_QGLShaderProgram_release, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_release)},
    {SIP_MLNAME_CAST(sipName_removeAllShaders), meth_QGLShaderProgram_removeAllShaders, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_removeAllShaders)},
    {SIP_MLNAME_CAST(sipName_removeShader), meth_QGLShaderProgram_removeShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_removeShader)},
    {SIP_MLNAME_CAST(sipName_setAttributeArray), meth_QGLShaderProgram_setAttributeArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_setAttributeArray)},
    {SIP_MLNAME_CAST(sipName_setAttributeBuffer), (PyCFunction)meth_QGLShaderProgram_setAttributeBuffer, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGLShaderProgram_setAttributeBuffer)},
    {SIP_MLNAME_CAST(sipName_setAttributeValue), meth_QGLShaderProgram_setAttributeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_setAttributeValue)},
    {SIP_MLNAME_CAST(sipName_setGeometryInputType), meth_QGLShaderProgram_setGeometryInputType, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_setGeometryInputType)},
    {SIP_MLNAME_CAST(sipName_setGeometryOutputType), meth_QGLShaderProgram_setGeometryOutputType, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_setGeometryOutputType)},
    {SIP_MLNAME_CAST(sipName_setGeometryOutputVertexCount), meth_QGLShaderProgram_setGeometryOutputVertexCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_setGeometryOutputVertexCount)},
    {SIP_MLNAME_CAST(sipName_setUniformValue), meth_QGLShaderProgram_setUniformValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_setUniformValue)},
    {SIP_MLNAME_CAST(sipName_setUniformValueArray), meth_QGLShaderProgram_setUniformValueArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_setUniformValueArray)},
    {SIP_MLNAME_CAST(sipName_shaders), meth_QGLShaderProgram_shaders, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_shaders)},
    {SIP_MLNAME_CAST(sipName_uniformLocation), meth_QGLShaderProgram_uniformLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLShaderProgram_uniformLocation)}
};

PyDoc_STRVAR(doc_QGLShaderProgram, "\1QGLShaderProgram(parent: QObject = None)\n"
    "QGLShaderProgram(QGLContext, parent: QObject = None)");


static pyqt4ClassPluginDef plugin_QGLShaderProgram = {
    & ::QGLShaderProgram::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtOpenGL_QGLShaderProgram = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QGLShaderProgram,
        {0},
        &plugin_QGLShaderProgram
    },
    {
        sipNameNr_QGLShaderProgram,
        {0, 0, 1},
        29, methods_QGLShaderProgram,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGLShaderProgram,
    -1,
    -1,
    supers_QGLShaderProgram,
    0,
    init_type_QGLShaderProgram,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGLShaderProgram,
    0,
    0,
    0,
    release_QGLShaderProgram,
    cast_QGLShaderProgram,
    0,
    0,
    0,
    0,
    0,
    0
};

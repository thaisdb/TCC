/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDesigner.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDesigner/abstractformwindowmanager.sip"
#include <abstractformwindowmanager.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDesigner/abstractformwindow.sip"
#include <abstractformwindow.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDesigner/abstractformeditor.sip"
#include <abstractformeditor.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 28 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 26 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDesigner/sipQtDesignerQDesignerFormWindowManagerInterface.cpp"


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionCut, "actionCut(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionCut(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionCut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionCut() : sipCpp->actionCut());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionCut, doc_QDesignerFormWindowManagerInterface_actionCut);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionCopy, "actionCopy(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionCopy(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionCopy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionCopy() : sipCpp->actionCopy());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionCopy, doc_QDesignerFormWindowManagerInterface_actionCopy);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionPaste, "actionPaste(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionPaste(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionPaste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionPaste() : sipCpp->actionPaste());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionPaste, doc_QDesignerFormWindowManagerInterface_actionPaste);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionDelete, "actionDelete(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionDelete(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionDelete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionDelete() : sipCpp->actionDelete());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionDelete, doc_QDesignerFormWindowManagerInterface_actionDelete);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionSelectAll, "actionSelectAll(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionSelectAll(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionSelectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionSelectAll() : sipCpp->actionSelectAll());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionSelectAll, doc_QDesignerFormWindowManagerInterface_actionSelectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionLower, "actionLower(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionLower(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionLower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionLower() : sipCpp->actionLower());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionLower, doc_QDesignerFormWindowManagerInterface_actionLower);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionRaise, "actionRaise(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionRaise(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionRaise(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionRaise() : sipCpp->actionRaise());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionRaise, doc_QDesignerFormWindowManagerInterface_actionRaise);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionUndo, "actionUndo(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionUndo(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionUndo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionUndo() : sipCpp->actionUndo());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionUndo, doc_QDesignerFormWindowManagerInterface_actionUndo);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionRedo, "actionRedo(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionRedo(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionRedo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionRedo() : sipCpp->actionRedo());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionRedo, doc_QDesignerFormWindowManagerInterface_actionRedo);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionHorizontalLayout, "actionHorizontalLayout(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionHorizontalLayout(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionHorizontalLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionHorizontalLayout() : sipCpp->actionHorizontalLayout());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionHorizontalLayout, doc_QDesignerFormWindowManagerInterface_actionHorizontalLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionVerticalLayout, "actionVerticalLayout(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionVerticalLayout(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionVerticalLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionVerticalLayout() : sipCpp->actionVerticalLayout());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionVerticalLayout, doc_QDesignerFormWindowManagerInterface_actionVerticalLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionSplitHorizontal, "actionSplitHorizontal(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionSplitHorizontal(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionSplitHorizontal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionSplitHorizontal() : sipCpp->actionSplitHorizontal());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionSplitHorizontal, doc_QDesignerFormWindowManagerInterface_actionSplitHorizontal);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionSplitVertical, "actionSplitVertical(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionSplitVertical(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionSplitVertical(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionSplitVertical() : sipCpp->actionSplitVertical());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionSplitVertical, doc_QDesignerFormWindowManagerInterface_actionSplitVertical);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionGridLayout, "actionGridLayout(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionGridLayout(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionGridLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionGridLayout() : sipCpp->actionGridLayout());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionGridLayout, doc_QDesignerFormWindowManagerInterface_actionGridLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionBreakLayout, "actionBreakLayout(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionBreakLayout(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionBreakLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionBreakLayout() : sipCpp->actionBreakLayout());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionBreakLayout, doc_QDesignerFormWindowManagerInterface_actionBreakLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionAdjustSize, "actionAdjustSize(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionAdjustSize(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionAdjustSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::actionAdjustSize() : sipCpp->actionAdjustSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionAdjustSize, doc_QDesignerFormWindowManagerInterface_actionAdjustSize);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionFormLayout, "actionFormLayout(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionFormLayout(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionFormLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->actionFormLayout();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionFormLayout, doc_QDesignerFormWindowManagerInterface_actionFormLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_actionSimplifyLayout, "actionSimplifyLayout(self) -> QAction");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionSimplifyLayout(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionSimplifyLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QAction*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->actionSimplifyLayout();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_actionSimplifyLayout, doc_QDesignerFormWindowManagerInterface_actionSimplifyLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_activeFormWindow, "activeFormWindow(self) -> QDesignerFormWindowInterface");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_activeFormWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_activeFormWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QDesignerFormWindowInterface*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::activeFormWindow() : sipCpp->activeFormWindow());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDesignerFormWindowInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_activeFormWindow, doc_QDesignerFormWindowManagerInterface_activeFormWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_formWindowCount, "formWindowCount(self) -> int");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_formWindowCount(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_formWindowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::formWindowCount() : sipCpp->formWindowCount());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_formWindowCount, doc_QDesignerFormWindowManagerInterface_formWindowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_formWindow, "formWindow(self, int) -> QDesignerFormWindowInterface");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_formWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_formWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp, &a0))
        {
             ::QDesignerFormWindowInterface*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::formWindow(a0) : sipCpp->formWindow(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDesignerFormWindowInterface,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_formWindow, doc_QDesignerFormWindowManagerInterface_formWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_createFormWindow, "createFormWindow(self, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QDesignerFormWindowInterface");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_createFormWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_createFormWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWidget* a0 = 0;
         ::Qt::WindowFlags a1def = 0;
         ::Qt::WindowFlags* a1 = &a1def;
        int a1State = 0;
        sipWrapper *sipOwner = 0;
         ::QDesignerFormWindowManagerInterface *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|JHJ1", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp, sipType_QWidget, &a0, &sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
             ::QDesignerFormWindowInterface*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::createFormWindow(a0,*a1) : sipCpp->createFormWindow(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDesignerFormWindowInterface,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_createFormWindow, doc_QDesignerFormWindowManagerInterface_createFormWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_core, "core(self) -> QDesignerFormEditorInterface");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_core(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_core(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp))
        {
             ::QDesignerFormEditorInterface*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::core() : sipCpp->core());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDesignerFormEditorInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_core, doc_QDesignerFormWindowManagerInterface_core);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_addFormWindow, "addFormWindow(self, QDesignerFormWindowInterface)");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_addFormWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_addFormWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDesignerFormWindowInterface* a0;
         ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp, sipType_QDesignerFormWindowInterface, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::addFormWindow(a0) : sipCpp->addFormWindow(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_addFormWindow, doc_QDesignerFormWindowManagerInterface_addFormWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_removeFormWindow, "removeFormWindow(self, QDesignerFormWindowInterface)");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_removeFormWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_removeFormWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDesignerFormWindowInterface* a0;
         ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp, sipType_QDesignerFormWindowInterface, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::removeFormWindow(a0) : sipCpp->removeFormWindow(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_removeFormWindow, doc_QDesignerFormWindowManagerInterface_removeFormWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowManagerInterface_setActiveFormWindow, "setActiveFormWindow(self, QDesignerFormWindowInterface)");

extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_setActiveFormWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_setActiveFormWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDesignerFormWindowInterface* a0;
         ::QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDesignerFormWindowManagerInterface, &sipCpp, sipType_QDesignerFormWindowInterface, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDesignerFormWindowManagerInterface::setActiveFormWindow(a0) : sipCpp->setActiveFormWindow(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowManagerInterface, sipName_setActiveFormWindow, doc_QDesignerFormWindowManagerInterface_setActiveFormWindow);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDesignerFormWindowManagerInterface(void *, const sipTypeDef *);}
static void *cast_QDesignerFormWindowManagerInterface(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDesignerFormWindowManagerInterface *sipCpp = reinterpret_cast< ::QDesignerFormWindowManagerInterface *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDesignerFormWindowManagerInterface(void *, int);}
static void release_QDesignerFormWindowManagerInterface(void *sipCppV, int)
{
     ::QDesignerFormWindowManagerInterface *sipCpp = reinterpret_cast< ::QDesignerFormWindowManagerInterface *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDesignerFormWindowManagerInterface(sipSimpleWrapper *);}
static void dealloc_QDesignerFormWindowManagerInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDesignerFormWindowManagerInterface(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDesignerFormWindowManagerInterface[] = {{5, 0, 1}};


static PyMethodDef methods_QDesignerFormWindowManagerInterface[] = {
    {SIP_MLNAME_CAST(sipName_actionAdjustSize), meth_QDesignerFormWindowManagerInterface_actionAdjustSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionAdjustSize)},
    {SIP_MLNAME_CAST(sipName_actionBreakLayout), meth_QDesignerFormWindowManagerInterface_actionBreakLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionBreakLayout)},
    {SIP_MLNAME_CAST(sipName_actionCopy), meth_QDesignerFormWindowManagerInterface_actionCopy, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionCopy)},
    {SIP_MLNAME_CAST(sipName_actionCut), meth_QDesignerFormWindowManagerInterface_actionCut, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionCut)},
    {SIP_MLNAME_CAST(sipName_actionDelete), meth_QDesignerFormWindowManagerInterface_actionDelete, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionDelete)},
    {SIP_MLNAME_CAST(sipName_actionFormLayout), meth_QDesignerFormWindowManagerInterface_actionFormLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionFormLayout)},
    {SIP_MLNAME_CAST(sipName_actionGridLayout), meth_QDesignerFormWindowManagerInterface_actionGridLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionGridLayout)},
    {SIP_MLNAME_CAST(sipName_actionHorizontalLayout), meth_QDesignerFormWindowManagerInterface_actionHorizontalLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionHorizontalLayout)},
    {SIP_MLNAME_CAST(sipName_actionLower), meth_QDesignerFormWindowManagerInterface_actionLower, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionLower)},
    {SIP_MLNAME_CAST(sipName_actionPaste), meth_QDesignerFormWindowManagerInterface_actionPaste, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionPaste)},
    {SIP_MLNAME_CAST(sipName_actionRaise), meth_QDesignerFormWindowManagerInterface_actionRaise, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionRaise)},
    {SIP_MLNAME_CAST(sipName_actionRedo), meth_QDesignerFormWindowManagerInterface_actionRedo, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionRedo)},
    {SIP_MLNAME_CAST(sipName_actionSelectAll), meth_QDesignerFormWindowManagerInterface_actionSelectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionSelectAll)},
    {SIP_MLNAME_CAST(sipName_actionSimplifyLayout), meth_QDesignerFormWindowManagerInterface_actionSimplifyLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionSimplifyLayout)},
    {SIP_MLNAME_CAST(sipName_actionSplitHorizontal), meth_QDesignerFormWindowManagerInterface_actionSplitHorizontal, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionSplitHorizontal)},
    {SIP_MLNAME_CAST(sipName_actionSplitVertical), meth_QDesignerFormWindowManagerInterface_actionSplitVertical, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionSplitVertical)},
    {SIP_MLNAME_CAST(sipName_actionUndo), meth_QDesignerFormWindowManagerInterface_actionUndo, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionUndo)},
    {SIP_MLNAME_CAST(sipName_actionVerticalLayout), meth_QDesignerFormWindowManagerInterface_actionVerticalLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_actionVerticalLayout)},
    {SIP_MLNAME_CAST(sipName_activeFormWindow), meth_QDesignerFormWindowManagerInterface_activeFormWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_activeFormWindow)},
    {SIP_MLNAME_CAST(sipName_addFormWindow), meth_QDesignerFormWindowManagerInterface_addFormWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_addFormWindow)},
    {SIP_MLNAME_CAST(sipName_core), meth_QDesignerFormWindowManagerInterface_core, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_core)},
    {SIP_MLNAME_CAST(sipName_createFormWindow), (PyCFunction)meth_QDesignerFormWindowManagerInterface_createFormWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_createFormWindow)},
    {SIP_MLNAME_CAST(sipName_formWindow), meth_QDesignerFormWindowManagerInterface_formWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_formWindow)},
    {SIP_MLNAME_CAST(sipName_formWindowCount), meth_QDesignerFormWindowManagerInterface_formWindowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_formWindowCount)},
    {SIP_MLNAME_CAST(sipName_removeFormWindow), meth_QDesignerFormWindowManagerInterface_removeFormWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_removeFormWindow)},
    {SIP_MLNAME_CAST(sipName_setActiveFormWindow), meth_QDesignerFormWindowManagerInterface_setActiveFormWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowManagerInterface_setActiveFormWindow)}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QDesignerFormWindowManagerInterface[] = {
    {"activeFormWindowChanged(QDesignerFormWindowInterface*)", "\1activeFormWindowChanged(self, QDesignerFormWindowInterface)", 0, 0},
    {"formWindowRemoved(QDesignerFormWindowInterface*)", "\1formWindowRemoved(self, QDesignerFormWindowInterface)", 0, 0},
    {"formWindowAdded(QDesignerFormWindowInterface*)", "\1formWindowAdded(self, QDesignerFormWindowInterface)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QDesignerFormWindowManagerInterface = {
    & ::QDesignerFormWindowManagerInterface::staticMetaObject,
    0,
    signals_QDesignerFormWindowManagerInterface
};


sipClassTypeDef sipTypeDef_QtDesigner_QDesignerFormWindowManagerInterface = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDesignerFormWindowManagerInterface,
        {0},
        &plugin_QDesignerFormWindowManagerInterface
    },
    {
        sipNameNr_QDesignerFormWindowManagerInterface,
        {0, 0, 1},
        26, methods_QDesignerFormWindowManagerInterface,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QDesignerFormWindowManagerInterface,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDesignerFormWindowManagerInterface,
    0,
    0,
    0,
    release_QDesignerFormWindowManagerInterface,
    cast_QDesignerFormWindowManagerInterface,
    0,
    0,
    0,
    0,
    0,
    0
};

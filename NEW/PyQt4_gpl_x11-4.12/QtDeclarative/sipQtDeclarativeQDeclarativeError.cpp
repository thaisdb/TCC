/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDeclarative.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativeerror.sip"
#include <qdeclarativeerror.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeError.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeError.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeError.cpp"


PyDoc_STRVAR(doc_QDeclarativeError_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QDeclarativeError_isValid(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeError_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeError, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeError, sipName_isValid, doc_QDeclarativeError_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeError_url, "url(self) -> QUrl");

extern "C" {static PyObject *meth_QDeclarativeError_url(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeError_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeError, &sipCpp))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl(sipCpp->url());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeError, sipName_url, doc_QDeclarativeError_url);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeError_setUrl, "setUrl(self, QUrl)");

extern "C" {static PyObject *meth_QDeclarativeError_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeError_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QDeclarativeError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDeclarativeError, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeError, sipName_setUrl, doc_QDeclarativeError_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeError_description, "description(self) -> str");

extern "C" {static PyObject *meth_QDeclarativeError_description(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeError_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeError, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->description());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeError, sipName_description, doc_QDeclarativeError_description);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeError_setDescription, "setDescription(self, str)");

extern "C" {static PyObject *meth_QDeclarativeError_setDescription(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeError_setDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDeclarativeError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDeclarativeError, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDescription(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeError, sipName_setDescription, doc_QDeclarativeError_setDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeError_line, "line(self) -> int");

extern "C" {static PyObject *meth_QDeclarativeError_line(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeError_line(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeError, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->line();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeError, sipName_line, doc_QDeclarativeError_line);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeError_setLine, "setLine(self, int)");

extern "C" {static PyObject *meth_QDeclarativeError_setLine(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeError_setLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QDeclarativeError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDeclarativeError, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLine(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeError, sipName_setLine, doc_QDeclarativeError_setLine);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeError_column, "column(self) -> int");

extern "C" {static PyObject *meth_QDeclarativeError_column(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeError_column(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeError, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->column();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeError, sipName_column, doc_QDeclarativeError_column);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeError_setColumn, "setColumn(self, int)");

extern "C" {static PyObject *meth_QDeclarativeError_setColumn(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeError_setColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QDeclarativeError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDeclarativeError, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeError, sipName_setColumn, doc_QDeclarativeError_setColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeError_toString, "toString(self) -> str");

extern "C" {static PyObject *meth_QDeclarativeError_toString(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeError_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeError *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeError, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeError, sipName_toString, doc_QDeclarativeError_toString);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDeclarativeError(void *, int);}
static void release_QDeclarativeError(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QDeclarativeError *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QDeclarativeError(void *, SIP_SSIZE_T, const void *);}
static void assign_QDeclarativeError(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::QDeclarativeError *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::QDeclarativeError *>(sipSrc);
}


extern "C" {static void *array_QDeclarativeError(SIP_SSIZE_T);}
static void *array_QDeclarativeError(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDeclarativeError[sipNrElem];
}


extern "C" {static void *copy_QDeclarativeError(const void *, SIP_SSIZE_T);}
static void *copy_QDeclarativeError(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDeclarativeError(reinterpret_cast<const  ::QDeclarativeError *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDeclarativeError(sipSimpleWrapper *);}
static void dealloc_QDeclarativeError(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDeclarativeError(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDeclarativeError(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDeclarativeError(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDeclarativeError *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QDeclarativeError();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QDeclarativeError* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDeclarativeError, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QDeclarativeError(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QDeclarativeError[] = {
    {SIP_MLNAME_CAST(sipName_column), meth_QDeclarativeError_column, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeError_column)},
    {SIP_MLNAME_CAST(sipName_description), meth_QDeclarativeError_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeError_description)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QDeclarativeError_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeError_isValid)},
    {SIP_MLNAME_CAST(sipName_line), meth_QDeclarativeError_line, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeError_line)},
    {SIP_MLNAME_CAST(sipName_setColumn), meth_QDeclarativeError_setColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeError_setColumn)},
    {SIP_MLNAME_CAST(sipName_setDescription), meth_QDeclarativeError_setDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeError_setDescription)},
    {SIP_MLNAME_CAST(sipName_setLine), meth_QDeclarativeError_setLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeError_setLine)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QDeclarativeError_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeError_setUrl)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QDeclarativeError_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeError_toString)},
    {SIP_MLNAME_CAST(sipName_url), meth_QDeclarativeError_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeError_url)}
};

PyDoc_STRVAR(doc_QDeclarativeError, "\1QDeclarativeError()\n"
    "QDeclarativeError(QDeclarativeError)");


static pyqt4ClassPluginDef plugin_QDeclarativeError = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtDeclarative_QDeclarativeError = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QDeclarativeError,
        {0},
        &plugin_QDeclarativeError
    },
    {
        sipNameNr_QDeclarativeError,
        {0, 0, 1},
        10, methods_QDeclarativeError,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDeclarativeError,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QDeclarativeError,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDeclarativeError,
    assign_QDeclarativeError,
    array_QDeclarativeError,
    copy_QDeclarativeError,
    release_QDeclarativeError,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

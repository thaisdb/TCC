/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDeclarative.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativeengine.sip"
#include <qdeclarativeengine.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativeerror.sip"
#include <qdeclarativeerror.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativecontext.sip"
#include <qdeclarativecontext.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativeimageprovider.sip"
#include <qdeclarativeimageprovider.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 28 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativenetworkaccessmanagerfactory.sip"
#include <qdeclarativenetworkaccessmanagerfactory.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeEngine.cpp"


class sipQDeclarativeEngine : public  ::QDeclarativeEngine
{
public:
    sipQDeclarativeEngine( ::QObject*);
    virtual ~sipQDeclarativeEngine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDeclarativeEngine(const sipQDeclarativeEngine &);
    sipQDeclarativeEngine &operator = (const sipQDeclarativeEngine &);

    char sipPyMethods[7];
};

sipQDeclarativeEngine::sipQDeclarativeEngine( ::QObject*a0):  ::QDeclarativeEngine(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeEngine::~sipQDeclarativeEngine()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDeclarativeEngine::metaObject() const
{
    return sip_QtDeclarative_qt_metaobject(sipPySelf,sipType_QDeclarativeEngine);
}

int sipQDeclarativeEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QDeclarativeEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtDeclarative_qt_metacall(sipPySelf,sipType_QDeclarativeEngine,_c,_id,_a);

    return _id;
}

void *sipQDeclarativeEngine::qt_metacast(const char *_clname)
{
    return (sip_QtDeclarative_qt_metacast(sipPySelf, sipType_QDeclarativeEngine, _clname)) ? this :  ::QDeclarativeEngine::qt_metacast(_clname);
}

bool sipQDeclarativeEngine::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QDeclarativeEngine::event(a0);

    extern bool sipVH_QtDeclarative_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtDeclarative_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDeclarativeEngine::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QDeclarativeEngine::eventFilter(a0,a1);

    extern bool sipVH_QtDeclarative_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtDeclarative_4(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQDeclarativeEngine::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QDeclarativeEngine::timerEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtDeclarative_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeEngine::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QDeclarativeEngine::childEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtDeclarative_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeEngine::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QDeclarativeEngine::customEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtDeclarative_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeEngine::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QDeclarativeEngine::connectNotify(a0);
        return;
    }

    extern void sipVH_QtDeclarative_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtDeclarative_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeEngine::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QDeclarativeEngine::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtDeclarative_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtDeclarative_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QDeclarativeEngine_rootContext, "rootContext(self) -> QDeclarativeContext");

extern "C" {static PyObject *meth_QDeclarativeEngine_rootContext(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_rootContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
             ::QDeclarativeContext*sipRes;
            PyObject *sipResObj;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rootContext();
            Py_END_ALLOW_THREADS

            sipResObj = sipConvertFromType(sipRes,sipType_QDeclarativeContext,NULL);

            sipKeepReference(sipSelf, -3, sipResObj);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_rootContext, doc_QDeclarativeEngine_rootContext);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_clearComponentCache, "clearComponentCache(self)");

extern "C" {static PyObject *meth_QDeclarativeEngine_clearComponentCache(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_clearComponentCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearComponentCache();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_clearComponentCache, doc_QDeclarativeEngine_clearComponentCache);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_importPathList, "importPathList(self) -> List[str]");

extern "C" {static PyObject *meth_QDeclarativeEngine_importPathList(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_importPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->importPathList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_importPathList, doc_QDeclarativeEngine_importPathList);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_setImportPathList, "setImportPathList(self, Sequence[str])");

extern "C" {static PyObject *meth_QDeclarativeEngine_setImportPathList(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setImportPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setImportPathList(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setImportPathList, doc_QDeclarativeEngine_setImportPathList);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_addImportPath, "addImportPath(self, str)");

extern "C" {static PyObject *meth_QDeclarativeEngine_addImportPath(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_addImportPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addImportPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_addImportPath, doc_QDeclarativeEngine_addImportPath);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_pluginPathList, "pluginPathList(self) -> List[str]");

extern "C" {static PyObject *meth_QDeclarativeEngine_pluginPathList(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_pluginPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->pluginPathList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_pluginPathList, doc_QDeclarativeEngine_pluginPathList);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_setPluginPathList, "setPluginPathList(self, Sequence[str])");

extern "C" {static PyObject *meth_QDeclarativeEngine_setPluginPathList(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setPluginPathList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPluginPathList(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setPluginPathList, doc_QDeclarativeEngine_setPluginPathList);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_addPluginPath, "addPluginPath(self, str)");

extern "C" {static PyObject *meth_QDeclarativeEngine_addPluginPath(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_addPluginPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addPluginPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_addPluginPath, doc_QDeclarativeEngine_addPluginPath);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_importPlugin, "importPlugin(self, str, str) -> Tuple[bool, str]");

extern "C" {static PyObject *meth_QDeclarativeEngine_importPlugin(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_importPlugin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QString* a2;
         ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;
            a2 = new  ::QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->importPlugin(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipBuildResult(0,"(bN)",sipRes,a2,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_importPlugin, doc_QDeclarativeEngine_importPlugin);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_setNetworkAccessManagerFactory, "setNetworkAccessManagerFactory(self, QDeclarativeNetworkAccessManagerFactory)");

extern "C" {static PyObject *meth_QDeclarativeEngine_setNetworkAccessManagerFactory(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setNetworkAccessManagerFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDeclarativeNetworkAccessManagerFactory* a0;
        PyObject *a0Keep;
         ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, &a0Keep, sipType_QDeclarativeNetworkAccessManagerFactory, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNetworkAccessManagerFactory(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -4, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setNetworkAccessManagerFactory, doc_QDeclarativeEngine_setNetworkAccessManagerFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_networkAccessManagerFactory, "networkAccessManagerFactory(self) -> QDeclarativeNetworkAccessManagerFactory");

extern "C" {static PyObject *meth_QDeclarativeEngine_networkAccessManagerFactory(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_networkAccessManagerFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
             ::QDeclarativeNetworkAccessManagerFactory*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->networkAccessManagerFactory();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDeclarativeNetworkAccessManagerFactory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_networkAccessManagerFactory, doc_QDeclarativeEngine_networkAccessManagerFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_networkAccessManager, "networkAccessManager(self) -> QNetworkAccessManager");

extern "C" {static PyObject *meth_QDeclarativeEngine_networkAccessManager(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_networkAccessManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
             ::QNetworkAccessManager*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->networkAccessManager();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkAccessManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_networkAccessManager, doc_QDeclarativeEngine_networkAccessManager);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_addImageProvider, "addImageProvider(self, str, QDeclarativeImageProvider)");

extern "C" {static PyObject *meth_QDeclarativeEngine_addImageProvider(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_addImageProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDeclarativeImageProvider* a1;
         ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State, sipType_QDeclarativeImageProvider, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addImageProvider(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_addImageProvider, doc_QDeclarativeEngine_addImageProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_imageProvider, "imageProvider(self, str) -> QDeclarativeImageProvider");

extern "C" {static PyObject *meth_QDeclarativeEngine_imageProvider(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_imageProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDeclarativeImageProvider*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->imageProvider(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QDeclarativeImageProvider,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_imageProvider, doc_QDeclarativeEngine_imageProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_removeImageProvider, "removeImageProvider(self, str)");

extern "C" {static PyObject *meth_QDeclarativeEngine_removeImageProvider(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_removeImageProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeImageProvider(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_removeImageProvider, doc_QDeclarativeEngine_removeImageProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_setOfflineStoragePath, "setOfflineStoragePath(self, str)");

extern "C" {static PyObject *meth_QDeclarativeEngine_setOfflineStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setOfflineStoragePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOfflineStoragePath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setOfflineStoragePath, doc_QDeclarativeEngine_setOfflineStoragePath);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_offlineStoragePath, "offlineStoragePath(self) -> str");

extern "C" {static PyObject *meth_QDeclarativeEngine_offlineStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_offlineStoragePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->offlineStoragePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_offlineStoragePath, doc_QDeclarativeEngine_offlineStoragePath);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_baseUrl, "baseUrl(self) -> QUrl");

extern "C" {static PyObject *meth_QDeclarativeEngine_baseUrl(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_baseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl(sipCpp->baseUrl());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_baseUrl, doc_QDeclarativeEngine_baseUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_setBaseUrl, "setBaseUrl(self, QUrl)");

extern "C" {static PyObject *meth_QDeclarativeEngine_setBaseUrl(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setBaseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBaseUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setBaseUrl, doc_QDeclarativeEngine_setBaseUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_outputWarningsToStandardError, "outputWarningsToStandardError(self) -> bool");

extern "C" {static PyObject *meth_QDeclarativeEngine_outputWarningsToStandardError(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_outputWarningsToStandardError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeEngine, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->outputWarningsToStandardError();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_outputWarningsToStandardError, doc_QDeclarativeEngine_outputWarningsToStandardError);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_setOutputWarningsToStandardError, "setOutputWarningsToStandardError(self, bool)");

extern "C" {static PyObject *meth_QDeclarativeEngine_setOutputWarningsToStandardError(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setOutputWarningsToStandardError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QDeclarativeEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDeclarativeEngine, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOutputWarningsToStandardError(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setOutputWarningsToStandardError, doc_QDeclarativeEngine_setOutputWarningsToStandardError);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_contextForObject, "contextForObject(QObject) -> QDeclarativeContext");

extern "C" {static PyObject *meth_QDeclarativeEngine_contextForObject(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_contextForObject(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
             ::QDeclarativeContext*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QDeclarativeEngine::contextForObject(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDeclarativeContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_contextForObject, doc_QDeclarativeEngine_contextForObject);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_setContextForObject, "setContextForObject(QObject, QDeclarativeContext)");

extern "C" {static PyObject *meth_QDeclarativeEngine_setContextForObject(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setContextForObject(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QObject* a0;
         ::QDeclarativeContext* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QObject, &a0, sipType_QDeclarativeContext, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QDeclarativeEngine::setContextForObject(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setContextForObject, doc_QDeclarativeEngine_setContextForObject);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_setObjectOwnership, "setObjectOwnership(QObject, QDeclarativeEngine.ObjectOwnership)");

extern "C" {static PyObject *meth_QDeclarativeEngine_setObjectOwnership(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_setObjectOwnership(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QObject* a0;
         ::QDeclarativeEngine::ObjectOwnership a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8E", sipType_QObject, &a0, sipType_QDeclarativeEngine_ObjectOwnership, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QDeclarativeEngine::setObjectOwnership(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_setObjectOwnership, doc_QDeclarativeEngine_setObjectOwnership);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeEngine_objectOwnership, "objectOwnership(QObject) -> QDeclarativeEngine.ObjectOwnership");

extern "C" {static PyObject *meth_QDeclarativeEngine_objectOwnership(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeEngine_objectOwnership(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
             ::QDeclarativeEngine::ObjectOwnership sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QDeclarativeEngine::objectOwnership(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDeclarativeEngine_ObjectOwnership);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeEngine, sipName_objectOwnership, doc_QDeclarativeEngine_objectOwnership);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDeclarativeEngine(void *, const sipTypeDef *);}
static void *cast_QDeclarativeEngine(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDeclarativeEngine *sipCpp = reinterpret_cast< ::QDeclarativeEngine *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDeclarativeEngine(void *, int);}
static void release_QDeclarativeEngine(void *sipCppV, int)
{
     ::QDeclarativeEngine *sipCpp = reinterpret_cast< ::QDeclarativeEngine *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDeclarativeEngine(sipSimpleWrapper *);}
static void dealloc_QDeclarativeEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDeclarativeEngine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDeclarativeEngine(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDeclarativeEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDeclarativeEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDeclarativeEngine *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeEngine(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDeclarativeEngine[] = {{6, 0, 1}};


static PyMethodDef methods_QDeclarativeEngine[] = {
    {SIP_MLNAME_CAST(sipName_addImageProvider), meth_QDeclarativeEngine_addImageProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_addImageProvider)},
    {SIP_MLNAME_CAST(sipName_addImportPath), meth_QDeclarativeEngine_addImportPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_addImportPath)},
    {SIP_MLNAME_CAST(sipName_addPluginPath), meth_QDeclarativeEngine_addPluginPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_addPluginPath)},
    {SIP_MLNAME_CAST(sipName_baseUrl), meth_QDeclarativeEngine_baseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_baseUrl)},
    {SIP_MLNAME_CAST(sipName_clearComponentCache), meth_QDeclarativeEngine_clearComponentCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_clearComponentCache)},
    {SIP_MLNAME_CAST(sipName_contextForObject), meth_QDeclarativeEngine_contextForObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_contextForObject)},
    {SIP_MLNAME_CAST(sipName_imageProvider), meth_QDeclarativeEngine_imageProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_imageProvider)},
    {SIP_MLNAME_CAST(sipName_importPathList), meth_QDeclarativeEngine_importPathList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_importPathList)},
    {SIP_MLNAME_CAST(sipName_importPlugin), meth_QDeclarativeEngine_importPlugin, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_importPlugin)},
    {SIP_MLNAME_CAST(sipName_networkAccessManager), meth_QDeclarativeEngine_networkAccessManager, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_networkAccessManager)},
    {SIP_MLNAME_CAST(sipName_networkAccessManagerFactory), meth_QDeclarativeEngine_networkAccessManagerFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_networkAccessManagerFactory)},
    {SIP_MLNAME_CAST(sipName_objectOwnership), meth_QDeclarativeEngine_objectOwnership, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_objectOwnership)},
    {SIP_MLNAME_CAST(sipName_offlineStoragePath), meth_QDeclarativeEngine_offlineStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_offlineStoragePath)},
    {SIP_MLNAME_CAST(sipName_outputWarningsToStandardError), meth_QDeclarativeEngine_outputWarningsToStandardError, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_outputWarningsToStandardError)},
    {SIP_MLNAME_CAST(sipName_pluginPathList), meth_QDeclarativeEngine_pluginPathList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_pluginPathList)},
    {SIP_MLNAME_CAST(sipName_removeImageProvider), meth_QDeclarativeEngine_removeImageProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_removeImageProvider)},
    {SIP_MLNAME_CAST(sipName_rootContext), meth_QDeclarativeEngine_rootContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_rootContext)},
    {SIP_MLNAME_CAST(sipName_setBaseUrl), meth_QDeclarativeEngine_setBaseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_setBaseUrl)},
    {SIP_MLNAME_CAST(sipName_setContextForObject), meth_QDeclarativeEngine_setContextForObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_setContextForObject)},
    {SIP_MLNAME_CAST(sipName_setImportPathList), meth_QDeclarativeEngine_setImportPathList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_setImportPathList)},
    {SIP_MLNAME_CAST(sipName_setNetworkAccessManagerFactory), meth_QDeclarativeEngine_setNetworkAccessManagerFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_setNetworkAccessManagerFactory)},
    {SIP_MLNAME_CAST(sipName_setObjectOwnership), meth_QDeclarativeEngine_setObjectOwnership, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_setObjectOwnership)},
    {SIP_MLNAME_CAST(sipName_setOfflineStoragePath), meth_QDeclarativeEngine_setOfflineStoragePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_setOfflineStoragePath)},
    {SIP_MLNAME_CAST(sipName_setOutputWarningsToStandardError), meth_QDeclarativeEngine_setOutputWarningsToStandardError, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_setOutputWarningsToStandardError)},
    {SIP_MLNAME_CAST(sipName_setPluginPathList), meth_QDeclarativeEngine_setPluginPathList, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeEngine_setPluginPathList)}
};

static sipEnumMemberDef enummembers_QDeclarativeEngine[] = {
    {sipName_CppOwnership, static_cast<int>( ::QDeclarativeEngine::CppOwnership), 4},
    {sipName_JavaScriptOwnership, static_cast<int>( ::QDeclarativeEngine::JavaScriptOwnership), 4},
};

PyDoc_STRVAR(doc_QDeclarativeEngine, "\1QDeclarativeEngine(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QDeclarativeEngine[] = {
    {"warnings(QList<QDeclarativeError>)", "\1warnings(self, Sequence[QDeclarativeError])", 0, 0},
    {"quit()", "\1quit(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QDeclarativeEngine = {
    & ::QDeclarativeEngine::staticMetaObject,
    0,
    signals_QDeclarativeEngine
};


sipClassTypeDef sipTypeDef_QtDeclarative_QDeclarativeEngine = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDeclarativeEngine,
        {0},
        &plugin_QDeclarativeEngine
    },
    {
        sipNameNr_QDeclarativeEngine,
        {0, 0, 1},
        25, methods_QDeclarativeEngine,
        2, enummembers_QDeclarativeEngine,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDeclarativeEngine,
    -1,
    -1,
    supers_QDeclarativeEngine,
    0,
    init_type_QDeclarativeEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDeclarativeEngine,
    0,
    0,
    0,
    release_QDeclarativeEngine,
    cast_QDeclarativeEngine,
    0,
    0,
    0,
    0,
    0,
    0
};

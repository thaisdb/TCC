/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDeclarative.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativeexpression.sip"
#include <qdeclarativeexpression.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativecontext.sip"
#include <qdeclarativecontext.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativeerror.sip"
#include <qdeclarativeerror.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativeengine.sip"
#include <qdeclarativeengine.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeExpression.cpp"


class sipQDeclarativeExpression : public  ::QDeclarativeExpression
{
public:
    sipQDeclarativeExpression();
    sipQDeclarativeExpression( ::QDeclarativeContext*, ::QObject*,const  ::QString&, ::QObject*);
    virtual ~sipQDeclarativeExpression();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDeclarativeExpression(const sipQDeclarativeExpression &);
    sipQDeclarativeExpression &operator = (const sipQDeclarativeExpression &);

    char sipPyMethods[7];
};

sipQDeclarativeExpression::sipQDeclarativeExpression():  ::QDeclarativeExpression(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeExpression::sipQDeclarativeExpression( ::QDeclarativeContext*a0, ::QObject*a1,const  ::QString& a2, ::QObject*a3):  ::QDeclarativeExpression(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeExpression::~sipQDeclarativeExpression()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDeclarativeExpression::metaObject() const
{
    return sip_QtDeclarative_qt_metaobject(sipPySelf,sipType_QDeclarativeExpression);
}

int sipQDeclarativeExpression::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QDeclarativeExpression::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtDeclarative_qt_metacall(sipPySelf,sipType_QDeclarativeExpression,_c,_id,_a);

    return _id;
}

void *sipQDeclarativeExpression::qt_metacast(const char *_clname)
{
    return (sip_QtDeclarative_qt_metacast(sipPySelf, sipType_QDeclarativeExpression, _clname)) ? this :  ::QDeclarativeExpression::qt_metacast(_clname);
}

bool sipQDeclarativeExpression::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QDeclarativeExpression::event(a0);

    extern bool sipVH_QtDeclarative_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtDeclarative_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDeclarativeExpression::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QDeclarativeExpression::eventFilter(a0,a1);

    extern bool sipVH_QtDeclarative_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtDeclarative_4(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQDeclarativeExpression::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QDeclarativeExpression::timerEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtDeclarative_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeExpression::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QDeclarativeExpression::childEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtDeclarative_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeExpression::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QDeclarativeExpression::customEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtDeclarative_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeExpression::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QDeclarativeExpression::connectNotify(a0);
        return;
    }

    extern void sipVH_QtDeclarative_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtDeclarative_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeExpression::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QDeclarativeExpression::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtDeclarative_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtDeclarative_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QDeclarativeExpression_engine, "engine(self) -> QDeclarativeEngine");

extern "C" {static PyObject *meth_QDeclarativeExpression_engine(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
             ::QDeclarativeEngine*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->engine();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDeclarativeEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_engine, doc_QDeclarativeExpression_engine);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_context, "context(self) -> QDeclarativeContext");

extern "C" {static PyObject *meth_QDeclarativeExpression_context(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_context(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
             ::QDeclarativeContext*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->context();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDeclarativeContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_context, doc_QDeclarativeExpression_context);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_expression, "expression(self) -> str");

extern "C" {static PyObject *meth_QDeclarativeExpression_expression(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_expression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->expression());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_expression, doc_QDeclarativeExpression_expression);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_setExpression, "setExpression(self, str)");

extern "C" {static PyObject *meth_QDeclarativeExpression_setExpression(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_setExpression(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDeclarativeExpression, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExpression(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_setExpression, doc_QDeclarativeExpression_setExpression);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_notifyOnValueChanged, "notifyOnValueChanged(self) -> bool");

extern "C" {static PyObject *meth_QDeclarativeExpression_notifyOnValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_notifyOnValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->notifyOnValueChanged();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_notifyOnValueChanged, doc_QDeclarativeExpression_notifyOnValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_setNotifyOnValueChanged, "setNotifyOnValueChanged(self, bool)");

extern "C" {static PyObject *meth_QDeclarativeExpression_setNotifyOnValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_setNotifyOnValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDeclarativeExpression, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNotifyOnValueChanged(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_setNotifyOnValueChanged, doc_QDeclarativeExpression_setNotifyOnValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_sourceFile, "sourceFile(self) -> str");

extern "C" {static PyObject *meth_QDeclarativeExpression_sourceFile(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_sourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->sourceFile());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_sourceFile, doc_QDeclarativeExpression_sourceFile);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_lineNumber, "lineNumber(self) -> int");

extern "C" {static PyObject *meth_QDeclarativeExpression_lineNumber(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_lineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_lineNumber, doc_QDeclarativeExpression_lineNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_setSourceLocation, "setSourceLocation(self, str, int)");

extern "C" {static PyObject *meth_QDeclarativeExpression_setSourceLocation(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_setSourceLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;
         ::QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QDeclarativeExpression, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSourceLocation(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_setSourceLocation, doc_QDeclarativeExpression_setSourceLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_scopeObject, "scopeObject(self) -> QObject");

extern "C" {static PyObject *meth_QDeclarativeExpression_scopeObject(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_scopeObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
             ::QObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scopeObject();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_scopeObject, doc_QDeclarativeExpression_scopeObject);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_hasError, "hasError(self) -> bool");

extern "C" {static PyObject *meth_QDeclarativeExpression_hasError(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_hasError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasError();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_hasError, doc_QDeclarativeExpression_hasError);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_clearError, "clearError(self)");

extern "C" {static PyObject *meth_QDeclarativeExpression_clearError(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_clearError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearError();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_clearError, doc_QDeclarativeExpression_clearError);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_error, "error(self) -> QDeclarativeError");

extern "C" {static PyObject *meth_QDeclarativeExpression_error(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeExpression *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
             ::QDeclarativeError*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDeclarativeError(sipCpp->error());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDeclarativeError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_error, doc_QDeclarativeExpression_error);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeExpression_evaluate, "evaluate(self) -> Tuple[Any, bool]");

extern "C" {static PyObject *meth_QDeclarativeExpression_evaluate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeExpression_evaluate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QDeclarativeExpression *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QDeclarativeExpression, &sipCpp))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant(sipCpp->evaluate(&a0));
            Py_END_ALLOW_THREADS

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeExpression, sipName_evaluate, doc_QDeclarativeExpression_evaluate);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDeclarativeExpression(void *, const sipTypeDef *);}
static void *cast_QDeclarativeExpression(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDeclarativeExpression *sipCpp = reinterpret_cast< ::QDeclarativeExpression *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDeclarativeExpression(void *, int);}
static void release_QDeclarativeExpression(void *sipCppV, int)
{
     ::QDeclarativeExpression *sipCpp = reinterpret_cast< ::QDeclarativeExpression *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDeclarativeExpression(sipSimpleWrapper *);}
static void dealloc_QDeclarativeExpression(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDeclarativeExpression *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDeclarativeExpression(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDeclarativeExpression(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDeclarativeExpression(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDeclarativeExpression *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeExpression();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QDeclarativeContext* a0;
         ::QObject* a1;
        const  ::QString* a2;
        int a2State = 0;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J8J1|JH", sipType_QDeclarativeContext, &a0, sipType_QObject, &a1, sipType_QString,&a2, &a2State, sipType_QObject, &a3, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeExpression(a0,a1,*a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDeclarativeExpression[] = {{6, 0, 1}};


static PyMethodDef methods_QDeclarativeExpression[] = {
    {SIP_MLNAME_CAST(sipName_clearError), meth_QDeclarativeExpression_clearError, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_clearError)},
    {SIP_MLNAME_CAST(sipName_context), meth_QDeclarativeExpression_context, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_context)},
    {SIP_MLNAME_CAST(sipName_engine), meth_QDeclarativeExpression_engine, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_engine)},
    {SIP_MLNAME_CAST(sipName_error), meth_QDeclarativeExpression_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_error)},
    {SIP_MLNAME_CAST(sipName_evaluate), (PyCFunction)meth_QDeclarativeExpression_evaluate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_evaluate)},
    {SIP_MLNAME_CAST(sipName_expression), meth_QDeclarativeExpression_expression, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_expression)},
    {SIP_MLNAME_CAST(sipName_hasError), meth_QDeclarativeExpression_hasError, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_hasError)},
    {SIP_MLNAME_CAST(sipName_lineNumber), meth_QDeclarativeExpression_lineNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_lineNumber)},
    {SIP_MLNAME_CAST(sipName_notifyOnValueChanged), meth_QDeclarativeExpression_notifyOnValueChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_notifyOnValueChanged)},
    {SIP_MLNAME_CAST(sipName_scopeObject), meth_QDeclarativeExpression_scopeObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_scopeObject)},
    {SIP_MLNAME_CAST(sipName_setExpression), meth_QDeclarativeExpression_setExpression, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_setExpression)},
    {SIP_MLNAME_CAST(sipName_setNotifyOnValueChanged), meth_QDeclarativeExpression_setNotifyOnValueChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_setNotifyOnValueChanged)},
    {SIP_MLNAME_CAST(sipName_setSourceLocation), meth_QDeclarativeExpression_setSourceLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_setSourceLocation)},
    {SIP_MLNAME_CAST(sipName_sourceFile), meth_QDeclarativeExpression_sourceFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeExpression_sourceFile)}
};

PyDoc_STRVAR(doc_QDeclarativeExpression, "\1QDeclarativeExpression()\n"
    "QDeclarativeExpression(QDeclarativeContext, QObject, str, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QDeclarativeExpression[] = {
    {"valueChanged()", "\1valueChanged(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QDeclarativeExpression = {
    & ::QDeclarativeExpression::staticMetaObject,
    0,
    signals_QDeclarativeExpression
};


sipClassTypeDef sipTypeDef_QtDeclarative_QDeclarativeExpression = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDeclarativeExpression,
        {0},
        &plugin_QDeclarativeExpression
    },
    {
        sipNameNr_QDeclarativeExpression,
        {0, 0, 1},
        14, methods_QDeclarativeExpression,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDeclarativeExpression,
    -1,
    -1,
    supers_QDeclarativeExpression,
    0,
    init_type_QDeclarativeExpression,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDeclarativeExpression,
    0,
    0,
    0,
    release_QDeclarativeExpression,
    cast_QDeclarativeExpression,
    0,
    0,
    0,
    0,
    0,
    0
};

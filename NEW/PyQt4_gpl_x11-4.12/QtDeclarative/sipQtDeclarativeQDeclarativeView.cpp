/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDeclarative.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativeview.sip"
#include <qdeclarativeview.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"

#line 28 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 524 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 561 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativeerror.sip"
#include <qdeclarativeerror.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 1138 "sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativecontext.sip"
#include <qdeclarativecontext.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativeengine.sip"
#include <qdeclarativeengine.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 34 "sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "sip/QtGui/qgraphicsview.sip"
#include <qgraphicsview.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "sip/QtGui/qgraphicsview.sip"
#include <qgraphicsview.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 1966 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 159 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 647 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 596 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 347 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 252 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 474 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 505 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 739 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 114 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 765 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 117 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 792 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 781 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 618 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 129 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "sip/QtGui/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 132 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 135 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 138 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 141 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 110 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 144 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 147 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 350 "sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 150 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 153 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 156 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 159 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 30 "sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 162 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "sip/QtGui/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 165 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "sip/QtGui/qgraphicsview.sip"
#include <qgraphicsview.h>
#line 168 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 171 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 174 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 177 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 180 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 183 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qframe.sip"
#include <qframe.h>
#line 186 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 189 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 192 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 195 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 198 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 201 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 204 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 207 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 210 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 213 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 216 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 219 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 222 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 225 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 607 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 228 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 854 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 231 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 403 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 234 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 574 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 237 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 548 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 240 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 243 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 52 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 246 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 34 "sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 249 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 252 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 255 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 258 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 261 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 264 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 267 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 270 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 273 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 276 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 279 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 282 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 285 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 288 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 291 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 294 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 297 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 300 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeView.cpp"


class sipQDeclarativeView : public  ::QDeclarativeView
{
public:
    sipQDeclarativeView( ::QWidget*);
    sipQDeclarativeView(const  ::QUrl&, ::QWidget*);
    virtual ~sipQDeclarativeView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void scrollContentsBy(int,int);
    bool viewportEvent( ::QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const  ::QFont&);
    void paletteChange(const  ::QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    void inputMethodEvent( ::QInputMethodEvent*);
    void changeEvent( ::QEvent*);
    void hideEvent( ::QHideEvent*);
    void showEvent( ::QShowEvent*);
    void dropEvent( ::QDropEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void actionEvent( ::QActionEvent*);
    void tabletEvent( ::QTabletEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void closeEvent( ::QCloseEvent*);
    void resizeEvent( ::QResizeEvent*);
    void moveEvent( ::QMoveEvent*);
    void paintEvent( ::QPaintEvent*);
    void leaveEvent( ::QEvent*);
    void enterEvent( ::QEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void focusInEvent( ::QFocusEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void wheelEvent( ::QWheelEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mousePressEvent( ::QMouseEvent*);
    int heightForWidth(int) const;
     ::QSize minimumSizeHint() const;
     ::QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
     ::QPaintEngine* paintEngine() const;
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);
    void drawBackground( ::QPainter*,const  ::QRectF&);
    void drawForeground( ::QPainter*,const  ::QRectF&);
    void drawItems( ::QPainter*,int, ::QGraphicsItem**,const  ::QStyleOptionGraphicsItem*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDeclarativeView(const sipQDeclarativeView &);
    sipQDeclarativeView &operator = (const sipQDeclarativeView &);

    char sipPyMethods[52];
};

sipQDeclarativeView::sipQDeclarativeView( ::QWidget*a0):  ::QDeclarativeView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeView::sipQDeclarativeView(const  ::QUrl& a0, ::QWidget*a1):  ::QDeclarativeView(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeView::~sipQDeclarativeView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDeclarativeView::metaObject() const
{
    return sip_QtDeclarative_qt_metaobject(sipPySelf,sipType_QDeclarativeView);
}

int sipQDeclarativeView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QDeclarativeView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtDeclarative_qt_metacall(sipPySelf,sipType_QDeclarativeView,_c,_id,_a);

    return _id;
}

void *sipQDeclarativeView::qt_metacast(const char *_clname)
{
    return (sip_QtDeclarative_qt_metacast(sipPySelf, sipType_QDeclarativeView, _clname)) ? this :  ::QDeclarativeView::qt_metacast(_clname);
}

void sipQDeclarativeView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
         ::QDeclarativeView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtDeclarative_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtDeclarative_60(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQDeclarativeView::viewportEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return  ::QDeclarativeView::viewportEvent(a0);

    extern bool sipVH_QtDeclarative_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtDeclarative_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
         ::QDeclarativeView::languageChange();
        return;
    }

    extern void sipVH_QtDeclarative_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtDeclarative_7(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQDeclarativeView::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
         ::QDeclarativeView::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtDeclarative_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtDeclarative_39(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::fontChange(const  ::QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
         ::QDeclarativeView::fontChange(a0);
        return;
    }

    extern void sipVH_QtDeclarative_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QFont&);

    sipVH_QtDeclarative_59(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::paletteChange(const  ::QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
         ::QDeclarativeView::paletteChange(a0);
        return;
    }

    extern void sipVH_QtDeclarative_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPalette&);

    sipVH_QtDeclarative_58(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
         ::QDeclarativeView::enabledChange(a0);
        return;
    }

    extern void sipVH_QtDeclarative_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtDeclarative_39(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDeclarativeView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QDeclarativeView::focusNextPrevChild(a0);

    extern bool sipVH_QtDeclarative_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtDeclarative_57(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQDeclarativeView::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QDeclarativeView::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtDeclarative_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtDeclarative_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtDeclarative_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::changeEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtDeclarative_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::hideEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtDeclarative_56(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::showEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtDeclarative_55(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtDeclarative_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtDeclarative_53(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtDeclarative_52(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtDeclarative_51(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtDeclarative_50(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtDeclarative_49(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtDeclarative_48(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtDeclarative_47(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtDeclarative_46(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::moveEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtDeclarative_45(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtDeclarative_44(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtDeclarative_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::enterEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtDeclarative_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtDeclarative_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtDeclarative_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtDeclarative_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtDeclarative_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtDeclarative_43(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtDeclarative_42(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtDeclarative_42(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtDeclarative_42(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtDeclarative_42(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQDeclarativeView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QDeclarativeView::heightForWidth(a0);

    extern int sipVH_QtDeclarative_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtDeclarative_41(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSize sipQDeclarativeView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QDeclarativeView::minimumSizeHint();

    extern  ::QSize sipVH_QtDeclarative_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtDeclarative_40(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQDeclarativeView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QDeclarativeView::sizeHint();

    extern  ::QSize sipVH_QtDeclarative_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtDeclarative_40(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQDeclarativeView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QDeclarativeView::setVisible(a0);
        return;
    }

    extern void sipVH_QtDeclarative_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtDeclarative_39(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQDeclarativeView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QDeclarativeView::devType();

    extern int sipVH_QtDeclarative_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtDeclarative_20(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQDeclarativeView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QDeclarativeView::paintEngine();

    extern  ::QPaintEngine* sipVH_QtDeclarative_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtDeclarative_38(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQDeclarativeView::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QDeclarativeView::metric(a0);

    extern int sipVH_QtDeclarative_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtDeclarative_37(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDeclarativeView::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QDeclarativeView::event(a0);

    extern bool sipVH_QtDeclarative_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtDeclarative_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDeclarativeView::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QDeclarativeView::eventFilter(a0,a1);

    extern bool sipVH_QtDeclarative_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtDeclarative_4(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQDeclarativeView::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::timerEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtDeclarative_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::childEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtDeclarative_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QDeclarativeView::customEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtDeclarative_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QDeclarativeView::connectNotify(a0);
        return;
    }

    extern void sipVH_QtDeclarative_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtDeclarative_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QDeclarativeView::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtDeclarative_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtDeclarative_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeView::drawBackground( ::QPainter*a0,const  ::QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_drawBackground);

    if (!sipMeth)
    {
         ::QDeclarativeView::drawBackground(a0,a1);
        return;
    }

    extern void sipVH_QtDeclarative_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRectF&);

    sipVH_QtDeclarative_36(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQDeclarativeView::drawForeground( ::QPainter*a0,const  ::QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_drawForeground);

    if (!sipMeth)
    {
         ::QDeclarativeView::drawForeground(a0,a1);
        return;
    }

    extern void sipVH_QtDeclarative_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRectF&);

    sipVH_QtDeclarative_36(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQDeclarativeView::drawItems( ::QPainter*a0,int a1, ::QGraphicsItem**a2,const  ::QStyleOptionGraphicsItem*a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_drawItems);

    if (!sipMeth)
    {
         ::QDeclarativeView::drawItems(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtDeclarative_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,int, ::QGraphicsItem**,const  ::QStyleOptionGraphicsItem*);

    sipVH_QtDeclarative_35(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}


PyDoc_STRVAR(doc_QDeclarativeView_source, "source(self) -> QUrl");

extern "C" {static PyObject *meth_QDeclarativeView_source(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeView, &sipCpp))
        {
             ::QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QUrl(sipCpp->source());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_source, doc_QDeclarativeView_source);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_setSource, "setSource(self, QUrl)");

extern "C" {static PyObject *meth_QDeclarativeView_setSource(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_setSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QUrl* a0;
         ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDeclarativeView, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSource(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_setSource, doc_QDeclarativeView_setSource);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_engine, "engine(self) -> QDeclarativeEngine");

extern "C" {static PyObject *meth_QDeclarativeView_engine(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeView, &sipCpp))
        {
             ::QDeclarativeEngine*sipRes;
            PyObject *sipResObj;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->engine();
            Py_END_ALLOW_THREADS

            sipResObj = sipConvertFromType(sipRes,sipType_QDeclarativeEngine,NULL);

            sipKeepReference(sipSelf, -7, sipResObj);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_engine, doc_QDeclarativeView_engine);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_rootContext, "rootContext(self) -> QDeclarativeContext");

extern "C" {static PyObject *meth_QDeclarativeView_rootContext(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_rootContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeView, &sipCpp))
        {
             ::QDeclarativeContext*sipRes;
            PyObject *sipResObj;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rootContext();
            Py_END_ALLOW_THREADS

            sipResObj = sipConvertFromType(sipRes,sipType_QDeclarativeContext,NULL);

            sipKeepReference(sipSelf, -8, sipResObj);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_rootContext, doc_QDeclarativeView_rootContext);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_rootObject, "rootObject(self) -> QGraphicsObject");

extern "C" {static PyObject *meth_QDeclarativeView_rootObject(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_rootObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeView, &sipCpp))
        {
             ::QGraphicsObject*sipRes;
            PyObject *sipResObj;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rootObject();
            Py_END_ALLOW_THREADS

            sipResObj = sipConvertFromType(sipRes,sipType_QGraphicsObject,NULL);

            sipKeepReference(sipSelf, -9, sipResObj);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_rootObject, doc_QDeclarativeView_rootObject);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_resizeMode, "resizeMode(self) -> QDeclarativeView.ResizeMode");

extern "C" {static PyObject *meth_QDeclarativeView_resizeMode(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_resizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeView, &sipCpp))
        {
             ::QDeclarativeView::ResizeMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resizeMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDeclarativeView_ResizeMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_resizeMode, doc_QDeclarativeView_resizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_setResizeMode, "setResizeMode(self, QDeclarativeView.ResizeMode)");

extern "C" {static PyObject *meth_QDeclarativeView_setResizeMode(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_setResizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDeclarativeView::ResizeMode a0;
         ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDeclarativeView, &sipCpp, sipType_QDeclarativeView_ResizeMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setResizeMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_setResizeMode, doc_QDeclarativeView_setResizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_status, "status(self) -> QDeclarativeView.Status");

extern "C" {static PyObject *meth_QDeclarativeView_status(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeView, &sipCpp))
        {
             ::QDeclarativeView::Status sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->status();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDeclarativeView_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_status, doc_QDeclarativeView_status);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_errors, "errors(self) -> List[QDeclarativeError]");

extern "C" {static PyObject *meth_QDeclarativeView_errors(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_errors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeView, &sipCpp))
        {
            QList< ::QDeclarativeError>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QDeclarativeError>(sipCpp->errors());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QDeclarativeError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_errors, doc_QDeclarativeView_errors);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QDeclarativeView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeView, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QDeclarativeView::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_sizeHint, doc_QDeclarativeView_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_initialSize, "initialSize(self) -> QSize");

extern "C" {static PyObject *meth_QDeclarativeView_initialSize(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_initialSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeView, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize(sipCpp->initialSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_initialSize, doc_QDeclarativeView_initialSize);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QDeclarativeView_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDeclarativeView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDeclarativeView::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_resizeEvent, doc_QDeclarativeView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QDeclarativeView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDeclarativeView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDeclarativeView::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_paintEvent, doc_QDeclarativeView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QDeclarativeView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDeclarativeView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDeclarativeView::timerEvent(a0) : sipCpp->timerEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_timerEvent, doc_QDeclarativeView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeView_eventFilter, "eventFilter(self, QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QDeclarativeView_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeView_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QObject* a0;
         ::QEvent* a1;
         ::QDeclarativeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8J8", &sipSelf, sipType_QDeclarativeView, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDeclarativeView::eventFilter(a0,a1) : sipCpp->eventFilter(a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeView, sipName_eventFilter, doc_QDeclarativeView_eventFilter);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDeclarativeView(void *, const sipTypeDef *);}
static void *cast_QDeclarativeView(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDeclarativeView *sipCpp = reinterpret_cast< ::QDeclarativeView *>(sipCppV);

    if (targetType == sipType_QGraphicsView)
        return static_cast< ::QGraphicsView *>(sipCpp);

    if (targetType == sipType_QAbstractScrollArea)
        return static_cast< ::QAbstractScrollArea *>(sipCpp);

    if (targetType == sipType_QFrame)
        return static_cast< ::QFrame *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDeclarativeView(void *, int);}
static void release_QDeclarativeView(void *sipCppV, int)
{
     ::QDeclarativeView *sipCpp = reinterpret_cast< ::QDeclarativeView *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDeclarativeView(sipSimpleWrapper *);}
static void dealloc_QDeclarativeView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDeclarativeView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDeclarativeView(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDeclarativeView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDeclarativeView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDeclarativeView *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeView(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QUrl* a0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QUrl, &a0, sipType_QWidget, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeView(*a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDeclarativeView[] = {{19, 2, 1}};


static PyMethodDef methods_QDeclarativeView[] = {
    {SIP_MLNAME_CAST(sipName_engine), meth_QDeclarativeView_engine, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_engine)},
    {SIP_MLNAME_CAST(sipName_errors), meth_QDeclarativeView_errors, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_errors)},
    {SIP_MLNAME_CAST(sipName_eventFilter), meth_QDeclarativeView_eventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_eventFilter)},
    {SIP_MLNAME_CAST(sipName_initialSize), meth_QDeclarativeView_initialSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_initialSize)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QDeclarativeView_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QDeclarativeView_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_resizeMode), meth_QDeclarativeView_resizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_resizeMode)},
    {SIP_MLNAME_CAST(sipName_rootContext), meth_QDeclarativeView_rootContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_rootContext)},
    {SIP_MLNAME_CAST(sipName_rootObject), meth_QDeclarativeView_rootObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_rootObject)},
    {SIP_MLNAME_CAST(sipName_setResizeMode), meth_QDeclarativeView_setResizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_setResizeMode)},
    {SIP_MLNAME_CAST(sipName_setSource), meth_QDeclarativeView_setSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_setSource)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QDeclarativeView_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_sizeHint)},
    {SIP_MLNAME_CAST(sipName_source), meth_QDeclarativeView_source, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_source)},
    {SIP_MLNAME_CAST(sipName_status), meth_QDeclarativeView_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_status)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QDeclarativeView_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeView_timerEvent)}
};

static sipEnumMemberDef enummembers_QDeclarativeView[] = {
    {sipName_Error, static_cast<int>( ::QDeclarativeView::Error), 24},
    {sipName_Loading, static_cast<int>( ::QDeclarativeView::Loading), 24},
    {sipName_Null, static_cast<int>( ::QDeclarativeView::Null), 24},
    {sipName_Ready, static_cast<int>( ::QDeclarativeView::Ready), 24},
    {sipName_SizeRootObjectToView, static_cast<int>( ::QDeclarativeView::SizeRootObjectToView), 23},
    {sipName_SizeViewToRootObject, static_cast<int>( ::QDeclarativeView::SizeViewToRootObject), 23},
};

PyDoc_STRVAR(doc_QDeclarativeView, "\1QDeclarativeView(parent: QWidget = None)\n"
    "QDeclarativeView(QUrl, parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QDeclarativeView[] = {
    {"statusChanged(QDeclarativeView::Status)", "\1statusChanged(self, QDeclarativeView.Status)", 0, 0},
    {"sceneResized(QSize)", "\1sceneResized(self, QSize)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QDeclarativeView = {
    & ::QDeclarativeView::staticMetaObject,
    0,
    signals_QDeclarativeView
};


sipClassTypeDef sipTypeDef_QtDeclarative_QDeclarativeView = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDeclarativeView,
        {0},
        &plugin_QDeclarativeView
    },
    {
        sipNameNr_QDeclarativeView,
        {0, 0, 1},
        15, methods_QDeclarativeView,
        6, enummembers_QDeclarativeView,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDeclarativeView,
    -1,
    -1,
    supers_QDeclarativeView,
    0,
    init_type_QDeclarativeView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDeclarativeView,
    0,
    0,
    0,
    release_QDeclarativeView,
    cast_QDeclarativeView,
    0,
    0,
    0,
    0,
    0,
    0
};

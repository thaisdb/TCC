/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDeclarative.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtDeclarative/qdeclarativeitem.sip"
#include <qdeclarativeitem.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"

#line 159 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 647 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 474 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 28 "sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 26 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 1966 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 28 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 110 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 28 "sip/QtGui/qgraphicstransform.sip"
#include <qgraphicstransform.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 28 "sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 1138 "sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 26 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 114 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 34 "sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 117 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 26 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 120 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 123 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 126 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 182 "sip/QtGui/qgraphicswidget.sip"
#include <qgraphicswidget.h>
#line 129 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 78 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 132 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 48 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 135 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 135 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 138 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 505 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 188 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 144 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 105 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 147 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 350 "sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 150 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 30 "sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 153 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 156 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 26 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 159 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 28 "sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 162 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 1098 "sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 165 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"
#line 28 "sip/QtGui/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 168 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtDeclarative/sipQtDeclarativeQDeclarativeItem.cpp"


class sipQDeclarativeItem : public  ::QDeclarativeItem
{
public:
    sipQDeclarativeItem( ::QDeclarativeItem*);
    virtual ~sipQDeclarativeItem();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void geometryChanged(const  ::QRectF&,const  ::QRectF&);
    void classBegin();
    void componentComplete();
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    void wheelEvent( ::QGraphicsSceneWheelEvent*);
    bool sceneEventFilter( ::QGraphicsItem*, ::QEvent*);
    bool sceneEvent( ::QEvent*);
    void mouseReleaseEvent( ::QGraphicsSceneMouseEvent*);
    void mousePressEvent( ::QGraphicsSceneMouseEvent*);
    void mouseMoveEvent( ::QGraphicsSceneMouseEvent*);
    void mouseDoubleClickEvent( ::QGraphicsSceneMouseEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void keyPressEvent( ::QKeyEvent*);
     ::QVariant itemChange( ::QGraphicsItem::GraphicsItemChange,const  ::QVariant&);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    void inputMethodEvent( ::QInputMethodEvent*);
    void hoverMoveEvent( ::QGraphicsSceneHoverEvent*);
    void hoverLeaveEvent( ::QGraphicsSceneHoverEvent*);
    void hoverEnterEvent( ::QGraphicsSceneHoverEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void focusInEvent( ::QFocusEvent*);
    void dropEvent( ::QGraphicsSceneDragDropEvent*);
    void dragMoveEvent( ::QGraphicsSceneDragDropEvent*);
    void dragLeaveEvent( ::QGraphicsSceneDragDropEvent*);
    void dragEnterEvent( ::QGraphicsSceneDragDropEvent*);
    void contextMenuEvent( ::QGraphicsSceneContextMenuEvent*);
    int type() const;
    void paint( ::QPainter*,const  ::QStyleOptionGraphicsItem*, ::QWidget*);
     ::QPainterPath opaqueArea() const;
    bool isObscuredBy(const  ::QGraphicsItem*) const;
    bool collidesWithPath(const  ::QPainterPath&, ::Qt::ItemSelectionMode) const;
    bool collidesWithItem(const  ::QGraphicsItem*, ::Qt::ItemSelectionMode) const;
    bool contains(const  ::QPointF&) const;
     ::QPainterPath shape() const;
     ::QRectF boundingRect() const;
    void advance(int);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDeclarativeItem(const sipQDeclarativeItem &);
    sipQDeclarativeItem &operator = (const sipQDeclarativeItem &);

    char sipPyMethods[42];
};

sipQDeclarativeItem::sipQDeclarativeItem( ::QDeclarativeItem*a0):  ::QDeclarativeItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDeclarativeItem::~sipQDeclarativeItem()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDeclarativeItem::metaObject() const
{
    return sip_QtDeclarative_qt_metaobject(sipPySelf,sipType_QDeclarativeItem);
}

int sipQDeclarativeItem::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QDeclarativeItem::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtDeclarative_qt_metacall(sipPySelf,sipType_QDeclarativeItem,_c,_id,_a);

    return _id;
}

void *sipQDeclarativeItem::qt_metacast(const char *_clname)
{
    return (sip_QtDeclarative_qt_metacast(sipPySelf, sipType_QDeclarativeItem, _clname)) ? this :  ::QDeclarativeItem::qt_metacast(_clname);
}

void sipQDeclarativeItem::geometryChanged(const  ::QRectF& a0,const  ::QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_geometryChanged);

    if (!sipMeth)
    {
         ::QDeclarativeItem::geometryChanged(a0,a1);
        return;
    }

    extern void sipVH_QtDeclarative_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRectF&,const  ::QRectF&);

    sipVH_QtDeclarative_32(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQDeclarativeItem::classBegin()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_classBegin);

    if (!sipMeth)
    {
         ::QDeclarativeItem::classBegin();
        return;
    }

    extern void sipVH_QtDeclarative_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtDeclarative_7(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQDeclarativeItem::componentComplete()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_componentComplete);

    if (!sipMeth)
    {
         ::QDeclarativeItem::componentComplete();
        return;
    }

    extern void sipVH_QtDeclarative_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtDeclarative_7(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQDeclarativeItem::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QDeclarativeItem::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtDeclarative_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtDeclarative_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QDeclarativeItem::connectNotify(a0);
        return;
    }

    extern void sipVH_QtDeclarative_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtDeclarative_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::customEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtDeclarative_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::childEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtDeclarative_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::timerEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtDeclarative_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDeclarativeItem::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QDeclarativeItem::eventFilter(a0,a1);

    extern bool sipVH_QtDeclarative_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtDeclarative_4(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQDeclarativeItem::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QDeclarativeItem::event(a0);

    extern bool sipVH_QtDeclarative_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtDeclarative_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::wheelEvent( ::QGraphicsSceneWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneWheelEvent*);

    sipVH_QtDeclarative_31(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDeclarativeItem::sceneEventFilter( ::QGraphicsItem*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_sceneEventFilter);

    if (!sipMeth)
        return  ::QDeclarativeItem::sceneEventFilter(a0,a1);

    extern bool sipVH_QtDeclarative_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsItem*, ::QEvent*);

    return sipVH_QtDeclarative_30(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQDeclarativeItem::sceneEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_sceneEvent);

    if (!sipMeth)
        return  ::QDeclarativeItem::sceneEvent(a0);

    extern bool sipVH_QtDeclarative_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtDeclarative_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::mouseReleaseEvent( ::QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneMouseEvent*);

    sipVH_QtDeclarative_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::mousePressEvent( ::QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneMouseEvent*);

    sipVH_QtDeclarative_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::mouseMoveEvent( ::QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneMouseEvent*);

    sipVH_QtDeclarative_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::mouseDoubleClickEvent( ::QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneMouseEvent*);

    sipVH_QtDeclarative_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtDeclarative_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtDeclarative_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQDeclarativeItem::itemChange( ::QGraphicsItem::GraphicsItemChange a0,const  ::QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_itemChange);

    if (!sipMeth)
        return  ::QDeclarativeItem::itemChange(a0,a1);

    extern  ::QVariant sipVH_QtDeclarative_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsItem::GraphicsItemChange,const  ::QVariant&);

    return sipVH_QtDeclarative_27(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

 ::QVariant sipQDeclarativeItem::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QDeclarativeItem::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtDeclarative_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtDeclarative_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtDeclarative_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::hoverMoveEvent( ::QGraphicsSceneHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_hoverMoveEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::hoverMoveEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneHoverEvent*);

    sipVH_QtDeclarative_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::hoverLeaveEvent( ::QGraphicsSceneHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_hoverLeaveEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::hoverLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneHoverEvent*);

    sipVH_QtDeclarative_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::hoverEnterEvent( ::QGraphicsSceneHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_hoverEnterEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::hoverEnterEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneHoverEvent*);

    sipVH_QtDeclarative_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtDeclarative_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtDeclarative_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::dropEvent( ::QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::dropEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneDragDropEvent*);

    sipVH_QtDeclarative_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::dragMoveEvent( ::QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneDragDropEvent*);

    sipVH_QtDeclarative_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::dragLeaveEvent( ::QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneDragDropEvent*);

    sipVH_QtDeclarative_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::dragEnterEvent( ::QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneDragDropEvent*);

    sipVH_QtDeclarative_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDeclarativeItem::contextMenuEvent( ::QGraphicsSceneContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QDeclarativeItem::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtDeclarative_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QGraphicsSceneContextMenuEvent*);

    sipVH_QtDeclarative_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQDeclarativeItem::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_type);

    if (!sipMeth)
        return  ::QDeclarativeItem::type();

    extern int sipVH_QtDeclarative_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtDeclarative_20(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQDeclarativeItem::paint( ::QPainter*a0,const  ::QStyleOptionGraphicsItem*a1, ::QWidget*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_paint);

    if (!sipMeth)
    {
         ::QDeclarativeItem::paint(a0,a1,a2);
        return;
    }

    extern void sipVH_QtDeclarative_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QStyleOptionGraphicsItem*, ::QWidget*);

    sipVH_QtDeclarative_19(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPainterPath sipQDeclarativeItem::opaqueArea() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_opaqueArea);

    if (!sipMeth)
        return  ::QDeclarativeItem::opaqueArea();

    extern  ::QPainterPath sipVH_QtDeclarative_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtDeclarative_14(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQDeclarativeItem::isObscuredBy(const  ::QGraphicsItem*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_isObscuredBy);

    if (!sipMeth)
        return  ::QDeclarativeItem::isObscuredBy(a0);

    extern bool sipVH_QtDeclarative_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QGraphicsItem*);

    return sipVH_QtDeclarative_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDeclarativeItem::collidesWithPath(const  ::QPainterPath& a0, ::Qt::ItemSelectionMode a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_collidesWithPath);

    if (!sipMeth)
        return  ::QDeclarativeItem::collidesWithPath(a0,a1);

    extern bool sipVH_QtDeclarative_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPainterPath&, ::Qt::ItemSelectionMode);

    return sipVH_QtDeclarative_17(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQDeclarativeItem::collidesWithItem(const  ::QGraphicsItem*a0, ::Qt::ItemSelectionMode a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_collidesWithItem);

    if (!sipMeth)
        return  ::QDeclarativeItem::collidesWithItem(a0,a1);

    extern bool sipVH_QtDeclarative_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QGraphicsItem*, ::Qt::ItemSelectionMode);

    return sipVH_QtDeclarative_16(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQDeclarativeItem::contains(const  ::QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_contains);

    if (!sipMeth)
        return  ::QDeclarativeItem::contains(a0);

    extern bool sipVH_QtDeclarative_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPointF&);

    return sipVH_QtDeclarative_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QPainterPath sipQDeclarativeItem::shape() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_shape);

    if (!sipMeth)
        return  ::QDeclarativeItem::shape();

    extern  ::QPainterPath sipVH_QtDeclarative_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtDeclarative_14(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QRectF sipQDeclarativeItem::boundingRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_boundingRect);

    if (!sipMeth)
        return  ::QDeclarativeItem::boundingRect();

    extern  ::QRectF sipVH_QtDeclarative_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtDeclarative_13(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQDeclarativeItem::advance(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_advance);

    if (!sipMeth)
    {
         ::QDeclarativeItem::advance(a0);
        return;
    }

    extern void sipVH_QtDeclarative_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtDeclarative_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QDeclarativeItem_parentItem, "parentItem(self) -> QDeclarativeItem");

extern "C" {static PyObject *meth_QDeclarativeItem_parentItem(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_parentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
             ::QDeclarativeItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parentItem();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDeclarativeItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_parentItem, doc_QDeclarativeItem_parentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_setParentItem, "setParentItem(self, QDeclarativeItem)");

extern "C" {static PyObject *meth_QDeclarativeItem_setParentItem(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_setParentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDeclarativeItem* a0;
        sipWrapper *sipOwner = 0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJH", &sipSelf, sipType_QDeclarativeItem, &sipCpp, sipType_QDeclarativeItem, &a0, &sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setParentItem(a0);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_setParentItem, doc_QDeclarativeItem_setParentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_childrenRect, "childrenRect(self) -> QRectF");

extern "C" {static PyObject *meth_QDeclarativeItem_childrenRect(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_childrenRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
             ::QRectF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRectF(sipCpp->childrenRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_childrenRect, doc_QDeclarativeItem_childrenRect);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_clip, "clip(self) -> bool");

extern "C" {static PyObject *meth_QDeclarativeItem_clip(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_clip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->clip();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_clip, doc_QDeclarativeItem_clip);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_setClip, "setClip(self, bool)");

extern "C" {static PyObject *meth_QDeclarativeItem_setClip(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_setClip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDeclarativeItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setClip(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_setClip, doc_QDeclarativeItem_setClip);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_baselineOffset, "baselineOffset(self) -> float");

extern "C" {static PyObject *meth_QDeclarativeItem_baselineOffset(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_baselineOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->baselineOffset();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_baselineOffset, doc_QDeclarativeItem_baselineOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_setBaselineOffset, "setBaselineOffset(self, float)");

extern "C" {static PyObject *meth_QDeclarativeItem_setBaselineOffset(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_setBaselineOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QDeclarativeItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBaselineOffset(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_setBaselineOffset, doc_QDeclarativeItem_setBaselineOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_setWidth, "setWidth(self, float)");

extern "C" {static PyObject *meth_QDeclarativeItem_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QDeclarativeItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_setWidth, doc_QDeclarativeItem_setWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_implicitWidth, "implicitWidth(self) -> float");

extern "C" {static PyObject *meth_QDeclarativeItem_implicitWidth(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_implicitWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->implicitWidth();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_implicitWidth, doc_QDeclarativeItem_implicitWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_setHeight, "setHeight(self, float)");

extern "C" {static PyObject *meth_QDeclarativeItem_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QDeclarativeItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeight(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_setHeight, doc_QDeclarativeItem_setHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_implicitHeight, "implicitHeight(self) -> float");

extern "C" {static PyObject *meth_QDeclarativeItem_implicitHeight(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_implicitHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->implicitHeight();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_implicitHeight, doc_QDeclarativeItem_implicitHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_transformOrigin, "transformOrigin(self) -> QDeclarativeItem.TransformOrigin");

extern "C" {static PyObject *meth_QDeclarativeItem_transformOrigin(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_transformOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
             ::QDeclarativeItem::TransformOrigin sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->transformOrigin();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDeclarativeItem_TransformOrigin);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_transformOrigin, doc_QDeclarativeItem_transformOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_setTransformOrigin, "setTransformOrigin(self, QDeclarativeItem.TransformOrigin)");

extern "C" {static PyObject *meth_QDeclarativeItem_setTransformOrigin(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_setTransformOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDeclarativeItem::TransformOrigin a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDeclarativeItem, &sipCpp, sipType_QDeclarativeItem_TransformOrigin, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTransformOrigin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_setTransformOrigin, doc_QDeclarativeItem_setTransformOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_smooth, "smooth(self) -> bool");

extern "C" {static PyObject *meth_QDeclarativeItem_smooth(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_smooth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->smooth();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_smooth, doc_QDeclarativeItem_smooth);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_setSmooth, "setSmooth(self, bool)");

extern "C" {static PyObject *meth_QDeclarativeItem_setSmooth(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_setSmooth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDeclarativeItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSmooth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_setSmooth, doc_QDeclarativeItem_setSmooth);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_boundingRect, "boundingRect(self) -> QRectF");

extern "C" {static PyObject *meth_QDeclarativeItem_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
             ::QRectF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRectF((sipSelfWasArg ? sipCpp-> ::QDeclarativeItem::boundingRect() : sipCpp->boundingRect()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_boundingRect, doc_QDeclarativeItem_boundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_paint, "paint(self, QPainter, QStyleOptionGraphicsItem, QWidget)");

extern "C" {static PyObject *meth_QDeclarativeItem_paint(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_paint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const  ::QStyleOptionGraphicsItem* a1;
         ::QWidget* a2;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8J8", &sipSelf, sipType_QDeclarativeItem, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionGraphicsItem, &a1, sipType_QWidget, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDeclarativeItem::paint(a0,a1,a2) : sipCpp->paint(a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_paint, doc_QDeclarativeItem_paint);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_hasFocus, "hasFocus(self) -> bool");

extern "C" {static PyObject *meth_QDeclarativeItem_hasFocus(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_hasFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasFocus();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_hasFocus, doc_QDeclarativeItem_hasFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_keepMouseGrab, "keepMouseGrab(self) -> bool");

extern "C" {static PyObject *meth_QDeclarativeItem_keepMouseGrab(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_keepMouseGrab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->keepMouseGrab();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_keepMouseGrab, doc_QDeclarativeItem_keepMouseGrab);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_setKeepMouseGrab, "setKeepMouseGrab(self, bool)");

extern "C" {static PyObject *meth_QDeclarativeItem_setKeepMouseGrab(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_setKeepMouseGrab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDeclarativeItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setKeepMouseGrab(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_setKeepMouseGrab, doc_QDeclarativeItem_setKeepMouseGrab);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_isComponentComplete, "isComponentComplete(self) -> bool");

extern "C" {static PyObject *meth_QDeclarativeItem_isComponentComplete(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_isComponentComplete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isComponentComplete();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_isComponentComplete, doc_QDeclarativeItem_isComponentComplete);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_sceneEvent, "sceneEvent(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QDeclarativeItem_sceneEvent(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_sceneEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDeclarativeItem, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDeclarativeItem::sceneEvent(a0) : sipCpp->sceneEvent(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_sceneEvent, doc_QDeclarativeItem_sceneEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QDeclarativeItem_event(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDeclarativeItem, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDeclarativeItem::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_event, doc_QDeclarativeItem_event);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_itemChange, "itemChange(self, QGraphicsItem.GraphicsItemChange, Any) -> Any");

extern "C" {static PyObject *meth_QDeclarativeItem_itemChange(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_itemChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QGraphicsItem::GraphicsItemChange a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QDeclarativeItem, &sipCpp, sipType_QGraphicsItem_GraphicsItemChange, &a0, sipType_QVariant,&a1, &a1State))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QDeclarativeItem::itemChange(a0,*a1) : sipCpp->itemChange(a0,*a1)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_itemChange, doc_QDeclarativeItem_itemChange);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_setImplicitWidth, "setImplicitWidth(self, float)");

extern "C" {static PyObject *meth_QDeclarativeItem_setImplicitWidth(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_setImplicitWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pd", &sipSelf, sipType_QDeclarativeItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setImplicitWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_setImplicitWidth, doc_QDeclarativeItem_setImplicitWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_widthValid, "widthValid(self) -> bool");

extern "C" {static PyObject *meth_QDeclarativeItem_widthValid(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_widthValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->widthValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_widthValid, doc_QDeclarativeItem_widthValid);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_setImplicitHeight, "setImplicitHeight(self, float)");

extern "C" {static PyObject *meth_QDeclarativeItem_setImplicitHeight(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_setImplicitHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pd", &sipSelf, sipType_QDeclarativeItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setImplicitHeight(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_setImplicitHeight, doc_QDeclarativeItem_setImplicitHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_heightValid, "heightValid(self) -> bool");

extern "C" {static PyObject *meth_QDeclarativeItem_heightValid(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_heightValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->heightValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_heightValid, doc_QDeclarativeItem_heightValid);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_classBegin, "classBegin(self)");

extern "C" {static PyObject *meth_QDeclarativeItem_classBegin(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_classBegin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDeclarativeItem::classBegin() : sipCpp->classBegin());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_classBegin, doc_QDeclarativeItem_classBegin);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_componentComplete, "componentComplete(self)");

extern "C" {static PyObject *meth_QDeclarativeItem_componentComplete(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_componentComplete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QDeclarativeItem, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDeclarativeItem::componentComplete() : sipCpp->componentComplete());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_componentComplete, doc_QDeclarativeItem_componentComplete);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QDeclarativeItem_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDeclarativeItem, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDeclarativeItem::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_keyPressEvent, doc_QDeclarativeItem_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QDeclarativeItem_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDeclarativeItem, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDeclarativeItem::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_keyReleaseEvent, doc_QDeclarativeItem_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QDeclarativeItem_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDeclarativeItem, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDeclarativeItem::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_inputMethodEvent, doc_QDeclarativeItem_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> Any");

extern "C" {static PyObject *meth_QDeclarativeItem_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::InputMethodQuery a0;
        const  ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QDeclarativeItem, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QDeclarativeItem::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_inputMethodQuery, doc_QDeclarativeItem_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QDeclarativeItem_geometryChanged, "geometryChanged(self, QRectF, QRectF)");

extern "C" {static PyObject *meth_QDeclarativeItem_geometryChanged(PyObject *, PyObject *);}
static PyObject *meth_QDeclarativeItem_geometryChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRectF* a0;
        const  ::QRectF* a1;
         ::QDeclarativeItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QDeclarativeItem, &sipCpp, sipType_QRectF, &a0, sipType_QRectF, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDeclarativeItem::geometryChanged(*a0,*a1) : sipCpp->geometryChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDeclarativeItem, sipName_geometryChanged, doc_QDeclarativeItem_geometryChanged);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDeclarativeItem(void *, const sipTypeDef *);}
static void *cast_QDeclarativeItem(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDeclarativeItem *sipCpp = reinterpret_cast< ::QDeclarativeItem *>(sipCppV);

    if (targetType == sipType_QGraphicsObject)
        return static_cast< ::QGraphicsObject *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QGraphicsItem)
        return static_cast< ::QGraphicsItem *>(sipCpp);

    if (targetType == sipType_QDeclarativeParserStatus)
        return static_cast< ::QDeclarativeParserStatus *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDeclarativeItem(void *, int);}
static void release_QDeclarativeItem(void *sipCppV, int)
{
     ::QDeclarativeItem *sipCpp = reinterpret_cast< ::QDeclarativeItem *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDeclarativeItem(sipSimpleWrapper *);}
static void dealloc_QDeclarativeItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDeclarativeItem *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDeclarativeItem(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDeclarativeItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDeclarativeItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDeclarativeItem *sipCpp = 0;

    {
         ::QDeclarativeItem* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QDeclarativeItem, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDeclarativeItem(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDeclarativeItem[] = {{13, 2, 0}, {15, 255, 1}};


static PyMethodDef methods_QDeclarativeItem[] = {
    {SIP_MLNAME_CAST(sipName_baselineOffset), meth_QDeclarativeItem_baselineOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_baselineOffset)},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QDeclarativeItem_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_boundingRect)},
    {SIP_MLNAME_CAST(sipName_childrenRect), meth_QDeclarativeItem_childrenRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_childrenRect)},
    {SIP_MLNAME_CAST(sipName_classBegin), meth_QDeclarativeItem_classBegin, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_classBegin)},
    {SIP_MLNAME_CAST(sipName_clip), meth_QDeclarativeItem_clip, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_clip)},
    {SIP_MLNAME_CAST(sipName_componentComplete), meth_QDeclarativeItem_componentComplete, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_componentComplete)},
    {SIP_MLNAME_CAST(sipName_event), meth_QDeclarativeItem_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_event)},
    {SIP_MLNAME_CAST(sipName_geometryChanged), meth_QDeclarativeItem_geometryChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_geometryChanged)},
    {SIP_MLNAME_CAST(sipName_hasFocus), meth_QDeclarativeItem_hasFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_hasFocus)},
    {SIP_MLNAME_CAST(sipName_heightValid), meth_QDeclarativeItem_heightValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_heightValid)},
    {SIP_MLNAME_CAST(sipName_implicitHeight), meth_QDeclarativeItem_implicitHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_implicitHeight)},
    {SIP_MLNAME_CAST(sipName_implicitWidth), meth_QDeclarativeItem_implicitWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_implicitWidth)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QDeclarativeItem_inputMethodEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QDeclarativeItem_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_isComponentComplete), meth_QDeclarativeItem_isComponentComplete, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_isComponentComplete)},
    {SIP_MLNAME_CAST(sipName_itemChange), meth_QDeclarativeItem_itemChange, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_itemChange)},
    {SIP_MLNAME_CAST(sipName_keepMouseGrab), meth_QDeclarativeItem_keepMouseGrab, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_keepMouseGrab)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QDeclarativeItem_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QDeclarativeItem_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_paint), meth_QDeclarativeItem_paint, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_paint)},
    {SIP_MLNAME_CAST(sipName_parentItem), meth_QDeclarativeItem_parentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_parentItem)},
    {SIP_MLNAME_CAST(sipName_sceneEvent), meth_QDeclarativeItem_sceneEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_sceneEvent)},
    {SIP_MLNAME_CAST(sipName_setBaselineOffset), meth_QDeclarativeItem_setBaselineOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_setBaselineOffset)},
    {SIP_MLNAME_CAST(sipName_setClip), meth_QDeclarativeItem_setClip, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_setClip)},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QDeclarativeItem_setHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_setHeight)},
    {SIP_MLNAME_CAST(sipName_setImplicitHeight), meth_QDeclarativeItem_setImplicitHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_setImplicitHeight)},
    {SIP_MLNAME_CAST(sipName_setImplicitWidth), meth_QDeclarativeItem_setImplicitWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_setImplicitWidth)},
    {SIP_MLNAME_CAST(sipName_setKeepMouseGrab), meth_QDeclarativeItem_setKeepMouseGrab, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_setKeepMouseGrab)},
    {SIP_MLNAME_CAST(sipName_setParentItem), meth_QDeclarativeItem_setParentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_setParentItem)},
    {SIP_MLNAME_CAST(sipName_setSmooth), meth_QDeclarativeItem_setSmooth, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_setSmooth)},
    {SIP_MLNAME_CAST(sipName_setTransformOrigin), meth_QDeclarativeItem_setTransformOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_setTransformOrigin)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QDeclarativeItem_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_setWidth)},
    {SIP_MLNAME_CAST(sipName_smooth), meth_QDeclarativeItem_smooth, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_smooth)},
    {SIP_MLNAME_CAST(sipName_transformOrigin), meth_QDeclarativeItem_transformOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_transformOrigin)},
    {SIP_MLNAME_CAST(sipName_widthValid), meth_QDeclarativeItem_widthValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDeclarativeItem_widthValid)}
};

static sipEnumMemberDef enummembers_QDeclarativeItem[] = {
    {sipName_Bottom, static_cast<int>( ::QDeclarativeItem::Bottom), 11},
    {sipName_BottomLeft, static_cast<int>( ::QDeclarativeItem::BottomLeft), 11},
    {sipName_BottomRight, static_cast<int>( ::QDeclarativeItem::BottomRight), 11},
    {sipName_Center, static_cast<int>( ::QDeclarativeItem::Center), 11},
    {sipName_Left, static_cast<int>( ::QDeclarativeItem::Left), 11},
    {sipName_Right, static_cast<int>( ::QDeclarativeItem::Right), 11},
    {sipName_Top, static_cast<int>( ::QDeclarativeItem::Top), 11},
    {sipName_TopLeft, static_cast<int>( ::QDeclarativeItem::TopLeft), 11},
    {sipName_TopRight, static_cast<int>( ::QDeclarativeItem::TopRight), 11},
};

PyDoc_STRVAR(doc_QDeclarativeItem, "\1QDeclarativeItem(parent: QDeclarativeItem = None)");


static pyqt4ClassPluginDef plugin_QDeclarativeItem = {
    & ::QDeclarativeItem::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtDeclarative_QDeclarativeItem = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDeclarativeItem,
        {0},
        &plugin_QDeclarativeItem
    },
    {
        sipNameNr_QDeclarativeItem,
        {0, 0, 1},
        35, methods_QDeclarativeItem,
        9, enummembers_QDeclarativeItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDeclarativeItem,
    -1,
    -1,
    supers_QDeclarativeItem,
    0,
    init_type_QDeclarativeItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDeclarativeItem,
    0,
    0,
    0,
    release_QDeclarativeItem,
    cast_QDeclarativeItem,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtHelp.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtHelp/qhelpengine.sip"
#include <qhelpengine.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 52 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtHelp/qhelpsearchengine.sip"
#include <qhelpsearchengine.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtHelp/qhelpindexwidget.sip"
#include <qhelpindexwidget.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 73 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtHelp/qhelpcontentwidget.sip"
#include <qhelpcontentwidget.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtHelp/qhelpindexwidget.sip"
#include <qhelpindexwidget.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtHelp/qhelpcontentwidget.sip"
#include <qhelpcontentwidget.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 28 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 68 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 47 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpEngine.cpp"


class sipQHelpEngine : public  ::QHelpEngine
{
public:
    sipQHelpEngine(const  ::QString&, ::QObject*);
    virtual ~sipQHelpEngine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHelpEngine(const sipQHelpEngine &);
    sipQHelpEngine &operator = (const sipQHelpEngine &);

    char sipPyMethods[7];
};

sipQHelpEngine::sipQHelpEngine(const  ::QString& a0, ::QObject*a1):  ::QHelpEngine(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHelpEngine::~sipQHelpEngine()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQHelpEngine::metaObject() const
{
    return sip_QtHelp_qt_metaobject(sipPySelf,sipType_QHelpEngine);
}

int sipQHelpEngine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QHelpEngine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtHelp_qt_metacall(sipPySelf,sipType_QHelpEngine,_c,_id,_a);

    return _id;
}

void *sipQHelpEngine::qt_metacast(const char *_clname)
{
    return (sip_QtHelp_qt_metacast(sipPySelf, sipType_QHelpEngine, _clname)) ? this :  ::QHelpEngine::qt_metacast(_clname);
}

void sipQHelpEngine::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QHelpEngine::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtHelp_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtHelp_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHelpEngine::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QHelpEngine::connectNotify(a0);
        return;
    }

    extern void sipVH_QtHelp_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtHelp_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHelpEngine::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QHelpEngine::customEvent(a0);
        return;
    }

    extern void sipVH_QtHelp_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtHelp_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHelpEngine::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QHelpEngine::childEvent(a0);
        return;
    }

    extern void sipVH_QtHelp_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtHelp_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHelpEngine::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QHelpEngine::timerEvent(a0);
        return;
    }

    extern void sipVH_QtHelp_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtHelp_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQHelpEngine::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QHelpEngine::eventFilter(a0,a1);

    extern bool sipVH_QtHelp_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtHelp_23(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQHelpEngine::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QHelpEngine::event(a0);

    extern bool sipVH_QtHelp_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtHelp_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QHelpEngine_contentModel, "contentModel(self) -> QHelpContentModel");

extern "C" {static PyObject *meth_QHelpEngine_contentModel(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngine_contentModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHelpEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEngine, &sipCpp))
        {
             ::QHelpContentModel*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contentModel();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QHelpContentModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngine, sipName_contentModel, doc_QHelpEngine_contentModel);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngine_indexModel, "indexModel(self) -> QHelpIndexModel");

extern "C" {static PyObject *meth_QHelpEngine_indexModel(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngine_indexModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHelpEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEngine, &sipCpp))
        {
             ::QHelpIndexModel*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexModel();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QHelpIndexModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngine, sipName_indexModel, doc_QHelpEngine_indexModel);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngine_contentWidget, "contentWidget(self) -> QHelpContentWidget");

extern "C" {static PyObject *meth_QHelpEngine_contentWidget(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngine_contentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QHelpEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEngine, &sipCpp))
        {
             ::QHelpContentWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contentWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QHelpContentWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngine, sipName_contentWidget, doc_QHelpEngine_contentWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngine_indexWidget, "indexWidget(self) -> QHelpIndexWidget");

extern "C" {static PyObject *meth_QHelpEngine_indexWidget(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngine_indexWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QHelpEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEngine, &sipCpp))
        {
             ::QHelpIndexWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QHelpIndexWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngine, sipName_indexWidget, doc_QHelpEngine_indexWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngine_searchEngine, "searchEngine(self) -> QHelpSearchEngine");

extern "C" {static PyObject *meth_QHelpEngine_searchEngine(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngine_searchEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QHelpEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEngine, &sipCpp))
        {
             ::QHelpSearchEngine*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->searchEngine();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QHelpSearchEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngine, sipName_searchEngine, doc_QHelpEngine_searchEngine);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QHelpEngine(void *, const sipTypeDef *);}
static void *cast_QHelpEngine(void *sipCppV, const sipTypeDef *targetType)
{
     ::QHelpEngine *sipCpp = reinterpret_cast< ::QHelpEngine *>(sipCppV);

    if (targetType == sipType_QHelpEngineCore)
        return static_cast< ::QHelpEngineCore *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHelpEngine(void *, int);}
static void release_QHelpEngine(void *sipCppV, int)
{
     ::QHelpEngine *sipCpp = reinterpret_cast< ::QHelpEngine *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QHelpEngine(sipSimpleWrapper *);}
static void dealloc_QHelpEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQHelpEngine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHelpEngine(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QHelpEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHelpEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQHelpEngine *sipCpp = 0;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQHelpEngine(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHelpEngine[] = {{4, 255, 1}};


static PyMethodDef methods_QHelpEngine[] = {
    {SIP_MLNAME_CAST(sipName_contentModel), meth_QHelpEngine_contentModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngine_contentModel)},
    {SIP_MLNAME_CAST(sipName_contentWidget), meth_QHelpEngine_contentWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngine_contentWidget)},
    {SIP_MLNAME_CAST(sipName_indexModel), meth_QHelpEngine_indexModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngine_indexModel)},
    {SIP_MLNAME_CAST(sipName_indexWidget), meth_QHelpEngine_indexWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngine_indexWidget)},
    {SIP_MLNAME_CAST(sipName_searchEngine), meth_QHelpEngine_searchEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngine_searchEngine)}
};

PyDoc_STRVAR(doc_QHelpEngine, "\1QHelpEngine(str, parent: QObject = None)");


static pyqt4ClassPluginDef plugin_QHelpEngine = {
    & ::QHelpEngine::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtHelp_QHelpEngine = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QHelpEngine,
        {0},
        &plugin_QHelpEngine
    },
    {
        sipNameNr_QHelpEngine,
        {0, 0, 1},
        5, methods_QHelpEngine,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QHelpEngine,
    -1,
    -1,
    supers_QHelpEngine,
    0,
    init_type_QHelpEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHelpEngine,
    0,
    0,
    0,
    release_QHelpEngine,
    cast_QHelpEngine,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtHelp.h"

#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtHelp/qhelpcontentwidget.sip"
#include <qhelpcontentwidget.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"

#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtHelp/qhelpcontentwidget.sip"
#include <qhelpcontentwidget.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 139 "sip/QtCore/qhash.sip"
#include <qhash.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 139 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtHelp/sipQtHelpQHelpContentModel.cpp"


PyDoc_STRVAR(doc_QHelpContentModel_createContents, "createContents(self, str)");

extern "C" {static PyObject *meth_QHelpContentModel_createContents(PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_createContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QHelpContentModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpContentModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->createContents(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_createContents, doc_QHelpContentModel_createContents);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_contentItemAt, "contentItemAt(self, QModelIndex) -> QHelpContentItem");

extern "C" {static PyObject *meth_QHelpContentModel_contentItemAt(PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_contentItemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QModelIndex* a0;
        const  ::QHelpContentModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHelpContentModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QHelpContentItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contentItemAt(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QHelpContentItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_contentItemAt, doc_QHelpContentModel_contentItemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_data, "data(self, QModelIndex, int) -> Any");

extern "C" {static PyObject *meth_QHelpContentModel_data(PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        const  ::QHelpContentModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9i", &sipSelf, sipType_QHelpContentModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QHelpContentModel::data(*a0,a1) : sipCpp->data(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_data, doc_QHelpContentModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_index, "index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QHelpContentModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QHelpContentModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QHelpContentModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QHelpContentModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_index, doc_QHelpContentModel_index);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_parent, "parent(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QHelpContentModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QHelpContentModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHelpContentModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QHelpContentModel::parent(*a0) : sipCpp->parent(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_parent, doc_QHelpContentModel_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_rowCount, "rowCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QHelpContentModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QHelpContentModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QHelpContentModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QHelpContentModel::rowCount(*a0) : sipCpp->rowCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_rowCount, doc_QHelpContentModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_columnCount, "columnCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QHelpContentModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QHelpContentModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QHelpContentModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QHelpContentModel::columnCount(*a0) : sipCpp->columnCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_columnCount, doc_QHelpContentModel_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpContentModel_isCreatingContents, "isCreatingContents(self) -> bool");

extern "C" {static PyObject *meth_QHelpContentModel_isCreatingContents(PyObject *, PyObject *);}
static PyObject *meth_QHelpContentModel_isCreatingContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHelpContentModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpContentModel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCreatingContents();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpContentModel, sipName_isCreatingContents, doc_QHelpContentModel_isCreatingContents);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QHelpContentModel(void *, const sipTypeDef *);}
static void *cast_QHelpContentModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QHelpContentModel *sipCpp = reinterpret_cast< ::QHelpContentModel *>(sipCppV);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHelpContentModel(void *, int);}
static void release_QHelpContentModel(void *sipCppV, int)
{
     ::QHelpContentModel *sipCpp = reinterpret_cast< ::QHelpContentModel *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QHelpContentModel(sipSimpleWrapper *);}
static void dealloc_QHelpContentModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHelpContentModel(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHelpContentModel[] = {{0, 0, 1}};


static PyMethodDef methods_QHelpContentModel[] = {
    {SIP_MLNAME_CAST(sipName_columnCount), (PyCFunction)meth_QHelpContentModel_columnCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHelpContentModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_contentItemAt), meth_QHelpContentModel_contentItemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpContentModel_contentItemAt)},
    {SIP_MLNAME_CAST(sipName_createContents), meth_QHelpContentModel_createContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpContentModel_createContents)},
    {SIP_MLNAME_CAST(sipName_data), meth_QHelpContentModel_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpContentModel_data)},
    {SIP_MLNAME_CAST(sipName_index), (PyCFunction)meth_QHelpContentModel_index, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHelpContentModel_index)},
    {SIP_MLNAME_CAST(sipName_isCreatingContents), meth_QHelpContentModel_isCreatingContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpContentModel_isCreatingContents)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QHelpContentModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpContentModel_parent)},
    {SIP_MLNAME_CAST(sipName_rowCount), (PyCFunction)meth_QHelpContentModel_rowCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHelpContentModel_rowCount)}
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QHelpContentModel[] = {
    {"contentsCreated()", "\1contentsCreated(self)", 0, 0},
    {"contentsCreationStarted()", "\1contentsCreationStarted(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QHelpContentModel = {
    & ::QHelpContentModel::staticMetaObject,
    0,
    signals_QHelpContentModel
};


sipClassTypeDef sipTypeDef_QtHelp_QHelpContentModel = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QHelpContentModel,
        {0},
        &plugin_QHelpContentModel
    },
    {
        sipNameNr_QHelpContentModel,
        {0, 0, 1},
        8, methods_QHelpContentModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QHelpContentModel,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHelpContentModel,
    0,
    0,
    0,
    release_QHelpContentModel,
    cast_QHelpContentModel,
    0,
    0,
    0,
    0,
    0,
    0
};

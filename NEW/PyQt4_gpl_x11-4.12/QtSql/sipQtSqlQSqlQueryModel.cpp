/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtSql/qsqlquerymodel.sip"
#include <qsqlquerymodel.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtSql/qsqlerror.sip"
#include <qsqlerror.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtSql/qsqlquery.sip"
#include <qsqlquery.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 37 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtSql/qsqldatabase.sip"
#include <qsqldatabase.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 139 "sip/QtCore/qhash.sip"
#include <qhash.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 139 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 114 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 117 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtSql/sipQtSqlQSqlQueryModel.cpp"


class sipQSqlQueryModel : public  ::QSqlQueryModel
{
public:
    sipQSqlQueryModel( ::QObject*);
    virtual ~sipQSqlQueryModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void queryChange();
    void clear();
    void revert();
    bool submit();
     ::QSize span(const  ::QModelIndex&) const;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const;
     ::QModelIndex buddy(const  ::QModelIndex&) const;
    void sort(int, ::Qt::SortOrder);
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const;
    bool canFetchMore(const  ::QModelIndex&) const;
    void fetchMore(const  ::QModelIndex&);
    bool removeColumns(int,int,const  ::QModelIndex&);
    bool removeRows(int,int,const  ::QModelIndex&);
    bool insertColumns(int,int,const  ::QModelIndex&);
    bool insertRows(int,int,const  ::QModelIndex&);
     ::Qt::DropActions supportedDropActions() const;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);
     ::QMimeData* mimeData(const  ::QModelIndexList&) const;
     ::QStringList mimeTypes() const;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&);
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int);
     ::QVariant headerData(int, ::Qt::Orientation,int) const;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int);
     ::QVariant data(const  ::QModelIndex&,int) const;
    int columnCount(const  ::QModelIndex&) const;
    int rowCount(const  ::QModelIndex&) const;
     ::QModelIndex index(int,int,const  ::QModelIndex&) const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSqlQueryModel(const sipQSqlQueryModel &);
    sipQSqlQueryModel &operator = (const sipQSqlQueryModel &);

    char sipPyMethods[35];
};

sipQSqlQueryModel::sipQSqlQueryModel( ::QObject*a0):  ::QSqlQueryModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSqlQueryModel::~sipQSqlQueryModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSqlQueryModel::metaObject() const
{
    return sip_QtSql_qt_metaobject(sipPySelf,sipType_QSqlQueryModel);
}

int sipQSqlQueryModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSqlQueryModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtSql_qt_metacall(sipPySelf,sipType_QSqlQueryModel,_c,_id,_a);

    return _id;
}

void *sipQSqlQueryModel::qt_metacast(const char *_clname)
{
    return (sip_QtSql_qt_metacast(sipPySelf, sipType_QSqlQueryModel, _clname)) ? this :  ::QSqlQueryModel::qt_metacast(_clname);
}

void sipQSqlQueryModel::queryChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_queryChange);

    if (!sipMeth)
    {
         ::QSqlQueryModel::queryChange();
        return;
    }

    extern void sipVH_QtSql_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtSql_16(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQSqlQueryModel::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_clear);

    if (!sipMeth)
    {
         ::QSqlQueryModel::clear();
        return;
    }

    extern void sipVH_QtSql_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtSql_16(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQSqlQueryModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
         ::QSqlQueryModel::revert();
        return;
    }

    extern void sipVH_QtSql_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtSql_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSqlQueryModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return  ::QSqlQueryModel::submit();

    extern bool sipVH_QtSql_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_7(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQSqlQueryModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return  ::QSqlQueryModel::span(a0);

    extern  ::QSize sipVH_QtSql_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtSql_40(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQSqlQueryModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return  ::QSqlQueryModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtSql_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtSql_39(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QModelIndex sipQSqlQueryModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return  ::QSqlQueryModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtSql_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtSql_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlQueryModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
         ::QSqlQueryModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtSql_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtSql_38(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

 ::Qt::ItemFlags sipQSqlQueryModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return  ::QSqlQueryModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtSql_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtSql_37(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSqlQueryModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return  ::QSqlQueryModel::canFetchMore(a0);

    extern bool sipVH_QtSql_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtSql_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlQueryModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
         ::QSqlQueryModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtSql_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtSql_36(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSqlQueryModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return  ::QSqlQueryModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtSql_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtSql_35(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSqlQueryModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return  ::QSqlQueryModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtSql_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtSql_35(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSqlQueryModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return  ::QSqlQueryModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtSql_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtSql_35(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSqlQueryModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return  ::QSqlQueryModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtSql_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtSql_35(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::Qt::DropActions sipQSqlQueryModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return  ::QSqlQueryModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtSql_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_34(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSqlQueryModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return  ::QSqlQueryModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtSql_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtSql_33(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QMimeData* sipQSqlQueryModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return  ::QSqlQueryModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtSql_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtSql_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QStringList sipQSqlQueryModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return  ::QSqlQueryModel::mimeTypes();

    extern  ::QStringList sipVH_QtSql_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_31(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSqlQueryModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return  ::QSqlQueryModel::setItemData(a0,a1);

    extern bool sipVH_QtSql_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtSql_30(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QMap<int, ::QVariant> sipQSqlQueryModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return  ::QSqlQueryModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtSql_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtSql_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSqlQueryModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return  ::QSqlQueryModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtSql_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtSql_28(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QVariant sipQSqlQueryModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return  ::QSqlQueryModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtSql_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtSql_27(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSqlQueryModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return  ::QSqlQueryModel::setData(a0,a1,a2);

    extern bool sipVH_QtSql_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtSql_26(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQSqlQueryModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return  ::QSqlQueryModel::data(a0,a1);

    extern  ::QVariant sipVH_QtSql_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtSql_25(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

int sipQSqlQueryModel::columnCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_columnCount);

    if (!sipMeth)
        return  ::QSqlQueryModel::columnCount(a0);

    extern int sipVH_QtSql_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtSql_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQSqlQueryModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_rowCount);

    if (!sipMeth)
        return  ::QSqlQueryModel::rowCount(a0);

    extern int sipVH_QtSql_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtSql_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQSqlQueryModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return  ::QSqlQueryModel::index(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtSql_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtSql_21(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSqlQueryModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QSqlQueryModel::event(a0);

    extern bool sipVH_QtSql_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtSql_6(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSqlQueryModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSqlQueryModel::eventFilter(a0,a1);

    extern bool sipVH_QtSql_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtSql_5(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQSqlQueryModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSqlQueryModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtSql_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtSql_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlQueryModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSqlQueryModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtSql_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtSql_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlQueryModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSqlQueryModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtSql_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtSql_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlQueryModel::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSqlQueryModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtSql_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtSql_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSqlQueryModel::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSqlQueryModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtSql_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtSql_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSqlQueryModel_rowCount, "rowCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QSqlQueryModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QSqlQueryModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QSqlQueryModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlQueryModel::rowCount(*a0) : sipCpp->rowCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_rowCount, doc_QSqlQueryModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_columnCount, "columnCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QSqlQueryModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QSqlQueryModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QSqlQueryModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlQueryModel::columnCount(*a0) : sipCpp->columnCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_columnCount, doc_QSqlQueryModel_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_record, "record(self, int) -> QSqlRecord\n"
    "record(self) -> QSqlRecord");

extern "C" {static PyObject *meth_QSqlQueryModel_record(PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_record(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QSqlQueryModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlQueryModel, &sipCpp, &a0))
        {
             ::QSqlRecord*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSqlRecord(sipCpp->record(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlRecord,NULL);
        }
    }

    {
        const  ::QSqlQueryModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQueryModel, &sipCpp))
        {
             ::QSqlRecord*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSqlRecord(sipCpp->record());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_record, doc_QSqlQueryModel_record);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_data, "data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QSqlQueryModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const  ::QSqlQueryModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QSqlQueryModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QSqlQueryModel::data(*a0,a1) : sipCpp->data(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_data, doc_QSqlQueryModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_headerData, "headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QSqlQueryModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        const  ::QSqlQueryModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiE|i", &sipSelf, sipType_QSqlQueryModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QSqlQueryModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_headerData, doc_QSqlQueryModel_headerData);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_setHeaderData, "setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QSqlQueryModel_setHeaderData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_setHeaderData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = Qt::EditRole;
         ::QSqlQueryModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiEJ1|i", &sipSelf, sipType_QSqlQueryModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, sipType_QVariant,&a2, &a2State, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlQueryModel::setHeaderData(a0,a1,*a2,a3) : sipCpp->setHeaderData(a0,a1,*a2,a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_setHeaderData, doc_QSqlQueryModel_setHeaderData);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_insertColumns, "insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSqlQueryModel_insertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QSqlQueryModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QSqlQueryModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlQueryModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_insertColumns, doc_QSqlQueryModel_insertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_removeColumns, "removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSqlQueryModel_removeColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QSqlQueryModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QSqlQueryModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlQueryModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_removeColumns, doc_QSqlQueryModel_removeColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_setQuery, "setQuery(self, QSqlQuery)\n"
    "setQuery(self, str, db: QSqlDatabase = QSqlDatabase())");

extern "C" {static PyObject *meth_QSqlQueryModel_setQuery(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_setQuery(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSqlQuery* a0;
         ::QSqlQueryModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlQueryModel, &sipCpp, sipType_QSqlQuery, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQuery(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QSqlDatabase& a1def = QSqlDatabase();
        const  ::QSqlDatabase* a1 = &a1def;
         ::QSqlQueryModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_db,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QSqlQueryModel, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSqlDatabase, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQuery(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_setQuery, doc_QSqlQueryModel_setQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_query, "query(self) -> QSqlQuery");

extern "C" {static PyObject *meth_QSqlQueryModel_query(PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_query(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSqlQueryModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQueryModel, &sipCpp))
        {
             ::QSqlQuery*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSqlQuery(sipCpp->query());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlQuery,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_query, doc_QSqlQueryModel_query);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_clear, "clear(self)");

extern "C" {static PyObject *meth_QSqlQueryModel_clear(PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSqlQueryModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQueryModel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QSqlQueryModel::clear() : sipCpp->clear());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_clear, doc_QSqlQueryModel_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_lastError, "lastError(self) -> QSqlError");

extern "C" {static PyObject *meth_QSqlQueryModel_lastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSqlQueryModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQueryModel, &sipCpp))
        {
             ::QSqlError*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSqlError(sipCpp->lastError());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_lastError, doc_QSqlQueryModel_lastError);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_fetchMore, "fetchMore(self, parent: QModelIndex = QModelIndex())");

extern "C" {static PyObject *meth_QSqlQueryModel_fetchMore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_fetchMore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
         ::QSqlQueryModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QSqlQueryModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QSqlQueryModel::fetchMore(*a0) : sipCpp->fetchMore(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_fetchMore, doc_QSqlQueryModel_fetchMore);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_canFetchMore, "canFetchMore(self, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSqlQueryModel_canFetchMore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_canFetchMore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QSqlQueryModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QSqlQueryModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSqlQueryModel::canFetchMore(*a0) : sipCpp->canFetchMore(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_canFetchMore, doc_QSqlQueryModel_canFetchMore);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_queryChange, "queryChange(self)");

extern "C" {static PyObject *meth_QSqlQueryModel_queryChange(PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_queryChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSqlQueryModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QSqlQueryModel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QSqlQueryModel::queryChange() : sipCpp->queryChange());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_queryChange, doc_QSqlQueryModel_queryChange);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_indexInQuery, "indexInQuery(self, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QSqlQueryModel_indexInQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_indexInQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QModelIndex* a0;
        const  ::QSqlQueryModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QSqlQueryModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QModelIndex(sipCpp->indexInQuery(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_indexInQuery, doc_QSqlQueryModel_indexInQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQueryModel_setLastError, "setLastError(self, QSqlError)");

extern "C" {static PyObject *meth_QSqlQueryModel_setLastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlQueryModel_setLastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSqlError* a0;
         ::QSqlQueryModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QSqlQueryModel, &sipCpp, sipType_QSqlError, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLastError(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQueryModel, sipName_setLastError, doc_QSqlQueryModel_setLastError);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSqlQueryModel(void *, const sipTypeDef *);}
static void *cast_QSqlQueryModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSqlQueryModel *sipCpp = reinterpret_cast< ::QSqlQueryModel *>(sipCppV);

    if (targetType == sipType_QAbstractTableModel)
        return static_cast< ::QAbstractTableModel *>(sipCpp);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlQueryModel(void *, int);}
static void release_QSqlQueryModel(void *sipCppV, int)
{
     ::QSqlQueryModel *sipCpp = reinterpret_cast< ::QSqlQueryModel *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSqlQueryModel(sipSimpleWrapper *);}
static void dealloc_QSqlQueryModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSqlQueryModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSqlQueryModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSqlQueryModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSqlQueryModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSqlQueryModel *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSqlQueryModel(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSqlQueryModel[] = {{1, 0, 1}};


static PyMethodDef methods_QSqlQueryModel[] = {
    {SIP_MLNAME_CAST(sipName_canFetchMore), (PyCFunction)meth_QSqlQueryModel_canFetchMore, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQueryModel_canFetchMore)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QSqlQueryModel_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQueryModel_clear)},
    {SIP_MLNAME_CAST(sipName_columnCount), (PyCFunction)meth_QSqlQueryModel_columnCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQueryModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_data), (PyCFunction)meth_QSqlQueryModel_data, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQueryModel_data)},
    {SIP_MLNAME_CAST(sipName_fetchMore), (PyCFunction)meth_QSqlQueryModel_fetchMore, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQueryModel_fetchMore)},
    {SIP_MLNAME_CAST(sipName_headerData), (PyCFunction)meth_QSqlQueryModel_headerData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQueryModel_headerData)},
    {SIP_MLNAME_CAST(sipName_indexInQuery), meth_QSqlQueryModel_indexInQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQueryModel_indexInQuery)},
    {SIP_MLNAME_CAST(sipName_insertColumns), (PyCFunction)meth_QSqlQueryModel_insertColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQueryModel_insertColumns)},
    {SIP_MLNAME_CAST(sipName_lastError), meth_QSqlQueryModel_lastError, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQueryModel_lastError)},
    {SIP_MLNAME_CAST(sipName_query), meth_QSqlQueryModel_query, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQueryModel_query)},
    {SIP_MLNAME_CAST(sipName_queryChange), meth_QSqlQueryModel_queryChange, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQueryModel_queryChange)},
    {SIP_MLNAME_CAST(sipName_record), meth_QSqlQueryModel_record, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQueryModel_record)},
    {SIP_MLNAME_CAST(sipName_removeColumns), (PyCFunction)meth_QSqlQueryModel_removeColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQueryModel_removeColumns)},
    {SIP_MLNAME_CAST(sipName_rowCount), (PyCFunction)meth_QSqlQueryModel_rowCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQueryModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setHeaderData), (PyCFunction)meth_QSqlQueryModel_setHeaderData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQueryModel_setHeaderData)},
    {SIP_MLNAME_CAST(sipName_setLastError), meth_QSqlQueryModel_setLastError, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQueryModel_setLastError)},
    {SIP_MLNAME_CAST(sipName_setQuery), (PyCFunction)meth_QSqlQueryModel_setQuery, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQueryModel_setQuery)}
};

PyDoc_STRVAR(doc_QSqlQueryModel, "\1QSqlQueryModel(parent: QObject = None)");


static pyqt4ClassPluginDef plugin_QSqlQueryModel = {
    & ::QSqlQueryModel::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtSql_QSqlQueryModel = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSqlQueryModel,
        {0},
        &plugin_QSqlQueryModel
    },
    {
        sipNameNr_QSqlQueryModel,
        {0, 0, 1},
        17, methods_QSqlQueryModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSqlQueryModel,
    -1,
    -1,
    supers_QSqlQueryModel,
    0,
    init_type_QSqlQueryModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSqlQueryModel,
    0,
    0,
    0,
    release_QSqlQueryModel,
    cast_QSqlQueryModel,
    0,
    0,
    0,
    0,
    0,
    0
};

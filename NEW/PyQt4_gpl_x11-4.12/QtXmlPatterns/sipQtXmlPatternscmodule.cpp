/*
 * Module code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXmlPatterns.h"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 32 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 35 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 38 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 41 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 44 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXmlPatterns/qsourcelocation.sip"
#include <qsourcelocation.h>
#line 47 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXmlPatterns/qabstractxmlnodemodel.sip"
#include <qabstractxmlnodemodel.h>
#line 50 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXmlPatterns/qxmlname.sip"
#include <qxmlname.h>
#line 53 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 56 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 28 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 59 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 28 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 62 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXmlPatterns/qabstractxmlnodemodel.sip"
#include <qabstractxmlnodemodel.h>
#line 65 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 789 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 68 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 127 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXmlPatterns/qabstractxmlnodemodel.sip"
#include <qabstractxmlnodemodel.h>
#line 71 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXmlPatterns/qxmlnamepool.sip"
#include <qxmlnamepool.h>
#line 74 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXmlPatterns/qxmlquery.sip"
#include <qxmlquery.h>
#line 77 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"

/* Define the strings used by this module. */
const char sipStrings_QtXmlPatterns[] = {
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'X', 'm', 'l', 'N', 'o', 'd', 'e', 'M', 'o', 'd', 'e', 'l', ':', ':', 'S', 'i', 'm', 'p', 'l', 'e', 'A', 'x', 'i', 's', 0,
    'Q', 'X', 'm', 'l', 'N', 'o', 'd', 'e', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'd', 'e', 'x', ':', ':', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'O', 'r', 'd', 'e', 'r', 0,
    'Q', 'X', 'm', 'l', 'N', 'o', 'd', 'e', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'd', 'e', 'x', ':', ':', 'N', 'o', 'd', 'e', 'K', 'i', 'n', 'd', 0,
    'P', 'y', 'Q', 't', '4', '.', 'Q', 't', 'C', 'o', 'r', 'e', '.', 'p', 'y', 'q', 't', 'W', 'r', 'a', 'p', 'p', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'X', 'm', 'l', 'N', 'o', 'd', 'e', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'd', 'e', 'x', '>', 0,
    'Q', 'X', 'm', 'l', 'Q', 'u', 'e', 'r', 'y', ':', ':', 'Q', 'u', 'e', 'r', 'y', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    's', 'e', 't', 'N', 'e', 't', 'w', 'o', 'r', 'k', 'A', 'c', 'c', 'e', 's', 's', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'M', 'e', 's', 's', 'a', 'g', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    's', 'e', 't', 'I', 'n', 'i', 't', 'i', 'a', 'l', 'T', 'e', 'm', 'p', 'l', 'a', 't', 'e', 'N', 'a', 'm', 'e', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 'I', 'n', 's', 't', 'r', 'u', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'X', 'm', 'l', 'N', 'o', 'd', 'e', 'M', 'o', 'd', 'e', 'l', 0,
    'P', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 'I', 'n', 's', 't', 'r', 'u', 'c', 't', 'i', 'o', 'n', 0,
    'n', 'e', 't', 'w', 'o', 'r', 'k', 'A', 'c', 'c', 'e', 's', 's', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 0,
    'e', 'v', 'a', 'l', 'u', 'a', 't', 'e', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 'L', 'i', 's', 't', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'X', 'm', 'l', 'R', 'e', 'c', 'e', 'i', 'v', 'e', 'r', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'U', 'r', 'i', 'R', 'e', 's', 'o', 'l', 'v', 'e', 'r', 0,
    'Q', 'X', 'm', 'l', 'S', 'c', 'h', 'e', 'm', 'a', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'T', 'e', 'm', 'p', 'l', 'a', 't', 'e', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'I', 'n', 'd', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'D', 'e', 'p', 't', 'h', 0,
    'Q', 'S', 'i', 'm', 'p', 'l', 'e', 'X', 'm', 'l', 'N', 'o', 'd', 'e', 'M', 'o', 'd', 'e', 'l', 0,
    'P', 'y', 'Q', 't', '4', '.', 'Q', 't', 'X', 'm', 'l', 'P', 'a', 't', 't', 'e', 'r', 'n', 's', 0,
    'n', 'e', 'x', 't', 'F', 'r', 'o', 'm', 'S', 'i', 'm', 'p', 'l', 'e', 'A', 'x', 'i', 's', 0,
    'Q', 'X', 'm', 'l', 'N', 'o', 'd', 'e', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'X', 'm', 'l', 'N', 'a', 'm', 'e', '>', 0,
    's', 'e', 't', 'M', 'e', 's', 's', 'a', 'g', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'n', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'B', 'i', 'n', 'd', 'i', 'n', 'g', 's', 0,
    's', 'i', 'p', '.', 's', 'i', 'm', 'p', 'l', 'e', 'w', 'r', 'a', 'p', 'p', 'e', 'r', 0,
    'e', 'v', 'a', 'l', 'u', 'a', 't', 'e', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'i', 'n', 'd', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'D', 'e', 'p', 't', 'h', 0,
    'n', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'B', 'i', 'n', 'd', 'i', 'n', 'g', 0,
    't', 'o', 'N', 'o', 'd', 'e', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    'Q', 'X', 'm', 'l', 'R', 'e', 's', 'u', 'l', 't', 'I', 't', 'e', 'm', 's', 0,
    'Q', 'S', 'o', 'u', 'r', 'c', 'e', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    's', 't', 'a', 'r', 't', 'O', 'f', 'S', 'e', 'q', 'u', 'e', 'n', 'c', 'e', 0,
    'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'S', 'i', 'b', 'l', 'i', 'n', 'g', 0,
    'i', 'n', 't', 'e', 'r', 'n', 'a', 'l', 'P', 'o', 'i', 'n', 't', 'e', 'r', 0,
    's', 'e', 't', 'U', 'r', 'i', 'R', 'e', 's', 'o', 'l', 'v', 'e', 'r', 0,
    'm', 'e', 's', 's', 'a', 'g', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'Q', 'X', 'm', 'l', 'S', 'e', 'r', 'i', 'a', 'l', 'i', 'z', 'e', 'r', 0,
    'a', 'd', 'd', 'i', 't', 'i', 'o', 'n', 'a', 'l', 'D', 'a', 't', 'a', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'q', 'u', 'e', 'r', 'y', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'f', 'r', 'o', 'm', 'C', 'l', 'a', 'r', 'k', 'N', 'a', 'm', 'e', 0,
    'Q', 'X', 'm', 'l', 'F', 'o', 'r', 'm', 'a', 't', 't', 'e', 'r', 0,
    'e', 'n', 'd', 'O', 'f', 'S', 'e', 'q', 'u', 'e', 'n', 'c', 'e', 0,
    's', 't', 'a', 'r', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    't', 'o', 'A', 't', 'o', 'm', 'i', 'c', 'V', 'a', 'l', 'u', 'e', 0,
    'i', 's', 'A', 't', 'o', 'm', 'i', 'c', 'V', 'a', 'l', 'u', 'e', 0,
    'h', 'a', 'n', 'd', 'l', 'e', 'M', 'e', 's', 's', 'a', 'g', 'e', 0,
    'b', 'i', 'n', 'd', 'V', 'a', 'r', 'i', 'a', 'b', 'l', 'e', 0,
    'Q', 'X', 'm', 'l', 'N', 'a', 'm', 'e', 'P', 'o', 'o', 'l', 0,
    'o', 'u', 't', 'p', 'u', 't', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    's', 't', 'a', 'r', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'n', 'o', 'd', 'e', 's', 'B', 'y', 'I', 'd', 'r', 'e', 'f', 0,
    'c', 'o', 'm', 'p', 'a', 'r', 'e', 'O', 'r', 'd', 'e', 'r', 0,
    'n', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'U', 'r', 'i', 0,
    'u', 'r', 'i', 'R', 'e', 's', 'o', 'l', 'v', 'e', 'r', 0,
    't', 'o', 'C', 'l', 'a', 'r', 'k', 'N', 'a', 'm', 'e', 0,
    'e', 'n', 'd', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'a', 't', 'o', 'm', 'i', 'c', 'V', 'a', 'l', 'u', 'e', 0,
    'e', 'l', 'e', 'm', 'e', 'n', 't', 'B', 'y', 'I', 'd', 0,
    's', 't', 'r', 'i', 'n', 'g', 'V', 'a', 'l', 'u', 'e', 0,
    'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'U', 'r', 'i', 0,
    'N', 'e', 'x', 't', 'S', 'i', 'b', 'l', 'i', 'n', 'g', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'I', 'n', 'd', 'e', 'x', 0,
    'Q', 'X', 'm', 'l', 'S', 'c', 'h', 'e', 'm', 'a', 0,
    'e', 'v', 'a', 'l', 'u', 'a', 't', 'e', 'T', 'o', 0,
    'c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's', 0,
    'e', 'n', 'd', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    't', 'y', 'p', 'e', 'd', 'V', 'a', 'l', 'u', 'e', 0,
    'F', 'i', 'r', 's', 't', 'C', 'h', 'i', 'l', 'd', 0,
    'i', 'd', 'e', 'n', 't', 'i', 'f', 'i', 'e', 'r', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'f', 'i', 'e', 'l', 'd', 'W', 'i', 'd', 't', 'h', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'S', 'c', 'h', 'e', 'm', 'a', 0,
    'Q', 'X', 'm', 'l', 'Q', 'u', 'e', 'r', 'y', 0,
    'l', 'o', 'c', 'a', 'l', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 0,
    'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'p', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'v', 'a', 'l', 'i', 'd', 'a', 't', 'e', 0,
    's', 'e', 't', 'F', 'o', 'c', 'u', 's', 0,
    's', 'e', 't', 'Q', 'u', 'e', 'r', 'y', 0,
    'X', 'Q', 'u', 'e', 'r', 'y', '1', '0', 0,
    'i', 's', 'N', 'C', 'N', 'a', 'm', 'e', 0,
    'Q', 'X', 'm', 'l', 'N', 'a', 'm', 'e', 0,
    'n', 'a', 'm', 'e', 'P', 'o', 'o', 'l', 0,
    'Q', 'X', 'm', 'l', 'I', 't', 'e', 'm', 0,
    'P', 'r', 'e', 'c', 'e', 'd', 'e', 's', 0,
    'h', 'a', 's', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 't', 'C', 'o', 'd', 'e', 'c', 0,
    'b', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'f', 'i', 'l', 'l', 'C', 'h', 'a', 'r', 0,
    '_', '_', 'h', 'a', 's', 'h', '_', '_', 0,
    'b', 'a', 's', 'e', 'U', 'r', 'i', 0,
    'F', 'o', 'l', 'l', 'o', 'w', 's', 0,
    'C', 'o', 'm', 'm', 'e', 'n', 't', 0,
    'c', 'o', 'm', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'L', 'i', 'n', 'e', 0,
    'r', 'e', 's', 'o', 'l', 'v', 'e', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 0,
    'f', 'i', 'l', 't', 'e', 'r', 's', 0,
    'm', 'e', 's', 's', 'a', 'g', 'e', 0,
    'Q', 'S', 't', 'r', 'i', 'n', 'g', 0,
    's', 'c', 'h', 'e', 'm', 'a', 0,
    'X', 'S', 'L', 'T', '2', '0', 0,
    's', 'e', 't', 'U', 'r', 'i', 0,
    'i', 's', 'N', 'o', 'd', 'e', 0,
    'P', 'a', 'r', 'e', 'n', 't', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 0,
    'v', 'a', 'l', 'u', 'e', '9', 0,
    'v', 'a', 'l', 'u', 'e', '8', 0,
    'v', 'a', 'l', 'u', 'e', '7', 0,
    'v', 'a', 'l', 'u', 'e', '6', 0,
    'v', 'a', 'l', 'u', 'e', '5', 0,
    'v', 'a', 'l', 'u', 'e', '4', 0,
    'v', 'a', 'l', 'u', 'e', '3', 0,
    'v', 'a', 'l', 'u', 'e', '2', 0,
    'v', 'a', 'l', 'u', 'e', '1', 0,
    'v', 'a', 'l', 'u', 'e', '0', 0,
    's', 'y', 'm', 'b', 'o', 'l', 0,
    's', 'u', 'f', 'f', 'i', 'x', 0,
    'p', 'r', 'e', 'f', 'i', 'x', 0,
    'f', 'o', 'r', 'm', 'a', 't', 0,
    'i', 's', 'N', 'u', 'l', 'l', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 0,
    'p', 'a', 'r', 'e', 'n', 't', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
    'c', 'o', 'd', 'e', 'c', 0,
    'm', 'o', 'd', 'e', 'l', 0,
    'f', 'l', 'a', 'g', 's', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'm', 's', 'e', 'c', 's', 0,
    'p', 'o', 'o', 'l', 0,
    'k', 'i', 'n', 'd', 0,
    'p', 'o', 'r', 't', 0,
    'l', 'i', 'n', 'e', 0,
    'l', 'o', 'a', 'd', 0,
    'm', 'o', 'd', 'e', 0,
    'T', 'e', 'x', 't', 0,
    'r', 'o', 'o', 't', 0,
    'n', 'a', 'm', 'e', 0,
    'b', 'a', 's', 'e', 0,
    'f', 'r', 'o', 'm', 0,
    's', 'o', 'r', 't', 0,
    'n', 'e', 'x', 't', 0,
    'd', 'a', 't', 'a', 0,
    't', 'y', 'p', 'e', 0,
    'u', 'r', 'i', 0,
    'e', 'n', 'd', 0,
    'I', 's', 0,
    't', 'o', 0,
};

void sipVH_QtXmlPatterns_26(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QVariant& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QVariant(a0), sipType_QVariant, NULL);
}

void sipVH_QtXmlPatterns_25(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlName& a0,const  ::QString& a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "NN", new  ::QXmlName(a0), sipType_QXmlName, NULL, new  ::QString(a1), sipType_QString, NULL);
}

void sipVH_QtXmlPatterns_24(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QStringRef& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QStringRef(a0), sipType_QStringRef, NULL);
}

void sipVH_QtXmlPatterns_23(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QString& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QString(a0), sipType_QString, NULL);
}

void sipVH_QtXmlPatterns_22(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlName& a0,const  ::QStringRef& a1)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "NN", new  ::QXmlName(a0), sipType_QXmlName, NULL, new  ::QStringRef(a1), sipType_QStringRef, NULL);
}

void sipVH_QtXmlPatterns_21(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "");
}

void sipVH_QtXmlPatterns_20(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlName& a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "N", new  ::QXmlName(a0), sipType_QXmlName, NULL);
}

QVector< ::QXmlNodeModelIndex> sipVH_QtXmlPatterns_19(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlNodeModelIndex& a0)
{
    QVector< ::QXmlNodeModelIndex> sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N", new  ::QXmlNodeModelIndex(a0), sipType_QXmlNodeModelIndex, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVector_0100QXmlNodeModelIndex, &sipRes);

    return sipRes;
}

 ::QXmlNodeModelIndex sipVH_QtXmlPatterns_18(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QAbstractXmlNodeModel::SimpleAxis a0,const  ::QXmlNodeModelIndex& a1)
{
     ::QXmlNodeModelIndex sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "FN", a0, sipType_QAbstractXmlNodeModel_SimpleAxis, new  ::QXmlNodeModelIndex(a1), sipType_QXmlNodeModelIndex, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QXmlNodeModelIndex, &sipRes);

    return sipRes;
}

QVector< ::QXmlNodeModelIndex> sipVH_QtXmlPatterns_17(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlName& a0)
{
    QVector< ::QXmlNodeModelIndex> sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N", new  ::QXmlName(a0), sipType_QXmlName, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVector_0100QXmlNodeModelIndex, &sipRes);

    return sipRes;
}

 ::QXmlNodeModelIndex sipVH_QtXmlPatterns_16(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlName& a0)
{
     ::QXmlNodeModelIndex sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N", new  ::QXmlName(a0), sipType_QXmlName, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QXmlNodeModelIndex, &sipRes);

    return sipRes;
}

QVector< ::QXmlName> sipVH_QtXmlPatterns_15(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlNodeModelIndex& a0)
{
    QVector< ::QXmlName> sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N", new  ::QXmlNodeModelIndex(a0), sipType_QXmlNodeModelIndex, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVector_0100QXmlName, &sipRes);

    return sipRes;
}

 ::QVariant sipVH_QtXmlPatterns_14(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlNodeModelIndex& a0)
{
     ::QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N", new  ::QXmlNodeModelIndex(a0), sipType_QXmlNodeModelIndex, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

 ::QString sipVH_QtXmlPatterns_13(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlNodeModelIndex& a0)
{
     ::QString sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N", new  ::QXmlNodeModelIndex(a0), sipType_QXmlNodeModelIndex, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QString, &sipRes);

    return sipRes;
}

 ::QXmlName sipVH_QtXmlPatterns_12(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlNodeModelIndex& a0)
{
     ::QXmlName sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N", new  ::QXmlNodeModelIndex(a0), sipType_QXmlNodeModelIndex, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QXmlName, &sipRes);

    return sipRes;
}

 ::QXmlNodeModelIndex sipVH_QtXmlPatterns_11(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlNodeModelIndex& a0)
{
     ::QXmlNodeModelIndex sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N", new  ::QXmlNodeModelIndex(a0), sipType_QXmlNodeModelIndex, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QXmlNodeModelIndex, &sipRes);

    return sipRes;
}

 ::QXmlNodeModelIndex::DocumentOrder sipVH_QtXmlPatterns_10(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlNodeModelIndex& a0,const  ::QXmlNodeModelIndex& a1)
{
     ::QXmlNodeModelIndex::DocumentOrder sipRes = ( ::QXmlNodeModelIndex::DocumentOrder)0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "NN", new  ::QXmlNodeModelIndex(a0), sipType_QXmlNodeModelIndex, NULL, new  ::QXmlNodeModelIndex(a1), sipType_QXmlNodeModelIndex, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QXmlNodeModelIndex_DocumentOrder, &sipRes);

    return sipRes;
}

 ::QXmlNodeModelIndex::NodeKind sipVH_QtXmlPatterns_9(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlNodeModelIndex& a0)
{
     ::QXmlNodeModelIndex::NodeKind sipRes = ( ::QXmlNodeModelIndex::NodeKind)0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N", new  ::QXmlNodeModelIndex(a0), sipType_QXmlNodeModelIndex, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QXmlNodeModelIndex_NodeKind, &sipRes);

    return sipRes;
}

 ::QUrl sipVH_QtXmlPatterns_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QXmlNodeModelIndex& a0)
{
     ::QUrl sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N", new  ::QXmlNodeModelIndex(a0), sipType_QXmlNodeModelIndex, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QUrl, &sipRes);

    return sipRes;
}

 ::QUrl sipVH_QtXmlPatterns_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::QUrl& a0,const  ::QUrl& a1)
{
     ::QUrl sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "NN", new  ::QUrl(a0), sipType_QUrl, NULL, new  ::QUrl(a1), sipType_QUrl, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QUrl, &sipRes);

    return sipRes;
}

void sipVH_QtXmlPatterns_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QtMsgType a0,const  ::QString& a1,const  ::QUrl& a2,const  ::QSourceLocation& a3)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "FNNN", a0, sipType_QtMsgType, new  ::QString(a1), sipType_QString, NULL, new  ::QUrl(a2), sipType_QUrl, NULL, new  ::QSourceLocation(a3), sipType_QSourceLocation, NULL);
}

bool sipVH_QtXmlPatterns_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D", a0, sipType_QEvent, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtXmlPatterns_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QObject*a0, ::QEvent*a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "DD", a0, sipType_QObject, NULL, a1, sipType_QEvent, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

void sipVH_QtXmlPatterns_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QTimerEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QTimerEvent, NULL);
}

void sipVH_QtXmlPatterns_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QChildEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QChildEvent, NULL);
}

void sipVH_QtXmlPatterns_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::QEvent*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", a0, sipType_QEvent, NULL);
}

void sipVH_QtXmlPatterns_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const char*a0)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "S", a0);
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QAbstractMessageHandler(void **);}
static const sipTypeDef *sipSubClass_QAbstractMessageHandler(void **sipCppRet)
{
     ::QObject *sipCpp = reinterpret_cast< ::QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 32 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXmlPatterns/qabstractmessagehandler.sip"
    static struct class_graph {
            const char *name;
            sipTypeDef **type;
            int yes, no;
        } graph[] = {
            {sipName_QAbstractUriResolver,	&sipType_QAbstractUriResolver,	-1, 1},
            {sipName_QAbstractMessageHandler,	&sipType_QAbstractMessageHandler,	-1, -1},
        };
    
        int i = 0;
    
        sipType = 0;
    
        do
        {
            struct class_graph *cg = &graph[i];
    
            if (cg->name != NULL && sipCpp->inherits(cg->name))
            {
                sipType = *cg->type;
                i = cg->yes;
            }
            else
                i = cg->no;
        }
        while (i >= 0);
#line 490 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXmlPatterns/sipQtXmlPatternscmodule.cpp"

    return sipType;
}
static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QXmlQuery__QueryLanguage, {0}, 0}, sipNameNr_QueryLanguage, 16, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QAbstractXmlNodeModel__SimpleAxis, {0}, 0}, sipNameNr_SimpleAxis, 2, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QXmlNodeModelIndex__DocumentOrder, {0}, 0}, sipNameNr_DocumentOrder, 13, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QXmlNodeModelIndex__NodeKind, {0}, 0}, sipNameNr_NodeKind, 13, NULL},
};


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes_QtXmlPatterns[] = {
    &sipTypeDef_QtXmlPatterns_QAbstractMessageHandler.ctd_base,
    &sipTypeDef_QtXmlPatterns_QAbstractUriResolver.ctd_base,
    &sipTypeDef_QtXmlPatterns_QAbstractXmlNodeModel.ctd_base,
    &enumTypes[1].etd_base,
    &sipTypeDef_QtXmlPatterns_QAbstractXmlReceiver.ctd_base,
    &sipTypeDef_QtXmlPatterns_QSimpleXmlNodeModel.ctd_base,
    &sipTypeDef_QtXmlPatterns_QSourceLocation.ctd_base,
    &sipTypeDef_QtXmlPatterns_QVector_0100QXmlName.mtd_base,
    &sipTypeDef_QtXmlPatterns_QVector_0100QXmlNodeModelIndex.mtd_base,
    &sipTypeDef_QtXmlPatterns_QXmlFormatter.ctd_base,
    &sipTypeDef_QtXmlPatterns_QXmlItem.ctd_base,
    &sipTypeDef_QtXmlPatterns_QXmlName.ctd_base,
    &sipTypeDef_QtXmlPatterns_QXmlNamePool.ctd_base,
    &sipTypeDef_QtXmlPatterns_QXmlNodeModelIndex.ctd_base,
    &enumTypes[2].etd_base,
    &enumTypes[3].etd_base,
    &sipTypeDef_QtXmlPatterns_QXmlQuery.ctd_base,
    &enumTypes[0].etd_base,
    &sipTypeDef_QtXmlPatterns_QXmlResultItems.ctd_base,
    &sipTypeDef_QtXmlPatterns_QXmlSchema.ctd_base,
    &sipTypeDef_QtXmlPatterns_QXmlSchemaValidator.ctd_base,
    &sipTypeDef_QtXmlPatterns_QXmlSerializer.ctd_base,
};


/* This defines the types that this module needs to import from QtCore. */
sipImportedTypeDef sipImportedTypes_QtXmlPatterns_QtCore[] = {
    {"QByteArray"},
    {"QChildEvent"},
    {"QEvent"},
    {"QIODevice"},
    {"QObject"},
    {"QString"},
    {"QStringList"},
    {"QStringRef"},
    {"QTextCodec"},
    {"QTimerEvent"},
    {"QUrl"},
    {"QVariant"},
    {"QtMsgType"},
    {NULL}
};


/* This defines the types that this module needs to import from QtNetwork. */
sipImportedTypeDef sipImportedTypes_QtXmlPatterns_QtNetwork[] = {
    {"QNetworkAccessManager"},
    {NULL}
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt4.QtCore", sipImportedTypes_QtXmlPatterns_QtCore, NULL, NULL},
    {"PyQt4.QtNetwork", sipImportedTypes_QtXmlPatterns_QtNetwork, NULL, NULL},
    {NULL, NULL, NULL, NULL}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QAbstractMessageHandler, {4, 0, 0}, NULL},
    {NULL, {0, 0, 0}, NULL}
};


/* This defines the API versions and ranges in use. */
static int apiVersions[] = {sipNameNr_QString, 0, 2, -1};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtXmlPatterns = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt4_QtXmlPatterns,
    0,
    sipStrings_QtXmlPatterns,
    importsTable,
    NULL,
    22,
    sipExportedTypes_QtXmlPatterns,
    NULL,
    0,
    NULL,
    0,
    NULL,
    NULL,
    convertorsTable,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    apiVersions,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtXmlPatterns;

sip_qt_metaobject_func sip_QtXmlPatterns_qt_metaobject;
sip_qt_metacall_func sip_QtXmlPatterns_qt_metacall;
sip_qt_metacast_func sip_QtXmlPatterns_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtXmlPatterns
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtXmlPatterns
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt4.QtXmlPatterns",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt4_QtXmlPatterns, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt4_QtXmlPatterns), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule(SIP_MODULE_NAME);
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>(SIP_MODULE_NAME));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == NULL || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_QtXmlPatterns = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, SIP_MODULE_NAME "._C_API"));
#else
    sipAPI_QtXmlPatterns = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_QtXmlPatterns == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtXmlPatterns,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    sip_QtXmlPatterns_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtXmlPatterns_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtXmlPatterns_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    if (!sip_QtXmlPatterns_qt_metacast)
        Py_FatalError("Unable to import qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtXmlPatterns,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    SIP_MODULE_RETURN(sipModule);
}

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 166 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQXmlSimpleReader.cpp"

#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 293 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 275 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 236 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 214 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 250 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 263 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qxml.sip"
#include <qxml.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQXmlSimpleReader.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQXmlSimpleReader.cpp"


class sipQXmlSimpleReader : public  ::QXmlSimpleReader
{
public:
    sipQXmlSimpleReader();
    virtual ~sipQXmlSimpleReader();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool parseContinue();
    bool parse(const  ::QXmlInputSource*,bool);
    bool feature(const  ::QString&,bool*) const;
    void setFeature(const  ::QString&,bool);
    bool hasFeature(const  ::QString&) const;
    void* property(const  ::QString&,bool*) const;
    void setProperty(const  ::QString&,void*);
    bool hasProperty(const  ::QString&) const;
    void setEntityResolver( ::QXmlEntityResolver*);
     ::QXmlEntityResolver* entityResolver() const;
    void setDTDHandler( ::QXmlDTDHandler*);
     ::QXmlDTDHandler* DTDHandler() const;
    void setContentHandler( ::QXmlContentHandler*);
     ::QXmlContentHandler* contentHandler() const;
    void setErrorHandler( ::QXmlErrorHandler*);
     ::QXmlErrorHandler* errorHandler() const;
    void setLexicalHandler( ::QXmlLexicalHandler*);
     ::QXmlLexicalHandler* lexicalHandler() const;
    void setDeclHandler( ::QXmlDeclHandler*);
     ::QXmlDeclHandler* declHandler() const;
    bool parse(const  ::QXmlInputSource*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQXmlSimpleReader(const sipQXmlSimpleReader &);
    sipQXmlSimpleReader &operator = (const sipQXmlSimpleReader &);

    char sipPyMethods[21];
};

sipQXmlSimpleReader::sipQXmlSimpleReader():  ::QXmlSimpleReader(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQXmlSimpleReader::~sipQXmlSimpleReader()
{
    sipCommonDtor(sipPySelf);
}

bool sipQXmlSimpleReader::parseContinue()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_parseContinue);

    if (!sipMeth)
        return  ::QXmlSimpleReader::parseContinue();

    extern bool sipVH_QtXml_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_26(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQXmlSimpleReader::parse(const  ::QXmlInputSource*a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_parse);

    if (!sipMeth)
        return  ::QXmlSimpleReader::parse(a0,a1);

    extern bool sipVH_QtXml_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QXmlInputSource*,bool);

    return sipVH_QtXml_25(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQXmlSimpleReader::feature(const  ::QString& a0,bool*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_feature);

    if (!sipMeth)
        return  ::QXmlSimpleReader::feature(a0,a1);

    extern bool sipVH_QtXml_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,bool*);

    return sipVH_QtXml_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQXmlSimpleReader::setFeature(const  ::QString& a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setFeature);

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setFeature(a0,a1);
        return;
    }

    extern void sipVH_QtXml_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,bool);

    sipVH_QtXml_7(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQXmlSimpleReader::hasFeature(const  ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_hasFeature);

    if (!sipMeth)
        return  ::QXmlSimpleReader::hasFeature(a0);

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void* sipQXmlSimpleReader::property(const  ::QString& a0,bool*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_property);

    if (!sipMeth)
        return  ::QXmlSimpleReader::property(a0,a1);

    extern void* sipVH_QtXml_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,bool*);

    return sipVH_QtXml_9(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQXmlSimpleReader::setProperty(const  ::QString& a0,void*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setProperty);

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setProperty(a0,a1);
        return;
    }

    extern void sipVH_QtXml_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&,void*);

    sipVH_QtXml_10(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQXmlSimpleReader::hasProperty(const  ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_hasProperty);

    if (!sipMeth)
        return  ::QXmlSimpleReader::hasProperty(a0);

    extern bool sipVH_QtXml_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtXml_8(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQXmlSimpleReader::setEntityResolver( ::QXmlEntityResolver*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_setEntityResolver);

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setEntityResolver(a0);
        return;
    }

    extern void sipVH_QtXml_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QXmlEntityResolver*);

    sipVH_QtXml_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QXmlEntityResolver* sipQXmlSimpleReader::entityResolver() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_entityResolver);

    if (!sipMeth)
        return  ::QXmlSimpleReader::entityResolver();

    extern  ::QXmlEntityResolver* sipVH_QtXml_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_12(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQXmlSimpleReader::setDTDHandler( ::QXmlDTDHandler*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setDTDHandler);

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setDTDHandler(a0);
        return;
    }

    extern void sipVH_QtXml_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QXmlDTDHandler*);

    sipVH_QtXml_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QXmlDTDHandler* sipQXmlSimpleReader::DTDHandler() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_DTDHandler);

    if (!sipMeth)
        return  ::QXmlSimpleReader::DTDHandler();

    extern  ::QXmlDTDHandler* sipVH_QtXml_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_14(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQXmlSimpleReader::setContentHandler( ::QXmlContentHandler*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_setContentHandler);

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setContentHandler(a0);
        return;
    }

    extern void sipVH_QtXml_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QXmlContentHandler*);

    sipVH_QtXml_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QXmlContentHandler* sipQXmlSimpleReader::contentHandler() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_contentHandler);

    if (!sipMeth)
        return  ::QXmlSimpleReader::contentHandler();

    extern  ::QXmlContentHandler* sipVH_QtXml_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_16(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQXmlSimpleReader::setErrorHandler( ::QXmlErrorHandler*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_setErrorHandler);

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setErrorHandler(a0);
        return;
    }

    extern void sipVH_QtXml_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QXmlErrorHandler*);

    sipVH_QtXml_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QXmlErrorHandler* sipQXmlSimpleReader::errorHandler() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_errorHandler);

    if (!sipMeth)
        return  ::QXmlSimpleReader::errorHandler();

    extern  ::QXmlErrorHandler* sipVH_QtXml_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_18(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQXmlSimpleReader::setLexicalHandler( ::QXmlLexicalHandler*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_setLexicalHandler);

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setLexicalHandler(a0);
        return;
    }

    extern void sipVH_QtXml_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QXmlLexicalHandler*);

    sipVH_QtXml_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QXmlLexicalHandler* sipQXmlSimpleReader::lexicalHandler() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_lexicalHandler);

    if (!sipMeth)
        return  ::QXmlSimpleReader::lexicalHandler();

    extern  ::QXmlLexicalHandler* sipVH_QtXml_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_20(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQXmlSimpleReader::setDeclHandler( ::QXmlDeclHandler*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_setDeclHandler);

    if (!sipMeth)
    {
         ::QXmlSimpleReader::setDeclHandler(a0);
        return;
    }

    extern void sipVH_QtXml_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QXmlDeclHandler*);

    sipVH_QtXml_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QXmlDeclHandler* sipQXmlSimpleReader::declHandler() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_declHandler);

    if (!sipMeth)
        return  ::QXmlSimpleReader::declHandler();

    extern  ::QXmlDeclHandler* sipVH_QtXml_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtXml_22(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQXmlSimpleReader::parse(const  ::QXmlInputSource*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_parse);

    if (!sipMeth)
        return  ::QXmlSimpleReader::parse(a0);

    extern bool sipVH_QtXml_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QXmlInputSource*);

    return sipVH_QtXml_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QXmlSimpleReader_feature, "feature(self, str) -> Tuple[bool, bool]");

extern "C" {static PyObject *meth_QXmlSimpleReader_feature(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_feature(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
        const  ::QXmlSimpleReader *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::feature(*a0,&a1) : sipCpp->feature(*a0,&a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(bb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_feature, doc_QXmlSimpleReader_feature);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setFeature, "setFeature(self, str, bool)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setFeature(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setFeature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1b", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setFeature(*a0,a1) : sipCpp->setFeature(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setFeature, doc_QXmlSimpleReader_setFeature);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_hasFeature, "hasFeature(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlSimpleReader_hasFeature(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_hasFeature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::hasFeature(*a0) : sipCpp->hasFeature(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_hasFeature, doc_QXmlSimpleReader_hasFeature);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_property, "property(self, str) -> Tuple[sip.voidptr, bool]");

extern "C" {static PyObject *meth_QXmlSimpleReader_property(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_property(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1;
        const  ::QXmlSimpleReader *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            void*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::property(*a0,&a1) : sipCpp->property(*a0,&a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(Vb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_property, doc_QXmlSimpleReader_property);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setProperty, "setProperty(self, str, sip.voidptr)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setProperty(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        void* a1;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1v", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setProperty(*a0,a1) : sipCpp->setProperty(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setProperty, doc_QXmlSimpleReader_setProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_hasProperty, "hasProperty(self, str) -> bool");

extern "C" {static PyObject *meth_QXmlSimpleReader_hasProperty(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_hasProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::hasProperty(*a0) : sipCpp->hasProperty(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_hasProperty, doc_QXmlSimpleReader_hasProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setEntityResolver, "setEntityResolver(self, QXmlEntityResolver)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setEntityResolver(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setEntityResolver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlEntityResolver* a0;
        PyObject *a0Keep;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, &a0Keep, sipType_QXmlEntityResolver, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setEntityResolver(a0) : sipCpp->setEntityResolver(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -7, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setEntityResolver, doc_QXmlSimpleReader_setEntityResolver);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_entityResolver, "entityResolver(self) -> QXmlEntityResolver");

extern "C" {static PyObject *meth_QXmlSimpleReader_entityResolver(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_entityResolver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
             ::QXmlEntityResolver*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::entityResolver() : sipCpp->entityResolver());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QXmlEntityResolver,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_entityResolver, doc_QXmlSimpleReader_entityResolver);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setDTDHandler, "setDTDHandler(self, QXmlDTDHandler)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setDTDHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setDTDHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlDTDHandler* a0;
        PyObject *a0Keep;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, &a0Keep, sipType_QXmlDTDHandler, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setDTDHandler(a0) : sipCpp->setDTDHandler(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -8, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setDTDHandler, doc_QXmlSimpleReader_setDTDHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_DTDHandler, "DTDHandler(self) -> QXmlDTDHandler");

extern "C" {static PyObject *meth_QXmlSimpleReader_DTDHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_DTDHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
             ::QXmlDTDHandler*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::DTDHandler() : sipCpp->DTDHandler());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QXmlDTDHandler,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_DTDHandler, doc_QXmlSimpleReader_DTDHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setContentHandler, "setContentHandler(self, QXmlContentHandler)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setContentHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setContentHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlContentHandler* a0;
        PyObject *a0Keep;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, &a0Keep, sipType_QXmlContentHandler, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setContentHandler(a0) : sipCpp->setContentHandler(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -9, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setContentHandler, doc_QXmlSimpleReader_setContentHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_contentHandler, "contentHandler(self) -> QXmlContentHandler");

extern "C" {static PyObject *meth_QXmlSimpleReader_contentHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_contentHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
             ::QXmlContentHandler*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::contentHandler() : sipCpp->contentHandler());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QXmlContentHandler,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_contentHandler, doc_QXmlSimpleReader_contentHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setErrorHandler, "setErrorHandler(self, QXmlErrorHandler)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setErrorHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setErrorHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlErrorHandler* a0;
        PyObject *a0Keep;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, &a0Keep, sipType_QXmlErrorHandler, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setErrorHandler(a0) : sipCpp->setErrorHandler(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -10, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setErrorHandler, doc_QXmlSimpleReader_setErrorHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_errorHandler, "errorHandler(self) -> QXmlErrorHandler");

extern "C" {static PyObject *meth_QXmlSimpleReader_errorHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_errorHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
             ::QXmlErrorHandler*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::errorHandler() : sipCpp->errorHandler());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QXmlErrorHandler,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_errorHandler, doc_QXmlSimpleReader_errorHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setLexicalHandler, "setLexicalHandler(self, QXmlLexicalHandler)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setLexicalHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setLexicalHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlLexicalHandler* a0;
        PyObject *a0Keep;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, &a0Keep, sipType_QXmlLexicalHandler, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setLexicalHandler(a0) : sipCpp->setLexicalHandler(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -11, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setLexicalHandler, doc_QXmlSimpleReader_setLexicalHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_lexicalHandler, "lexicalHandler(self) -> QXmlLexicalHandler");

extern "C" {static PyObject *meth_QXmlSimpleReader_lexicalHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_lexicalHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
             ::QXmlLexicalHandler*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::lexicalHandler() : sipCpp->lexicalHandler());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QXmlLexicalHandler,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_lexicalHandler, doc_QXmlSimpleReader_lexicalHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_setDeclHandler, "setDeclHandler(self, QXmlDeclHandler)");

extern "C" {static PyObject *meth_QXmlSimpleReader_setDeclHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_setDeclHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlDeclHandler* a0;
        PyObject *a0Keep;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, &a0Keep, sipType_QXmlDeclHandler, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::setDeclHandler(a0) : sipCpp->setDeclHandler(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -12, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_setDeclHandler, doc_QXmlSimpleReader_setDeclHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_declHandler, "declHandler(self) -> QXmlDeclHandler");

extern "C" {static PyObject *meth_QXmlSimpleReader_declHandler(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_declHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
             ::QXmlDeclHandler*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::declHandler() : sipCpp->declHandler());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QXmlDeclHandler,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_declHandler, doc_QXmlSimpleReader_declHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_parse, "parse(self, QXmlInputSource) -> bool\n"
    "parse(self, QXmlInputSource, bool) -> bool");

extern "C" {static PyObject *meth_QXmlSimpleReader_parse(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_parse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QXmlInputSource* a0;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QXmlInputSource, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::parse(a0) : sipCpp->parse(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QXmlInputSource* a0;
        bool a1;
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8b", &sipSelf, sipType_QXmlSimpleReader, &sipCpp, sipType_QXmlInputSource, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::parse(a0,a1) : sipCpp->parse(a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_parse, doc_QXmlSimpleReader_parse);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlSimpleReader_parseContinue, "parseContinue(self) -> bool");

extern "C" {static PyObject *meth_QXmlSimpleReader_parseContinue(PyObject *, PyObject *);}
static PyObject *meth_QXmlSimpleReader_parseContinue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QXmlSimpleReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlSimpleReader, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QXmlSimpleReader::parseContinue() : sipCpp->parseContinue());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlSimpleReader, sipName_parseContinue, doc_QXmlSimpleReader_parseContinue);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QXmlSimpleReader(void *, const sipTypeDef *);}
static void *cast_QXmlSimpleReader(void *sipCppV, const sipTypeDef *targetType)
{
     ::QXmlSimpleReader *sipCpp = reinterpret_cast< ::QXmlSimpleReader *>(sipCppV);

    if (targetType == sipType_QXmlReader)
        return static_cast< ::QXmlReader *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlSimpleReader(void *, int);}
static void release_QXmlSimpleReader(void *sipCppV, int sipIsDerived)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipIsDerived)
        delete reinterpret_cast<sipQXmlSimpleReader *>(sipCppV);
    else
        delete reinterpret_cast< ::QXmlSimpleReader *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QXmlSimpleReader(sipSimpleWrapper *);}
static void dealloc_QXmlSimpleReader(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQXmlSimpleReader *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QXmlSimpleReader(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QXmlSimpleReader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlSimpleReader(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQXmlSimpleReader *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQXmlSimpleReader();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QXmlSimpleReader[] = {{32, 255, 1}};


static PyMethodDef methods_QXmlSimpleReader[] = {
    {SIP_MLNAME_CAST(sipName_DTDHandler), meth_QXmlSimpleReader_DTDHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_DTDHandler)},
    {SIP_MLNAME_CAST(sipName_contentHandler), meth_QXmlSimpleReader_contentHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_contentHandler)},
    {SIP_MLNAME_CAST(sipName_declHandler), meth_QXmlSimpleReader_declHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_declHandler)},
    {SIP_MLNAME_CAST(sipName_entityResolver), meth_QXmlSimpleReader_entityResolver, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_entityResolver)},
    {SIP_MLNAME_CAST(sipName_errorHandler), meth_QXmlSimpleReader_errorHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_errorHandler)},
    {SIP_MLNAME_CAST(sipName_feature), (PyCFunction)meth_QXmlSimpleReader_feature, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_feature)},
    {SIP_MLNAME_CAST(sipName_hasFeature), meth_QXmlSimpleReader_hasFeature, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_hasFeature)},
    {SIP_MLNAME_CAST(sipName_hasProperty), meth_QXmlSimpleReader_hasProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_hasProperty)},
    {SIP_MLNAME_CAST(sipName_lexicalHandler), meth_QXmlSimpleReader_lexicalHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_lexicalHandler)},
    {SIP_MLNAME_CAST(sipName_parse), meth_QXmlSimpleReader_parse, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_parse)},
    {SIP_MLNAME_CAST(sipName_parseContinue), meth_QXmlSimpleReader_parseContinue, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_parseContinue)},
    {SIP_MLNAME_CAST(sipName_property), (PyCFunction)meth_QXmlSimpleReader_property, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_property)},
    {SIP_MLNAME_CAST(sipName_setContentHandler), meth_QXmlSimpleReader_setContentHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_setContentHandler)},
    {SIP_MLNAME_CAST(sipName_setDTDHandler), meth_QXmlSimpleReader_setDTDHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_setDTDHandler)},
    {SIP_MLNAME_CAST(sipName_setDeclHandler), meth_QXmlSimpleReader_setDeclHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_setDeclHandler)},
    {SIP_MLNAME_CAST(sipName_setEntityResolver), meth_QXmlSimpleReader_setEntityResolver, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_setEntityResolver)},
    {SIP_MLNAME_CAST(sipName_setErrorHandler), meth_QXmlSimpleReader_setErrorHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_setErrorHandler)},
    {SIP_MLNAME_CAST(sipName_setFeature), meth_QXmlSimpleReader_setFeature, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_setFeature)},
    {SIP_MLNAME_CAST(sipName_setLexicalHandler), meth_QXmlSimpleReader_setLexicalHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_setLexicalHandler)},
    {SIP_MLNAME_CAST(sipName_setProperty), meth_QXmlSimpleReader_setProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlSimpleReader_setProperty)}
};

PyDoc_STRVAR(doc_QXmlSimpleReader, "\1QXmlSimpleReader()");


static pyqt4ClassPluginDef plugin_QXmlSimpleReader = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtXml_QXmlSimpleReader = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QXmlSimpleReader,
        {0},
        &plugin_QXmlSimpleReader
    },
    {
        sipNameNr_QXmlSimpleReader,
        {0, 0, 1},
        20, methods_QXmlSimpleReader,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QXmlSimpleReader,
    -1,
    -1,
    supers_QXmlSimpleReader,
    0,
    init_type_QXmlSimpleReader,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QXmlSimpleReader,
    0,
    0,
    0,
    release_QXmlSimpleReader,
    cast_QXmlSimpleReader,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 426 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"

#line 53 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 336 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 30 "sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 388 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 294 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 453 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 412 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 375 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 441 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 189 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 207 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 282 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 400 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 319 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 251 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"
#line 164 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtXml/qdom.sip"
#include <qdom.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtXml/sipQtXmlQDomEntity.cpp"


PyDoc_STRVAR(doc_QDomEntity_publicId, "publicId(self) -> str");

extern "C" {static PyObject *meth_QDomEntity_publicId(PyObject *, PyObject *);}
static PyObject *meth_QDomEntity_publicId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDomEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomEntity, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->publicId());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomEntity, sipName_publicId, doc_QDomEntity_publicId);

    return NULL;
}


PyDoc_STRVAR(doc_QDomEntity_systemId, "systemId(self) -> str");

extern "C" {static PyObject *meth_QDomEntity_systemId(PyObject *, PyObject *);}
static PyObject *meth_QDomEntity_systemId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDomEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomEntity, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->systemId());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomEntity, sipName_systemId, doc_QDomEntity_systemId);

    return NULL;
}


PyDoc_STRVAR(doc_QDomEntity_notationName, "notationName(self) -> str");

extern "C" {static PyObject *meth_QDomEntity_notationName(PyObject *, PyObject *);}
static PyObject *meth_QDomEntity_notationName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDomEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomEntity, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->notationName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomEntity, sipName_notationName, doc_QDomEntity_notationName);

    return NULL;
}


PyDoc_STRVAR(doc_QDomEntity_nodeType, "nodeType(self) -> QDomNode.NodeType");

extern "C" {static PyObject *meth_QDomEntity_nodeType(PyObject *, PyObject *);}
static PyObject *meth_QDomEntity_nodeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDomEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomEntity, &sipCpp))
        {
             ::QDomNode::NodeType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->nodeType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDomNode_NodeType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomEntity, sipName_nodeType, doc_QDomEntity_nodeType);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDomEntity(void *, const sipTypeDef *);}
static void *cast_QDomEntity(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDomEntity *sipCpp = reinterpret_cast< ::QDomEntity *>(sipCppV);

    if (targetType == sipType_QDomNode)
        return static_cast< ::QDomNode *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDomEntity(void *, int);}
static void release_QDomEntity(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QDomEntity *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QDomEntity(void *, SIP_SSIZE_T, const void *);}
static void assign_QDomEntity(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::QDomEntity *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::QDomEntity *>(sipSrc);
}


extern "C" {static void *array_QDomEntity(SIP_SSIZE_T);}
static void *array_QDomEntity(SIP_SSIZE_T sipNrElem)
{
    return new  ::QDomEntity[sipNrElem];
}


extern "C" {static void *copy_QDomEntity(const void *, SIP_SSIZE_T);}
static void *copy_QDomEntity(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QDomEntity(reinterpret_cast<const  ::QDomEntity *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDomEntity(sipSimpleWrapper *);}
static void dealloc_QDomEntity(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDomEntity(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QDomEntity(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDomEntity(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QDomEntity *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QDomEntity();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QDomEntity* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDomEntity, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QDomEntity(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDomEntity[] = {{13, 255, 1}};


static PyMethodDef methods_QDomEntity[] = {
    {SIP_MLNAME_CAST(sipName_nodeType), meth_QDomEntity_nodeType, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomEntity_nodeType)},
    {SIP_MLNAME_CAST(sipName_notationName), meth_QDomEntity_notationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomEntity_notationName)},
    {SIP_MLNAME_CAST(sipName_publicId), meth_QDomEntity_publicId, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomEntity_publicId)},
    {SIP_MLNAME_CAST(sipName_systemId), meth_QDomEntity_systemId, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomEntity_systemId)}
};

PyDoc_STRVAR(doc_QDomEntity, "\1QDomEntity()\n"
    "QDomEntity(QDomEntity)");


static pyqt4ClassPluginDef plugin_QDomEntity = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtXml_QDomEntity = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QDomEntity,
        {0},
        &plugin_QDomEntity
    },
    {
        sipNameNr_QDomEntity,
        {0, 0, 1},
        4, methods_QDomEntity,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDomEntity,
    -1,
    -1,
    supers_QDomEntity,
    0,
    init_type_QDomEntity,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDomEntity,
    assign_QDomEntity,
    array_QDomEntity,
    copy_QDomEntity,
    release_QDomEntity,
    cast_QDomEntity,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qchar.sip"
#include <qchar.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQLatin1Char_0.cpp"



PyDoc_STRVAR(doc_QLatin1Char_0_toLatin1, "toLatin1(self) -> str");

extern "C" {static PyObject *meth_QLatin1Char_0_toLatin1(PyObject *, PyObject *);}
static PyObject *meth_QLatin1Char_0_toLatin1(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLatin1Char *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLatin1Char, &sipCpp))
        {
            char sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toLatin1();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize(&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLatin1Char, sipName_toLatin1, doc_QLatin1Char_0_toLatin1);

    return NULL;
}


PyDoc_STRVAR(doc_QLatin1Char_0_unicode, "unicode(self) -> int");

extern "C" {static PyObject *meth_QLatin1Char_0_unicode(PyObject *, PyObject *);}
static PyObject *meth_QLatin1Char_0_unicode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLatin1Char *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLatin1Char, &sipCpp))
        {
             ::ushort sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unicode();
            Py_END_ALLOW_THREADS

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLatin1Char, sipName_unicode, doc_QLatin1Char_0_unicode);

    return NULL;
}


extern "C" {static PyObject *slot_QLatin1Char_0___repr__(PyObject *);}
static PyObject *slot_QLatin1Char_0___repr__(PyObject *sipSelf)
{
     ::QLatin1Char *sipCpp = reinterpret_cast< ::QLatin1Char *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLatin1Char));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 38 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qchar.sip"
        char ch = sipCpp->toLatin1();
        PyObject *str = SIPBytes_FromStringAndSize(&ch, 1);
        
        if (str)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QLatin1Char(%R)", str);
        #else
            sipRes = PyString_FromString("PyQt4.QtCore.QLatin1Char(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(str));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(str);
        }
#line 126 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQLatin1Char_0.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLatin1Char_0(void *, int);}
static void release_QLatin1Char_0(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QLatin1Char *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QLatin1Char(void *);}
static PyObject *pickle_QLatin1Char(void *sipCppV)
{
     ::QLatin1Char *sipCpp = reinterpret_cast< ::QLatin1Char *>(sipCppV);
    PyObject *sipRes;

#line 30 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qchar.sip"
    char ch = sipCpp->toLatin1();
    
    sipRes = Py_BuildValue((char *)"(s#)", &ch, 1);
#line 158 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQLatin1Char_0.cpp"

    return sipRes;
}


extern "C" {static void dealloc_QLatin1Char_0(sipSimpleWrapper *);}
static void dealloc_QLatin1Char_0(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLatin1Char_0(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QLatin1Char_0(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLatin1Char_0(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QLatin1Char *sipCpp = 0;

    {
        char a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "aL", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QLatin1Char(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QLatin1Char* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QLatin1Char, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QLatin1Char(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLatin1Char_0[] = {
    {(void *)slot_QLatin1Char_0___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLatin1Char_0[] = {
    {SIP_MLNAME_CAST(sipName_toLatin1), meth_QLatin1Char_0_toLatin1, METH_VARARGS, SIP_MLDOC_CAST(doc_QLatin1Char_0_toLatin1)},
    {SIP_MLNAME_CAST(sipName_unicode), meth_QLatin1Char_0_unicode, METH_VARARGS, SIP_MLDOC_CAST(doc_QLatin1Char_0_unicode)}
};

PyDoc_STRVAR(doc_QLatin1Char_0, "\1QLatin1Char(str)\n"
    "QLatin1Char(QLatin1Char)");


static pyqt4ClassPluginDef plugin_QLatin1Char_0 = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtCore_QLatin1Char_0 = {
    {
        0,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QLatin1Char,
        {0},
        &plugin_QLatin1Char_0
    },
    {
        sipNameNr_QLatin1Char,
        {0, 0, 1},
        2, methods_QLatin1Char_0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLatin1Char_0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QLatin1Char_0,
    init_type_QLatin1Char_0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLatin1Char_0,
    0,
    0,
    0,
    release_QLatin1Char_0,
    0,
    0,
    0,
    0,
    pickle_QLatin1Char,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 1358 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSystemLocale.cpp"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSystemLocale.cpp"
#line 265 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSystemLocale.cpp"


class sipQSystemLocale : public  ::QSystemLocale
{
public:
    sipQSystemLocale();
    sipQSystemLocale(const  ::QSystemLocale&);
    virtual ~sipQSystemLocale();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QLocale fallbackLocale() const;
     ::QVariant query( ::QSystemLocale::QueryType, ::QVariant) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSystemLocale(const sipQSystemLocale &);
    sipQSystemLocale &operator = (const sipQSystemLocale &);

    char sipPyMethods[2];
};

sipQSystemLocale::sipQSystemLocale():  ::QSystemLocale(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSystemLocale::sipQSystemLocale(const  ::QSystemLocale& a0):  ::QSystemLocale(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSystemLocale::~sipQSystemLocale()
{
    sipCommonDtor(sipPySelf);
}

 ::QLocale sipQSystemLocale::fallbackLocale() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_fallbackLocale);

    if (!sipMeth)
        return  ::QSystemLocale::fallbackLocale();

    extern  ::QLocale sipVH_QtCore_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_62(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QVariant sipQSystemLocale::query( ::QSystemLocale::QueryType a0, ::QVariant a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_query);

    if (!sipMeth)
        return  ::QSystemLocale::query(a0,a1);

    extern  ::QVariant sipVH_QtCore_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QSystemLocale::QueryType, ::QVariant);

    return sipVH_QtCore_61(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QSystemLocale_query, "query(self, QSystemLocale.QueryType, Any) -> Any");

extern "C" {static PyObject *meth_QSystemLocale_query(PyObject *, PyObject *);}
static PyObject *meth_QSystemLocale_query(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QSystemLocale::QueryType a0;
         ::QVariant* a1;
        int a1State = 0;
        const  ::QSystemLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QSystemLocale, &sipCpp, sipType_QSystemLocale_QueryType, &a0, sipType_QVariant,&a1, &a1State))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QSystemLocale::query(a0,*a1) : sipCpp->query(a0,*a1)));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemLocale, sipName_query, doc_QSystemLocale_query);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemLocale_fallbackLocale, "fallbackLocale(self) -> QLocale");

extern "C" {static PyObject *meth_QSystemLocale_fallbackLocale(PyObject *, PyObject *);}
static PyObject *meth_QSystemLocale_fallbackLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSystemLocale *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemLocale, &sipCpp))
        {
             ::QLocale*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QLocale((sipSelfWasArg ? sipCpp-> ::QSystemLocale::fallbackLocale() : sipCpp->fallbackLocale()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemLocale, sipName_fallbackLocale, doc_QSystemLocale_fallbackLocale);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSystemLocale(void *, int);}
static void release_QSystemLocale(void *sipCppV, int sipIsDerived)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipIsDerived)
        delete reinterpret_cast<sipQSystemLocale *>(sipCppV);
    else
        delete reinterpret_cast< ::QSystemLocale *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QSystemLocale(void *, SIP_SSIZE_T, const void *);}
static void assign_QSystemLocale(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::QSystemLocale *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::QSystemLocale *>(sipSrc);
}


extern "C" {static void *array_QSystemLocale(SIP_SSIZE_T);}
static void *array_QSystemLocale(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSystemLocale[sipNrElem];
}


extern "C" {static void *copy_QSystemLocale(const void *, SIP_SSIZE_T);}
static void *copy_QSystemLocale(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSystemLocale(reinterpret_cast<const  ::QSystemLocale *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSystemLocale(sipSimpleWrapper *);}
static void dealloc_QSystemLocale(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSystemLocale *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSystemLocale(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSystemLocale(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSystemLocale(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSystemLocale *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSystemLocale();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QSystemLocale* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSystemLocale, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSystemLocale(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QSystemLocale[] = {
    {SIP_MLNAME_CAST(sipName_fallbackLocale), meth_QSystemLocale_fallbackLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemLocale_fallbackLocale)},
    {SIP_MLNAME_CAST(sipName_query), meth_QSystemLocale_query, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemLocale_query)}
};

static sipEnumMemberDef enummembers_QSystemLocale[] = {
    {sipName_AMText, static_cast<int>( ::QSystemLocale::AMText), 209},
    {sipName_CountryId, static_cast<int>( ::QSystemLocale::CountryId), 209},
    {sipName_CurrencySymbol, static_cast<int>( ::QSystemLocale::CurrencySymbol), 209},
    {sipName_CurrencyToString, static_cast<int>( ::QSystemLocale::CurrencyToString), 209},
    {sipName_DateFormatLong, static_cast<int>( ::QSystemLocale::DateFormatLong), 209},
    {sipName_DateFormatShort, static_cast<int>( ::QSystemLocale::DateFormatShort), 209},
    {sipName_DateTimeFormatLong, static_cast<int>( ::QSystemLocale::DateTimeFormatLong), 209},
    {sipName_DateTimeFormatShort, static_cast<int>( ::QSystemLocale::DateTimeFormatShort), 209},
    {sipName_DateTimeToStringLong, static_cast<int>( ::QSystemLocale::DateTimeToStringLong), 209},
    {sipName_DateTimeToStringShort, static_cast<int>( ::QSystemLocale::DateTimeToStringShort), 209},
    {sipName_DateToStringLong, static_cast<int>( ::QSystemLocale::DateToStringLong), 209},
    {sipName_DateToStringShort, static_cast<int>( ::QSystemLocale::DateToStringShort), 209},
    {sipName_DayNameLong, static_cast<int>( ::QSystemLocale::DayNameLong), 209},
    {sipName_DayNameShort, static_cast<int>( ::QSystemLocale::DayNameShort), 209},
    {sipName_DecimalPoint, static_cast<int>( ::QSystemLocale::DecimalPoint), 209},
    {sipName_FirstDayOfWeek, static_cast<int>( ::QSystemLocale::FirstDayOfWeek), 209},
    {sipName_GroupSeparator, static_cast<int>( ::QSystemLocale::GroupSeparator), 209},
    {sipName_LanguageId, static_cast<int>( ::QSystemLocale::LanguageId), 209},
    {sipName_ListToSeparatedString, static_cast<int>( ::QSystemLocale::ListToSeparatedString), 209},
    {sipName_LocaleChanged, static_cast<int>( ::QSystemLocale::LocaleChanged), 209},
    {sipName_MeasurementSystem, static_cast<int>( ::QSystemLocale::MeasurementSystem), 209},
    {sipName_MonthNameLong, static_cast<int>( ::QSystemLocale::MonthNameLong), 209},
    {sipName_MonthNameShort, static_cast<int>( ::QSystemLocale::MonthNameShort), 209},
    {sipName_NativeCountryName, static_cast<int>( ::QSystemLocale::NativeCountryName), 209},
    {sipName_NativeLanguageName, static_cast<int>( ::QSystemLocale::NativeLanguageName), 209},
    {sipName_NegativeSign, static_cast<int>( ::QSystemLocale::NegativeSign), 209},
    {sipName_PMText, static_cast<int>( ::QSystemLocale::PMText), 209},
    {sipName_PositiveSign, static_cast<int>( ::QSystemLocale::PositiveSign), 209},
    {sipName_ScriptId, static_cast<int>( ::QSystemLocale::ScriptId), 209},
    {sipName_StringToAlternateQuotation, static_cast<int>( ::QSystemLocale::StringToAlternateQuotation), 209},
    {sipName_StringToStandardQuotation, static_cast<int>( ::QSystemLocale::StringToStandardQuotation), 209},
    {sipName_TimeFormatLong, static_cast<int>( ::QSystemLocale::TimeFormatLong), 209},
    {sipName_TimeFormatShort, static_cast<int>( ::QSystemLocale::TimeFormatShort), 209},
    {sipName_TimeToStringLong, static_cast<int>( ::QSystemLocale::TimeToStringLong), 209},
    {sipName_TimeToStringShort, static_cast<int>( ::QSystemLocale::TimeToStringShort), 209},
    {sipName_UILanguages, static_cast<int>( ::QSystemLocale::UILanguages), 209},
    {sipName_Weekdays, static_cast<int>( ::QSystemLocale::Weekdays), 209},
    {sipName_ZeroDigit, static_cast<int>( ::QSystemLocale::ZeroDigit), 209},
};

PyDoc_STRVAR(doc_QSystemLocale, "\1QSystemLocale()\n"
    "QSystemLocale(QSystemLocale)");


static pyqt4ClassPluginDef plugin_QSystemLocale = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtCore_QSystemLocale = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QSystemLocale,
        {0},
        &plugin_QSystemLocale
    },
    {
        sipNameNr_QSystemLocale,
        {0, 0, 1},
        2, methods_QSystemLocale,
        38, enummembers_QSystemLocale,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSystemLocale,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QSystemLocale,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSystemLocale,
    assign_QSystemLocale,
    array_QSystemLocale,
    copy_QSystemLocale,
    release_QSystemLocale,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qstate.sip"
#include <qstate.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 115 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 115 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 368 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 351 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 265 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 32 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 115 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 27 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"


class sipQAbstractTransition : public  ::QAbstractTransition
{
public:
    sipQAbstractTransition( ::QState*);
    virtual ~sipQAbstractTransition();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void onTransition( ::QEvent*);
    bool eventTest( ::QEvent*);
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractTransition(const sipQAbstractTransition &);
    sipQAbstractTransition &operator = (const sipQAbstractTransition &);

    char sipPyMethods[9];
};

sipQAbstractTransition::sipQAbstractTransition( ::QState*a0):  ::QAbstractTransition(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractTransition::~sipQAbstractTransition()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractTransition::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractTransition);
}

int sipQAbstractTransition::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QAbstractTransition::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractTransition,_c,_id,_a);

    return _id;
}

void *sipQAbstractTransition::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QAbstractTransition, _clname)) ? this :  ::QAbstractTransition::qt_metacast(_clname);
}

void sipQAbstractTransition::onTransition( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QAbstractTransition,sipName_onTransition);

    if (!sipMeth)
        return;

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTransition::eventTest( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QAbstractTransition,sipName_eventTest);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTransition::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QAbstractTransition::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQAbstractTransition::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QAbstractTransition::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractTransition::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QAbstractTransition::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractTransition::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QAbstractTransition::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractTransition::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QAbstractTransition::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractTransition::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QAbstractTransition::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQAbstractTransition::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QAbstractTransition::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QAbstractTransition_sourceState, "sourceState(self) -> QState");

extern "C" {static PyObject *meth_QAbstractTransition_sourceState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_sourceState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTransition, &sipCpp))
        {
             ::QState*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sourceState();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QState,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_sourceState, doc_QAbstractTransition_sourceState);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTransition_targetState, "targetState(self) -> QAbstractState");

extern "C" {static PyObject *meth_QAbstractTransition_targetState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_targetState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTransition, &sipCpp))
        {
             ::QAbstractState*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->targetState();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractState,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_targetState, doc_QAbstractTransition_targetState);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTransition_setTargetState, "setTargetState(self, QAbstractState)");

extern "C" {static PyObject *meth_QAbstractTransition_setTargetState(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_setTargetState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractState* a0;
        PyObject *a0Keep;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractTransition, &sipCpp, &a0Keep, sipType_QAbstractState, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTargetState(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 0, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_setTargetState, doc_QAbstractTransition_setTargetState);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTransition_targetStates, "targetStates(self) -> object");

extern "C" {static PyObject *meth_QAbstractTransition_targetStates(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_targetStates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTransition, &sipCpp))
        {
            QList< ::QAbstractState*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QAbstractState*>(sipCpp->targetStates());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractState,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_targetStates, doc_QAbstractTransition_targetStates);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTransition_setTargetStates, "setTargetStates(self, Sequence[QAbstractState])");

extern "C" {static PyObject *meth_QAbstractTransition_setTargetStates(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_setTargetStates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList< ::QAbstractState*>* a0;
        PyObject *a0Keep;
        int a0State = 0;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J1", &sipSelf, sipType_QAbstractTransition, &sipCpp, &a0Keep, sipType_QList_0101QAbstractState,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTargetStates(*a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 0, a0Keep);
            sipReleaseType(const_cast<QList< ::QAbstractState*> *>(a0),sipType_QList_0101QAbstractState,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_setTargetStates, doc_QAbstractTransition_setTargetStates);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTransition_machine, "machine(self) -> QStateMachine");

extern "C" {static PyObject *meth_QAbstractTransition_machine(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_machine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTransition, &sipCpp))
        {
             ::QStateMachine*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->machine();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStateMachine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_machine, doc_QAbstractTransition_machine);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTransition_addAnimation, "addAnimation(self, QAbstractAnimation)");

extern "C" {static PyObject *meth_QAbstractTransition_addAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_addAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractAnimation* a0;
        PyObject *a0Wrapper;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractTransition, &sipCpp, &a0Wrapper, sipType_QAbstractAnimation, &a0))
        {
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qabstracttransition.sip"
        // We want to keep a reference to the animation but this is in addition to the
        // existing ones and does not replace them - so we can't use /KeepReference/.
        sipCpp->addAnimation(a0);
        
        // Use the user object as a list of the references.
        PyObject *user = ((sipSimpleWrapper *)sipSelf)->user;
        
        if (!user)
            user = ((sipSimpleWrapper *)sipSelf)->user = PyList_New(0);
        
        if (user)
            PyList_Append(user, a0Wrapper);
#line 522 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_addAnimation, doc_QAbstractTransition_addAnimation);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTransition_removeAnimation, "removeAnimation(self, QAbstractAnimation)");

extern "C" {static PyObject *meth_QAbstractTransition_removeAnimation(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_removeAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractAnimation* a0;
        PyObject *a0Wrapper;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QAbstractTransition, &sipCpp, &a0Wrapper, sipType_QAbstractAnimation, &a0))
        {
#line 58 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qabstracttransition.sip"
        // Discard the extra animation reference that we took in addAnimation().
        sipCpp->removeAnimation(a0);
        
        // Use the user object as a list of the references.
        PyObject *user = ((sipSimpleWrapper *)sipSelf)->user;
        
        if (user)
        {
            SIP_SSIZE_T i = 0;
            
            // Note that we deal with an object appearing in the list more than once.
            while (i < PyList_GET_SIZE(user))
                if (PyList_GET_ITEM(user, i) == a0Wrapper)
                    PyList_SetSlice(user, i, i + 1, NULL);
                else
                    ++i;
        }
#line 569 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQAbstractTransition.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_removeAnimation, doc_QAbstractTransition_removeAnimation);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTransition_animations, "animations(self) -> object");

extern "C" {static PyObject *meth_QAbstractTransition_animations(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_animations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractTransition, &sipCpp))
        {
            QList< ::QAbstractAnimation*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QAbstractAnimation*>(sipCpp->animations());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractAnimation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_animations, doc_QAbstractTransition_animations);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTransition_eventTest, "eventTest(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractTransition_eventTest(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_eventTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QEvent* a0;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractTransition, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTransition, sipName_eventTest);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->eventTest(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_eventTest, doc_QAbstractTransition_eventTest);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTransition_onTransition, "onTransition(self, QEvent)");

extern "C" {static PyObject *meth_QAbstractTransition_onTransition(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_onTransition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QEvent* a0;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractTransition, &sipCpp, sipType_QEvent, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractTransition, sipName_onTransition);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->onTransition(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_onTransition, doc_QAbstractTransition_onTransition);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractTransition_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractTransition_event(PyObject *, PyObject *);}
static PyObject *meth_QAbstractTransition_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QAbstractTransition *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QAbstractTransition, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QAbstractTransition::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractTransition, sipName_event, doc_QAbstractTransition_event);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QAbstractTransition(void *, const sipTypeDef *);}
static void *cast_QAbstractTransition(void *sipCppV, const sipTypeDef *targetType)
{
     ::QAbstractTransition *sipCpp = reinterpret_cast< ::QAbstractTransition *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractTransition(void *, int);}
static void release_QAbstractTransition(void *sipCppV, int)
{
     ::QAbstractTransition *sipCpp = reinterpret_cast< ::QAbstractTransition *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractTransition(sipSimpleWrapper *);}
static void dealloc_QAbstractTransition(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQAbstractTransition *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QAbstractTransition(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QAbstractTransition(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractTransition(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractTransition *sipCpp = 0;

    {
         ::QState* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_sourceState,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QState, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractTransition(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractTransition[] = {{141, 255, 1}};


static PyMethodDef methods_QAbstractTransition[] = {
    {SIP_MLNAME_CAST(sipName_addAnimation), meth_QAbstractTransition_addAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_addAnimation)},
    {SIP_MLNAME_CAST(sipName_animations), meth_QAbstractTransition_animations, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_animations)},
    {SIP_MLNAME_CAST(sipName_event), meth_QAbstractTransition_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_event)},
    {SIP_MLNAME_CAST(sipName_eventTest), meth_QAbstractTransition_eventTest, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_eventTest)},
    {SIP_MLNAME_CAST(sipName_machine), meth_QAbstractTransition_machine, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_machine)},
    {SIP_MLNAME_CAST(sipName_onTransition), meth_QAbstractTransition_onTransition, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_onTransition)},
    {SIP_MLNAME_CAST(sipName_removeAnimation), meth_QAbstractTransition_removeAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_removeAnimation)},
    {SIP_MLNAME_CAST(sipName_setTargetState), meth_QAbstractTransition_setTargetState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_setTargetState)},
    {SIP_MLNAME_CAST(sipName_setTargetStates), meth_QAbstractTransition_setTargetStates, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_setTargetStates)},
    {SIP_MLNAME_CAST(sipName_sourceState), meth_QAbstractTransition_sourceState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_sourceState)},
    {SIP_MLNAME_CAST(sipName_targetState), meth_QAbstractTransition_targetState, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_targetState)},
    {SIP_MLNAME_CAST(sipName_targetStates), meth_QAbstractTransition_targetStates, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractTransition_targetStates)}
};

PyDoc_STRVAR(doc_QAbstractTransition, "\1QAbstractTransition(sourceState: QState = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QAbstractTransition[] = {
    {"triggered()", "\1triggered(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QAbstractTransition = {
    & ::QAbstractTransition::staticMetaObject,
    0,
    signals_QAbstractTransition
};


sipClassTypeDef sipTypeDef_QtCore_QAbstractTransition = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractTransition,
        {0},
        &plugin_QAbstractTransition
    },
    {
        sipNameNr_QAbstractTransition,
        {0, 0, 1},
        12, methods_QAbstractTransition,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractTransition,
    -1,
    -1,
    supers_QAbstractTransition,
    0,
    init_type_QAbstractTransition,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractTransition,
    0,
    0,
    0,
    release_QAbstractTransition,
    cast_QAbstractTransition,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 247 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 30 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQVector0600QPair24000100QVariant.cpp"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQVector0600QPair24000100QVariant.cpp"


extern "C" {static void assign_QVector_0600QPair_2400_0100QVariant(void *, SIP_SSIZE_T, const void *);}
static void assign_QVector_0600QPair_2400_0100QVariant(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QVector<QPair< ::qreal,QVariant> > *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QVector<QPair< ::qreal,QVariant> > *>(sipSrc);
}


extern "C" {static void *array_QVector_0600QPair_2400_0100QVariant(SIP_SSIZE_T);}
static void *array_QVector_0600QPair_2400_0100QVariant(SIP_SSIZE_T sipNrElem)
{
    return new QVector<QPair< ::qreal,QVariant> >[sipNrElem];
}


extern "C" {static void *copy_QVector_0600QPair_2400_0100QVariant(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0600QPair_2400_0100QVariant(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector<QPair< ::qreal,QVariant> >(reinterpret_cast<const QVector<QPair< ::qreal,QVariant> > *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0600QPair_2400_0100QVariant(void *, int);}
static void release_QVector_0600QPair_2400_0100QVariant(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QVector<QPair< ::qreal,QVariant> > *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QVector_0600QPair_2400_0100QVariant(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0600QPair_2400_0100QVariant(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector<QPair< ::qreal,QVariant> > **sipCppPtr = reinterpret_cast<QVector<QPair< ::qreal,QVariant> > **>(sipCppPtrV);

#line 280 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qvector.sip"
    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
    {
        if (!PyList_Check(sipPy))
            return 0;

        for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i)
        {
            PyObject *tup = PyList_GET_ITEM(sipPy, i);

            if (PyTuple_Size(tup) != 2)
                return 0;

            if (!sipCanConvertToType(PyTuple_GET_ITEM(tup, 1), sipType_QVariant, SIP_NOT_NONE))
                return 0;
        }

        return 1;
    }

    QVector<QPair<qreal, QVariant> > *qv = new QVector<QPair<qreal, QVariant> >;
 
    for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i)
    {
        PyObject *tup = PyList_GET_ITEM(sipPy, i);
        int state;
        QVariant *s;
        QPair<qreal, QVariant> p;

        p.first = PyFloat_AsDouble(PyTuple_GET_ITEM(tup, 0));

        s = reinterpret_cast<QVariant *>(sipConvertToType(PyTuple_GET_ITEM(tup, 1), sipType_QVariant, sipTransferObj, SIP_NOT_NONE, &state, sipIsErr));
 
        if (*sipIsErr)
        {
            sipReleaseType(s, sipType_QVariant, state);

            delete qv;
            return 0;
        }

        p.second = *s;

        qv->append(p);

        sipReleaseType(s, sipType_QVariant, state);
    }

    *sipCppPtr = qv;

    return sipGetState(sipTransferObj);
#line 126 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQVector0600QPair24000100QVariant.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0600QPair_2400_0100QVariant(void *, PyObject *);}
static PyObject *convertFrom_QVector_0600QPair_2400_0100QVariant(void *sipCppV, PyObject *sipTransferObj)
{
   QVector<QPair< ::qreal,QVariant> > *sipCpp = reinterpret_cast<QVector<QPair< ::qreal,QVariant> > *>(sipCppV);

#line 252 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qvector.sip"
    // Create the list.
    PyObject *l;

    if ((l = PyList_New(sipCpp->size())) == NULL)
        return NULL;

    // Set the list elements.
    for (int i = 0; i < sipCpp->size(); ++i)
    {
        const QPair<qreal, QVariant> &p = sipCpp->at(i);
        QVariant *pt = new QVariant(p.second);
        PyObject *pobj;

        if ((pobj = sipBuildResult(NULL, "(dN)", p.first, pt, sipType_QVariant, sipTransferObj)) == NULL)
        {
            Py_DECREF(l);
            delete pt;

            return NULL;
        }

        PyList_SET_ITEM(l, i, pobj);
    }

    return l;
#line 161 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQVector0600QPair24000100QVariant.cpp"
}


sipMappedTypeDef sipTypeDef_QtCore_QVector_0600QPair_2400_0100QVariant = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_961,     /* QVector<QPair<qreal,QVariant> > */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0600QPair_2400_0100QVariant,
    array_QVector_0600QPair_2400_0100QVariant,
    copy_QVector_0600QPair_2400_0100QVariant,
    release_QVector_0600QPair_2400_0100QVariant,
    convertTo_QVector_0600QPair_2400_0100QVariant,
    convertFrom_QVector_0600QPair_2400_0100QVariant
};

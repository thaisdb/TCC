/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qsequentialanimationgroup.sip"
#include <qsequentialanimationgroup.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"

#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qpauseanimation.sip"
#include <qpauseanimation.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qanimationgroup.sip"
#include <qanimationgroup.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 368 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 351 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 265 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 32 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 115 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 27 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtCore/sipQtCoreQSequentialAnimationGroup.cpp"


class sipQSequentialAnimationGroup : public  ::QSequentialAnimationGroup
{
public:
    sipQSequentialAnimationGroup( ::QObject*);
    virtual ~sipQSequentialAnimationGroup();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void updateDirection( ::QAbstractAnimation::Direction);
    void updateState( ::QAbstractAnimation::State, ::QAbstractAnimation::State);
    void updateCurrentTime(int);
    int duration() const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSequentialAnimationGroup(const sipQSequentialAnimationGroup &);
    sipQSequentialAnimationGroup &operator = (const sipQSequentialAnimationGroup &);

    char sipPyMethods[11];
};

sipQSequentialAnimationGroup::sipQSequentialAnimationGroup( ::QObject*a0):  ::QSequentialAnimationGroup(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSequentialAnimationGroup::~sipQSequentialAnimationGroup()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSequentialAnimationGroup::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QSequentialAnimationGroup);
}

int sipQSequentialAnimationGroup::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QSequentialAnimationGroup::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSequentialAnimationGroup,_c,_id,_a);

    return _id;
}

void *sipQSequentialAnimationGroup::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSequentialAnimationGroup, _clname)) ? this :  ::QSequentialAnimationGroup::qt_metacast(_clname);
}

void sipQSequentialAnimationGroup::updateDirection( ::QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_updateDirection);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::Direction);

    sipVH_QtCore_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSequentialAnimationGroup::updateState( ::QAbstractAnimation::State a0, ::QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_updateState);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractAnimation::State, ::QAbstractAnimation::State);

    sipVH_QtCore_8(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQSequentialAnimationGroup::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_updateCurrentTime);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::updateCurrentTime(a0);
        return;
    }

    extern void sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtCore_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQSequentialAnimationGroup::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_duration);

    if (!sipMeth)
        return  ::QSequentialAnimationGroup::duration();

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtCore_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQSequentialAnimationGroup::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QSequentialAnimationGroup::event(a0);

    extern bool sipVH_QtCore_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtCore_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQSequentialAnimationGroup::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QSequentialAnimationGroup::eventFilter(a0,a1);

    extern bool sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtCore_1(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQSequentialAnimationGroup::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtCore_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSequentialAnimationGroup::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtCore_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSequentialAnimationGroup::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtCore_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSequentialAnimationGroup::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQSequentialAnimationGroup::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QSequentialAnimationGroup::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtCore_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_addPause, "addPause(self, int) -> QPauseAnimation");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_addPause(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_addPause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp, &a0))
        {
             ::QPauseAnimation*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addPause(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPauseAnimation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_addPause, doc_QSequentialAnimationGroup_addPause);

    return NULL;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_insertPause, "insertPause(self, int, int) -> QPauseAnimation");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_insertPause(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_insertPause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp, &a0, &a1))
        {
             ::QPauseAnimation*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertPause(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPauseAnimation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_insertPause, doc_QSequentialAnimationGroup_insertPause);

    return NULL;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_currentAnimation, "currentAnimation(self) -> QAbstractAnimation");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_currentAnimation(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_currentAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp))
        {
             ::QAbstractAnimation*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentAnimation();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractAnimation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_currentAnimation, doc_QSequentialAnimationGroup_currentAnimation);

    return NULL;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_duration, "duration(self) -> int");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_duration(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSequentialAnimationGroup::duration() : sipCpp->duration());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_duration, doc_QSequentialAnimationGroup_duration);

    return NULL;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_event(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QSequentialAnimationGroup::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_event, doc_QSequentialAnimationGroup_event);

    return NULL;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_updateCurrentTime, "updateCurrentTime(self, int)");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_updateCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_updateCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QSequentialAnimationGroup::updateCurrentTime(a0) : sipCpp->updateCurrentTime(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_updateCurrentTime, doc_QSequentialAnimationGroup_updateCurrentTime);

    return NULL;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_updateState, "updateState(self, QAbstractAnimation.State, QAbstractAnimation.State)");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_updateState(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::State a0;
         ::QAbstractAnimation::State a1;
         ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEE", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp, sipType_QAbstractAnimation_State, &a0, sipType_QAbstractAnimation_State, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QSequentialAnimationGroup::updateState(a0,a1) : sipCpp->updateState(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_updateState, doc_QSequentialAnimationGroup_updateState);

    return NULL;
}


PyDoc_STRVAR(doc_QSequentialAnimationGroup_updateDirection, "updateDirection(self, QAbstractAnimation.Direction)");

extern "C" {static PyObject *meth_QSequentialAnimationGroup_updateDirection(PyObject *, PyObject *);}
static PyObject *meth_QSequentialAnimationGroup_updateDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractAnimation::Direction a0;
         ::QSequentialAnimationGroup *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QSequentialAnimationGroup, &sipCpp, sipType_QAbstractAnimation_Direction, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QSequentialAnimationGroup::updateDirection(a0) : sipCpp->updateDirection(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSequentialAnimationGroup, sipName_updateDirection, doc_QSequentialAnimationGroup_updateDirection);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QSequentialAnimationGroup(void *, const sipTypeDef *);}
static void *cast_QSequentialAnimationGroup(void *sipCppV, const sipTypeDef *targetType)
{
     ::QSequentialAnimationGroup *sipCpp = reinterpret_cast< ::QSequentialAnimationGroup *>(sipCppV);

    if (targetType == sipType_QAnimationGroup)
        return static_cast< ::QAnimationGroup *>(sipCpp);

    if (targetType == sipType_QAbstractAnimation)
        return static_cast< ::QAbstractAnimation *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSequentialAnimationGroup(void *, int);}
static void release_QSequentialAnimationGroup(void *sipCppV, int)
{
     ::QSequentialAnimationGroup *sipCpp = reinterpret_cast< ::QSequentialAnimationGroup *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSequentialAnimationGroup(sipSimpleWrapper *);}
static void dealloc_QSequentialAnimationGroup(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQSequentialAnimationGroup *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSequentialAnimationGroup(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QSequentialAnimationGroup(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSequentialAnimationGroup(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSequentialAnimationGroup *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSequentialAnimationGroup(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSequentialAnimationGroup[] = {{18, 255, 1}};


static PyMethodDef methods_QSequentialAnimationGroup[] = {
    {SIP_MLNAME_CAST(sipName_addPause), meth_QSequentialAnimationGroup_addPause, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_addPause)},
    {SIP_MLNAME_CAST(sipName_currentAnimation), meth_QSequentialAnimationGroup_currentAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_currentAnimation)},
    {SIP_MLNAME_CAST(sipName_duration), meth_QSequentialAnimationGroup_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_duration)},
    {SIP_MLNAME_CAST(sipName_event), meth_QSequentialAnimationGroup_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_event)},
    {SIP_MLNAME_CAST(sipName_insertPause), meth_QSequentialAnimationGroup_insertPause, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_insertPause)},
    {SIP_MLNAME_CAST(sipName_updateCurrentTime), meth_QSequentialAnimationGroup_updateCurrentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_updateCurrentTime)},
    {SIP_MLNAME_CAST(sipName_updateDirection), meth_QSequentialAnimationGroup_updateDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_updateDirection)},
    {SIP_MLNAME_CAST(sipName_updateState), meth_QSequentialAnimationGroup_updateState, METH_VARARGS, SIP_MLDOC_CAST(doc_QSequentialAnimationGroup_updateState)}
};

PyDoc_STRVAR(doc_QSequentialAnimationGroup, "\1QSequentialAnimationGroup(parent: QObject = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QSequentialAnimationGroup[] = {
    {"currentAnimationChanged(QAbstractAnimation*)", "\1currentAnimationChanged(self, QAbstractAnimation)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QSequentialAnimationGroup = {
    & ::QSequentialAnimationGroup::staticMetaObject,
    0,
    signals_QSequentialAnimationGroup
};


sipClassTypeDef sipTypeDef_QtCore_QSequentialAnimationGroup = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSequentialAnimationGroup,
        {0},
        &plugin_QSequentialAnimationGroup
    },
    {
        sipNameNr_QSequentialAnimationGroup,
        {0, 0, 1},
        8, methods_QSequentialAnimationGroup,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSequentialAnimationGroup,
    -1,
    -1,
    supers_QSequentialAnimationGroup,
    0,
    init_type_QSequentialAnimationGroup,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSequentialAnimationGroup,
    0,
    0,
    0,
    release_QSequentialAnimationGroup,
    cast_QSequentialAnimationGroup,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtScript.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtScript/qscriptcontext.sip"
#include <qscriptcontext.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScript/sipQtScriptQScriptContext.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScript/sipQtScriptQScriptContext.cpp"
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtScript/qscriptvalue.sip"
#include <qscriptvalue.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScript/sipQtScriptQScriptContext.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScript/sipQtScriptQScriptContext.cpp"
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtScript/qscriptengine.sip"
#include <qscriptengine.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScript/sipQtScriptQScriptContext.cpp"


PyDoc_STRVAR(doc_QScriptContext_parentContext, "parentContext(self) -> QScriptContext");

extern "C" {static PyObject *meth_QScriptContext_parentContext(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_parentContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptContext, &sipCpp))
        {
             ::QScriptContext*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parentContext();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QScriptContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_parentContext, doc_QScriptContext_parentContext);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_engine, "engine(self) -> QScriptEngine");

extern "C" {static PyObject *meth_QScriptContext_engine(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptContext, &sipCpp))
        {
             ::QScriptEngine*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->engine();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QScriptEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_engine, doc_QScriptContext_engine);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_state, "state(self) -> QScriptContext.ExecutionState");

extern "C" {static PyObject *meth_QScriptContext_state(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptContext, &sipCpp))
        {
             ::QScriptContext::ExecutionState sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QScriptContext_ExecutionState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_state, doc_QScriptContext_state);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_callee, "callee(self) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptContext_callee(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_callee(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptContext, &sipCpp))
        {
             ::QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QScriptValue(sipCpp->callee());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_callee, doc_QScriptContext_callee);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_argumentCount, "argumentCount(self) -> int");

extern "C" {static PyObject *meth_QScriptContext_argumentCount(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_argumentCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptContext, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->argumentCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_argumentCount, doc_QScriptContext_argumentCount);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_argument, "argument(self, int) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptContext_argument(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_argument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QScriptContext, &sipCpp, &a0))
        {
             ::QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QScriptValue(sipCpp->argument(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_argument, doc_QScriptContext_argument);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_argumentsObject, "argumentsObject(self) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptContext_argumentsObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_argumentsObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptContext, &sipCpp))
        {
             ::QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QScriptValue(sipCpp->argumentsObject());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_argumentsObject, doc_QScriptContext_argumentsObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_activationObject, "activationObject(self) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptContext_activationObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_activationObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptContext, &sipCpp))
        {
             ::QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QScriptValue(sipCpp->activationObject());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_activationObject, doc_QScriptContext_activationObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_setActivationObject, "setActivationObject(self, QScriptValue)");

extern "C" {static PyObject *meth_QScriptContext_setActivationObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_setActivationObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptValue* a0;
         ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptContext, &sipCpp, sipType_QScriptValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setActivationObject(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_setActivationObject, doc_QScriptContext_setActivationObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_thisObject, "thisObject(self) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptContext_thisObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_thisObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptContext, &sipCpp))
        {
             ::QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QScriptValue(sipCpp->thisObject());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_thisObject, doc_QScriptContext_thisObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_setThisObject, "setThisObject(self, QScriptValue)");

extern "C" {static PyObject *meth_QScriptContext_setThisObject(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_setThisObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptValue* a0;
         ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptContext, &sipCpp, sipType_QScriptValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setThisObject(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_setThisObject, doc_QScriptContext_setThisObject);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_isCalledAsConstructor, "isCalledAsConstructor(self) -> bool");

extern "C" {static PyObject *meth_QScriptContext_isCalledAsConstructor(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_isCalledAsConstructor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptContext, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCalledAsConstructor();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_isCalledAsConstructor, doc_QScriptContext_isCalledAsConstructor);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_backtrace, "backtrace(self) -> List[str]");

extern "C" {static PyObject *meth_QScriptContext_backtrace(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_backtrace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptContext, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->backtrace());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_backtrace, doc_QScriptContext_backtrace);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_throwValue, "throwValue(self, QScriptValue) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptContext_throwValue(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_throwValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptValue* a0;
         ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptContext, &sipCpp, sipType_QScriptValue, &a0))
        {
             ::QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QScriptValue(sipCpp->throwValue(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_throwValue, doc_QScriptContext_throwValue);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_throwError, "throwError(self, QScriptContext.Error, str) -> QScriptValue\n"
    "throwError(self, str) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptContext_throwError(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_throwError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QScriptContext::Error a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QScriptContext, &sipCpp, sipType_QScriptContext_Error, &a0, sipType_QString,&a1, &a1State))
        {
             ::QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QScriptValue(sipCpp->throwError(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QScriptContext, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QScriptValue(sipCpp->throwError(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_throwError, doc_QScriptContext_throwError);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptContext_toString, "toString(self) -> str");

extern "C" {static PyObject *meth_QScriptContext_toString(PyObject *, PyObject *);}
static PyObject *meth_QScriptContext_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptContext, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptContext, sipName_toString, doc_QScriptContext_toString);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScriptContext(void *, int);}
static void release_QScriptContext(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QScriptContext *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QScriptContext(sipSimpleWrapper *);}
static void dealloc_QScriptContext(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QScriptContext(sipGetAddress(sipSelf), 0);
    }
}


static PyMethodDef methods_QScriptContext[] = {
    {SIP_MLNAME_CAST(sipName_activationObject), meth_QScriptContext_activationObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_activationObject)},
    {SIP_MLNAME_CAST(sipName_argument), meth_QScriptContext_argument, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_argument)},
    {SIP_MLNAME_CAST(sipName_argumentCount), meth_QScriptContext_argumentCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_argumentCount)},
    {SIP_MLNAME_CAST(sipName_argumentsObject), meth_QScriptContext_argumentsObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_argumentsObject)},
    {SIP_MLNAME_CAST(sipName_backtrace), meth_QScriptContext_backtrace, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_backtrace)},
    {SIP_MLNAME_CAST(sipName_callee), meth_QScriptContext_callee, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_callee)},
    {SIP_MLNAME_CAST(sipName_engine), meth_QScriptContext_engine, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_engine)},
    {SIP_MLNAME_CAST(sipName_isCalledAsConstructor), meth_QScriptContext_isCalledAsConstructor, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_isCalledAsConstructor)},
    {SIP_MLNAME_CAST(sipName_parentContext), meth_QScriptContext_parentContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_parentContext)},
    {SIP_MLNAME_CAST(sipName_setActivationObject), meth_QScriptContext_setActivationObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_setActivationObject)},
    {SIP_MLNAME_CAST(sipName_setThisObject), meth_QScriptContext_setThisObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_setThisObject)},
    {SIP_MLNAME_CAST(sipName_state), meth_QScriptContext_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_state)},
    {SIP_MLNAME_CAST(sipName_thisObject), meth_QScriptContext_thisObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_thisObject)},
    {SIP_MLNAME_CAST(sipName_throwError), meth_QScriptContext_throwError, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_throwError)},
    {SIP_MLNAME_CAST(sipName_throwValue), meth_QScriptContext_throwValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_throwValue)},
    {SIP_MLNAME_CAST(sipName_toString), meth_QScriptContext_toString, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptContext_toString)}
};

static sipEnumMemberDef enummembers_QScriptContext[] = {
    {sipName_ExceptionState, static_cast<int>( ::QScriptContext::ExceptionState), 9},
    {sipName_NormalState, static_cast<int>( ::QScriptContext::NormalState), 9},
    {sipName_RangeError, static_cast<int>( ::QScriptContext::RangeError), 8},
    {sipName_ReferenceError, static_cast<int>( ::QScriptContext::ReferenceError), 8},
    {sipName_SyntaxError, static_cast<int>( ::QScriptContext::SyntaxError), 8},
    {sipName_TypeError, static_cast<int>( ::QScriptContext::TypeError), 8},
    {sipName_URIError, static_cast<int>( ::QScriptContext::URIError), 8},
    {sipName_UnknownError, static_cast<int>( ::QScriptContext::UnknownError), 8},
};


static pyqt4ClassPluginDef plugin_QScriptContext = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtScript_QScriptContext = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QScriptContext,
        {0},
        &plugin_QScriptContext
    },
    {
        sipNameNr_QScriptContext,
        {0, 0, 1},
        16, methods_QScriptContext,
        8, enummembers_QScriptContext,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QScriptContext,
    0,
    0,
    0,
    release_QScriptContext,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtScript.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtScript/qscriptvalueiterator.sip"
#include <qscriptvalueiterator.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScript/sipQtScriptQScriptValueIterator.cpp"

#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtScript/qscriptvalue.sip"
#include <qscriptvalue.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScript/sipQtScriptQScriptValueIterator.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtScript/qscriptstring.sip"
#include <qscriptstring.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScript/sipQtScriptQScriptValueIterator.cpp"
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtScript/qscriptvalue.sip"
#include <qscriptvalue.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScript/sipQtScriptQScriptValueIterator.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtScript/sipQtScriptQScriptValueIterator.cpp"


PyDoc_STRVAR(doc_QScriptValueIterator_hasNext, "hasNext(self) -> bool");

extern "C" {static PyObject *meth_QScriptValueIterator_hasNext(PyObject *, PyObject *);}
static PyObject *meth_QScriptValueIterator_hasNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValueIterator, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasNext();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValueIterator, sipName_hasNext, doc_QScriptValueIterator_hasNext);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValueIterator_next, "next(self)");

extern "C" {static PyObject *meth_QScriptValueIterator_next(PyObject *, PyObject *);}
static PyObject *meth_QScriptValueIterator_next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QScriptValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValueIterator, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->next();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValueIterator, sipName_next, doc_QScriptValueIterator_next);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValueIterator_hasPrevious, "hasPrevious(self) -> bool");

extern "C" {static PyObject *meth_QScriptValueIterator_hasPrevious(PyObject *, PyObject *);}
static PyObject *meth_QScriptValueIterator_hasPrevious(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValueIterator, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasPrevious();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValueIterator, sipName_hasPrevious, doc_QScriptValueIterator_hasPrevious);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValueIterator_previous, "previous(self)");

extern "C" {static PyObject *meth_QScriptValueIterator_previous(PyObject *, PyObject *);}
static PyObject *meth_QScriptValueIterator_previous(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QScriptValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValueIterator, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->previous();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValueIterator, sipName_previous, doc_QScriptValueIterator_previous);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValueIterator_name, "name(self) -> str");

extern "C" {static PyObject *meth_QScriptValueIterator_name(PyObject *, PyObject *);}
static PyObject *meth_QScriptValueIterator_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValueIterator, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValueIterator, sipName_name, doc_QScriptValueIterator_name);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValueIterator_value, "value(self) -> QScriptValue");

extern "C" {static PyObject *meth_QScriptValueIterator_value(PyObject *, PyObject *);}
static PyObject *meth_QScriptValueIterator_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValueIterator, &sipCpp))
        {
             ::QScriptValue*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QScriptValue(sipCpp->value());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValueIterator, sipName_value, doc_QScriptValueIterator_value);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValueIterator_setValue, "setValue(self, QScriptValue)");

extern "C" {static PyObject *meth_QScriptValueIterator_setValue(PyObject *, PyObject *);}
static PyObject *meth_QScriptValueIterator_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptValue* a0;
         ::QScriptValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QScriptValueIterator, &sipCpp, sipType_QScriptValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setValue(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValueIterator, sipName_setValue, doc_QScriptValueIterator_setValue);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValueIterator_flags, "flags(self) -> QScriptValue.PropertyFlags");

extern "C" {static PyObject *meth_QScriptValueIterator_flags(PyObject *, PyObject *);}
static PyObject *meth_QScriptValueIterator_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValueIterator, &sipCpp))
        {
             ::QScriptValue::PropertyFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QScriptValue::PropertyFlags(sipCpp->flags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptValue_PropertyFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValueIterator, sipName_flags, doc_QScriptValueIterator_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValueIterator_remove, "remove(self)");

extern "C" {static PyObject *meth_QScriptValueIterator_remove(PyObject *, PyObject *);}
static PyObject *meth_QScriptValueIterator_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QScriptValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValueIterator, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->remove();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValueIterator, sipName_remove, doc_QScriptValueIterator_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValueIterator_toFront, "toFront(self)");

extern "C" {static PyObject *meth_QScriptValueIterator_toFront(PyObject *, PyObject *);}
static PyObject *meth_QScriptValueIterator_toFront(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QScriptValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValueIterator, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->toFront();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValueIterator, sipName_toFront, doc_QScriptValueIterator_toFront);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValueIterator_toBack, "toBack(self)");

extern "C" {static PyObject *meth_QScriptValueIterator_toBack(PyObject *, PyObject *);}
static PyObject *meth_QScriptValueIterator_toBack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QScriptValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValueIterator, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->toBack();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValueIterator, sipName_toBack, doc_QScriptValueIterator_toBack);

    return NULL;
}


PyDoc_STRVAR(doc_QScriptValueIterator_scriptName, "scriptName(self) -> QScriptString");

extern "C" {static PyObject *meth_QScriptValueIterator_scriptName(PyObject *, PyObject *);}
static PyObject *meth_QScriptValueIterator_scriptName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QScriptValueIterator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QScriptValueIterator, &sipCpp))
        {
             ::QScriptString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QScriptString(sipCpp->scriptName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QScriptString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScriptValueIterator, sipName_scriptName, doc_QScriptValueIterator_scriptName);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScriptValueIterator(void *, int);}
static void release_QScriptValueIterator(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QScriptValueIterator *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QScriptValueIterator(sipSimpleWrapper *);}
static void dealloc_QScriptValueIterator(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QScriptValueIterator(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QScriptValueIterator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QScriptValueIterator(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QScriptValueIterator *sipCpp = 0;

    {
        const  ::QScriptValue* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QScriptValue, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QScriptValueIterator(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QScriptValueIterator[] = {
    {SIP_MLNAME_CAST(sipName_flags), meth_QScriptValueIterator_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValueIterator_flags)},
    {SIP_MLNAME_CAST(sipName_hasNext), meth_QScriptValueIterator_hasNext, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValueIterator_hasNext)},
    {SIP_MLNAME_CAST(sipName_hasPrevious), meth_QScriptValueIterator_hasPrevious, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValueIterator_hasPrevious)},
    {SIP_MLNAME_CAST(sipName_name), meth_QScriptValueIterator_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValueIterator_name)},
    {SIP_MLNAME_CAST(sipName_next), meth_QScriptValueIterator_next, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValueIterator_next)},
    {SIP_MLNAME_CAST(sipName_previous), meth_QScriptValueIterator_previous, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValueIterator_previous)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QScriptValueIterator_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValueIterator_remove)},
    {SIP_MLNAME_CAST(sipName_scriptName), meth_QScriptValueIterator_scriptName, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValueIterator_scriptName)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QScriptValueIterator_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValueIterator_setValue)},
    {SIP_MLNAME_CAST(sipName_toBack), meth_QScriptValueIterator_toBack, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValueIterator_toBack)},
    {SIP_MLNAME_CAST(sipName_toFront), meth_QScriptValueIterator_toFront, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValueIterator_toFront)},
    {SIP_MLNAME_CAST(sipName_value), meth_QScriptValueIterator_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QScriptValueIterator_value)}
};

PyDoc_STRVAR(doc_QScriptValueIterator, "\1QScriptValueIterator(QScriptValue)");


static pyqt4ClassPluginDef plugin_QScriptValueIterator = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtScript_QScriptValueIterator = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QScriptValueIterator,
        {0},
        &plugin_QScriptValueIterator
    },
    {
        sipNameNr_QScriptValueIterator,
        {0, 0, 1},
        12, methods_QScriptValueIterator,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QScriptValueIterator,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QScriptValueIterator,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QScriptValueIterator,
    0,
    0,
    0,
    release_QScriptValueIterator,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

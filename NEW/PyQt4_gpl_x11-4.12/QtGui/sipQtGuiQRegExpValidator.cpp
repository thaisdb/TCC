/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 173 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQRegExpValidator.cpp"


class sipQRegExpValidator : public  ::QRegExpValidator
{
public:
    sipQRegExpValidator( ::QObject*);
    sipQRegExpValidator(const  ::QRegExp&, ::QObject*);
    virtual ~sipQRegExpValidator();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
     ::QValidator::State validate( ::QString&,int&) const;
    void fixup( ::QString&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQRegExpValidator(const sipQRegExpValidator &);
    sipQRegExpValidator &operator = (const sipQRegExpValidator &);

    char sipPyMethods[11];
};

sipQRegExpValidator::sipQRegExpValidator( ::QObject*a0):  ::QRegExpValidator(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQRegExpValidator::sipQRegExpValidator(const  ::QRegExp& a0, ::QObject*a1):  ::QRegExpValidator(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQRegExpValidator::~sipQRegExpValidator()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQRegExpValidator::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QRegExpValidator);
}

int sipQRegExpValidator::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QRegExpValidator::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QRegExpValidator,_c,_id,_a);

    return _id;
}

void *sipQRegExpValidator::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QRegExpValidator, _clname)) ? this :  ::QRegExpValidator::qt_metacast(_clname);
}

void sipQRegExpValidator::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QRegExpValidator::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQRegExpValidator::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QRegExpValidator::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQRegExpValidator::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QRegExpValidator::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQRegExpValidator::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QRegExpValidator::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQRegExpValidator::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QRegExpValidator::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQRegExpValidator::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QRegExpValidator::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQRegExpValidator::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QRegExpValidator::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QValidator::State sipQRegExpValidator::validate( ::QString& a0,int& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_validate);

    if (!sipMeth)
        return  ::QRegExpValidator::validate(a0,a1);

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        extern  ::QValidator::State sipVH_QtGui_88(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&,int&);

        return sipVH_QtGui_88(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        extern  ::QValidator::State sipVH_QtGui_89(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&,int&);

        return sipVH_QtGui_89(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
    }

    return  ::QRegExpValidator::validate(a0,a1);
}

void sipQRegExpValidator::fixup( ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_fixup);

    if (!sipMeth)
    {
         ::QRegExpValidator::fixup(a0);
        return;
    }

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        extern void sipVH_QtGui_90(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&);

        sipVH_QtGui_90(sipGILState, 0, sipPySelf, sipMeth, a0);
        return;
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        extern void sipVH_QtGui_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&);

        sipVH_QtGui_91(sipGILState, 0, sipPySelf, sipMeth, a0);
        return;
    }

     ::QRegExpValidator::fixup(a0);
}


PyDoc_STRVAR(doc_QRegExpValidator_validate, "validate(self, QString, int) -> Tuple[QValidator.State, int]");

extern "C" {static PyObject *meth_QRegExpValidator_validate(PyObject *, PyObject *);}
static PyObject *meth_QRegExpValidator_validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
         ::QString* a0;
        int a0State = 0;
        int a1;
        const  ::QRegExpValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QRegExpValidator, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
             ::QValidator::State sipRes;
            PyObject *sipResObj;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QRegExpValidator::validate(*a0,a1) : sipCpp->validate(*a0,a1));
            Py_END_ALLOW_THREADS

            sipResObj = sipBuildResult(0,"(FDi)",sipRes,sipType_QValidator_State,a0,sipType_QString,NULL,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
         ::QString* a0;
        int a1;
        const  ::QRegExpValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9i", &sipSelf, sipType_QRegExpValidator, &sipCpp, sipType_QString,&a0, &a1))
        {
             ::QValidator::State sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QRegExpValidator::validate(*a0,a1) : sipCpp->validate(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(Fi)",sipRes,sipType_QValidator_State,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExpValidator, sipName_validate, doc_QRegExpValidator_validate);

    return NULL;
}


PyDoc_STRVAR(doc_QRegExpValidator_setRegExp, "setRegExp(self, QRegExp)");

extern "C" {static PyObject *meth_QRegExpValidator_setRegExp(PyObject *, PyObject *);}
static PyObject *meth_QRegExpValidator_setRegExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRegExp* a0;
         ::QRegExpValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QRegExpValidator, &sipCpp, sipType_QRegExp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRegExp(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExpValidator, sipName_setRegExp, doc_QRegExpValidator_setRegExp);

    return NULL;
}


PyDoc_STRVAR(doc_QRegExpValidator_regExp, "regExp(self) -> QRegExp");

extern "C" {static PyObject *meth_QRegExpValidator_regExp(PyObject *, PyObject *);}
static PyObject *meth_QRegExpValidator_regExp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRegExpValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRegExpValidator, &sipCpp))
        {
             ::QRegExp*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRegExp(sipCpp->regExp());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegExp,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRegExpValidator, sipName_regExp, doc_QRegExpValidator_regExp);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QRegExpValidator(void *, const sipTypeDef *);}
static void *cast_QRegExpValidator(void *sipCppV, const sipTypeDef *targetType)
{
     ::QRegExpValidator *sipCpp = reinterpret_cast< ::QRegExpValidator *>(sipCppV);

    if (targetType == sipType_QValidator)
        return static_cast< ::QValidator *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRegExpValidator(void *, int);}
static void release_QRegExpValidator(void *sipCppV, int)
{
     ::QRegExpValidator *sipCpp = reinterpret_cast< ::QRegExpValidator *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QRegExpValidator(sipSimpleWrapper *);}
static void dealloc_QRegExpValidator(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQRegExpValidator *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QRegExpValidator(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QRegExpValidator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRegExpValidator(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQRegExpValidator *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQRegExpValidator(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QRegExp* a0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QRegExp, &a0, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQRegExpValidator(*a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QRegExpValidator[] = {{736, 255, 1}};


static PyMethodDef methods_QRegExpValidator[] = {
    {SIP_MLNAME_CAST(sipName_regExp), meth_QRegExpValidator_regExp, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExpValidator_regExp)},
    {SIP_MLNAME_CAST(sipName_setRegExp), meth_QRegExpValidator_setRegExp, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExpValidator_setRegExp)},
    {SIP_MLNAME_CAST(sipName_validate), meth_QRegExpValidator_validate, METH_VARARGS, SIP_MLDOC_CAST(doc_QRegExpValidator_validate)}
};

PyDoc_STRVAR(doc_QRegExpValidator, "\1QRegExpValidator(parent: QObject = None)\n"
    "QRegExpValidator(QRegExp, parent: QObject = None)");


static pyqt4ClassPluginDef plugin_QRegExpValidator = {
    & ::QRegExpValidator::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QRegExpValidator = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QRegExpValidator,
        {0},
        &plugin_QRegExpValidator
    },
    {
        sipNameNr_QRegExpValidator,
        {0, 0, 1},
        3, methods_QRegExpValidator,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QRegExpValidator,
    -1,
    -1,
    supers_QRegExpValidator,
    0,
    init_type_QRegExpValidator,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QRegExpValidator,
    0,
    0,
    0,
    release_QRegExpValidator,
    cast_QRegExpValidator,
    0,
    0,
    0,
    0,
    0,
    0
};

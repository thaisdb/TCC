/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 28 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"
#line 76 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"


class sipQLayout : public  ::QLayout
{
public:
    sipQLayout( ::QWidget*);
    sipQLayout();
    virtual ~sipQLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int count() const;
    int indexOf( ::QWidget*) const;
     ::QLayoutItem* takeAt(int);
     ::QLayoutItem* itemAt(int) const;
    void addItem( ::QLayoutItem*);
     ::QSize sizeHint() const;
     ::QSize minimumSize() const;
     ::QSize maximumSize() const;
     ::Qt::Orientations expandingDirections() const;
    void setGeometry(const  ::QRect&);
     ::QRect geometry() const;
    bool isEmpty() const;
    bool hasHeightForWidth() const;
    int heightForWidth(int) const;
    int minimumHeightForWidth(int) const;
    void invalidate();
     ::QWidget* widget();
     ::QLayout* layout();
     ::QSpacerItem* spacerItem();
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLayout(const sipQLayout &);
    sipQLayout &operator = (const sipQLayout &);

    char sipPyMethods[26];
};

sipQLayout::sipQLayout( ::QWidget*a0):  ::QLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLayout::sipQLayout():  ::QLayout(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLayout::~sipQLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQLayout::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QLayout);
}

int sipQLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QLayout,_c,_id,_a);

    return _id;
}

void *sipQLayout::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QLayout, _clname)) ? this :  ::QLayout::qt_metacast(_clname);
}

int sipQLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QLayout,sipName_count);

    if (!sipMeth)
        return 0;

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQLayout::indexOf( ::QWidget*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_indexOf);

    if (!sipMeth)
        return  ::QLayout::indexOf(a0);

    extern int sipVH_QtGui_114(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    return sipVH_QtGui_114(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QLayoutItem* sipQLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QLayout,sipName_takeAt);

    if (!sipMeth)
        return 0;

    extern  ::QLayoutItem* sipVH_QtGui_113(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_113(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QLayoutItem* sipQLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_QLayout,sipName_itemAt);

    if (!sipMeth)
        return 0;

    extern  ::QLayoutItem* sipVH_QtGui_112(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_112(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLayout::addItem( ::QLayoutItem*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QLayout,sipName_addItem);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_111(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QLayoutItem*);

    sipVH_QtGui_111(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSize sipQLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,sipName_QLayout,sipName_sizeHint);

    if (!sipMeth)
        return  ::QSize();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_minimumSize);

    if (!sipMeth)
        return  ::QLayout::minimumSize();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_maximumSize);

    if (!sipMeth)
        return  ::QLayout::maximumSize();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::Qt::Orientations sipQLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_expandingDirections);

    if (!sipMeth)
        return  ::QLayout::expandingDirections();

    extern  ::Qt::Orientations sipVH_QtGui_105(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_105(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQLayout::setGeometry(const  ::QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setGeometry);

    if (!sipMeth)
    {
         ::QLayout::setGeometry(a0);
        return;
    }

    extern void sipVH_QtGui_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect&);

    sipVH_QtGui_106(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QRect sipQLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_geometry);

    if (!sipMeth)
        return  ::QLayout::geometry();

    extern  ::QRect sipVH_QtGui_107(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_107(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_isEmpty);

    if (!sipMeth)
        return  ::QLayout::isEmpty();

    extern bool sipVH_QtGui_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_67(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QLayout::hasHeightForWidth();

    extern bool sipVH_QtGui_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_67(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QLayout::heightForWidth(a0);

    extern int sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_minimumHeightForWidth);

    if (!sipMeth)
        return  ::QLayout::minimumHeightForWidth(a0);

    extern int sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_invalidate);

    if (!sipMeth)
    {
         ::QLayout::invalidate();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QWidget* sipQLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_widget);

    if (!sipMeth)
        return  ::QLayout::widget();

    extern  ::QWidget* sipVH_QtGui_108(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_108(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QLayout* sipQLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_layout);

    if (!sipMeth)
        return  ::QLayout::layout();

    extern  ::QLayout* sipVH_QtGui_109(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_109(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSpacerItem* sipQLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_spacerItem);

    if (!sipMeth)
        return  ::QLayout::spacerItem();

    extern  ::QSpacerItem* sipVH_QtGui_110(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_110(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQLayout::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QLayout::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQLayout::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QLayout::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQLayout::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QLayout::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLayout::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QLayout::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLayout::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QLayout::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLayout::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QLayout::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQLayout::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QLayout::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QLayout_margin, "margin(self) -> int");

extern "C" {static PyObject *meth_QLayout_margin(PyObject *, PyObject *);}
static PyObject *meth_QLayout_margin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->margin();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_margin, doc_QLayout_margin);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_spacing, "spacing(self) -> int");

extern "C" {static PyObject *meth_QLayout_spacing(PyObject *, PyObject *);}
static PyObject *meth_QLayout_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->spacing();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_spacing, doc_QLayout_spacing);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setMargin, "setMargin(self, int)");

extern "C" {static PyObject *meth_QLayout_setMargin(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMargin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setMargin, doc_QLayout_setMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setSpacing, "setSpacing(self, int)");

extern "C" {static PyObject *meth_QLayout_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setSpacing, doc_QLayout_setSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setAlignment, "setAlignment(self, QWidget, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool\n"
    "setAlignment(self, QLayout, Union[Qt.Alignment, Qt.AlignmentFlag]) -> bool\n"
    "setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QLayout_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
         ::Qt::Alignment* a1;
        int a1State = 0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_QLayout, &sipCpp, sipType_QWidget, &a0, sipType_Qt_Alignment, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setAlignment(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_Alignment,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QLayout* a0;
         ::Qt::Alignment* a1;
        int a1State = 0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_QLayout, &sipCpp, sipType_QLayout, &a0, sipType_Qt_Alignment, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setAlignment(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_Alignment,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLayout, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlignment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setAlignment, doc_QLayout_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setSizeConstraint, "setSizeConstraint(self, QLayout.SizeConstraint)");

extern "C" {static PyObject *meth_QLayout_setSizeConstraint(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setSizeConstraint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLayout::SizeConstraint a0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLayout, &sipCpp, sipType_QLayout_SizeConstraint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSizeConstraint(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setSizeConstraint, doc_QLayout_setSizeConstraint);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_sizeConstraint, "sizeConstraint(self) -> QLayout.SizeConstraint");

extern "C" {static PyObject *meth_QLayout_sizeConstraint(PyObject *, PyObject *);}
static PyObject *meth_QLayout_sizeConstraint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
             ::QLayout::SizeConstraint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sizeConstraint();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QLayout_SizeConstraint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_sizeConstraint, doc_QLayout_sizeConstraint);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setMenuBar, "setMenuBar(self, QWidget)");

extern "C" {static PyObject *meth_QLayout_setMenuBar(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setMenuBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
        PyObject *a0Wrapper;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLayout, &sipCpp, &a0Wrapper, sipType_QWidget, &a0))
        {
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setMenuBar(a0);
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (a0 && parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
            
            if (py_parent)
                sipTransferTo(a0Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows setMenuBar(QWidget()).
            sipTransferTo(a0Wrapper, sipSelf);
        }
#line 889 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setMenuBar, doc_QLayout_setMenuBar);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_menuBar, "menuBar(self) -> QWidget");

extern "C" {static PyObject *meth_QLayout_menuBar(PyObject *, PyObject *);}
static PyObject *meth_QLayout_menuBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
             ::QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->menuBar();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_menuBar, doc_QLayout_menuBar);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_parentWidget, "parentWidget(self) -> QWidget");

extern "C" {static PyObject *meth_QLayout_parentWidget(PyObject *, PyObject *);}
static PyObject *meth_QLayout_parentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
             ::QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parentWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_parentWidget, doc_QLayout_parentWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_invalidate, "invalidate(self)");

extern "C" {static PyObject *meth_QLayout_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QLayout_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QLayout::invalidate() : sipCpp->invalidate());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_invalidate, doc_QLayout_invalidate);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_geometry, "geometry(self) -> QRect");

extern "C" {static PyObject *meth_QLayout_geometry(PyObject *, PyObject *);}
static PyObject *meth_QLayout_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect((sipSelfWasArg ? sipCpp-> ::QLayout::geometry() : sipCpp->geometry()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_geometry, doc_QLayout_geometry);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_activate, "activate(self) -> bool");

extern "C" {static PyObject *meth_QLayout_activate(PyObject *, PyObject *);}
static PyObject *meth_QLayout_activate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->activate();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_activate, doc_QLayout_activate);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_update, "update(self)");

extern "C" {static PyObject *meth_QLayout_update(PyObject *, PyObject *);}
static PyObject *meth_QLayout_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->update();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_update, doc_QLayout_update);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_addWidget, "addWidget(self, QWidget)");

extern "C" {static PyObject *meth_QLayout_addWidget(PyObject *, PyObject *);}
static PyObject *meth_QLayout_addWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
        PyObject *a0Wrapper;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLayout, &sipCpp, &a0Wrapper, sipType_QWidget, &a0))
        {
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->addWidget(a0);
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
            
            if (py_parent)
                sipTransferTo(a0Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows addWidget(QWidget()).
            sipTransferTo(a0Wrapper, sipSelf);
        }
#line 1119 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_addWidget, doc_QLayout_addWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_addItem, "addItem(self, QLayoutItem)");

extern "C" {static PyObject *meth_QLayout_addItem(PyObject *, PyObject *);}
static PyObject *meth_QLayout_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QLayoutItem* a0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QLayout, &sipCpp, sipType_QLayoutItem, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QLayout, sipName_addItem);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->addItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_addItem, doc_QLayout_addItem);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_removeWidget, "removeWidget(self, QWidget)");

extern "C" {static PyObject *meth_QLayout_removeWidget(PyObject *, PyObject *);}
static PyObject *meth_QLayout_removeWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QLayout, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_removeWidget, doc_QLayout_removeWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_removeItem, "removeItem(self, QLayoutItem)");

extern "C" {static PyObject *meth_QLayout_removeItem(PyObject *, PyObject *);}
static PyObject *meth_QLayout_removeItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLayoutItem* a0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QLayout, &sipCpp, sipType_QLayoutItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_removeItem, doc_QLayout_removeItem);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_expandingDirections, "expandingDirections(self) -> Qt.Orientations");

extern "C" {static PyObject *meth_QLayout_expandingDirections(PyObject *, PyObject *);}
static PyObject *meth_QLayout_expandingDirections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
             ::Qt::Orientations*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Qt::Orientations((sipSelfWasArg ? sipCpp-> ::QLayout::expandingDirections() : sipCpp->expandingDirections()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_expandingDirections, doc_QLayout_expandingDirections);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_minimumSize, "minimumSize(self) -> QSize");

extern "C" {static PyObject *meth_QLayout_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QLayout::minimumSize() : sipCpp->minimumSize()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_minimumSize, doc_QLayout_minimumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_maximumSize, "maximumSize(self) -> QSize");

extern "C" {static PyObject *meth_QLayout_maximumSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_maximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QLayout::maximumSize() : sipCpp->maximumSize()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_maximumSize, doc_QLayout_maximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setGeometry, "setGeometry(self, QRect)");

extern "C" {static PyObject *meth_QLayout_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRect* a0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLayout, &sipCpp, sipType_QRect, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QLayout::setGeometry(*a0) : sipCpp->setGeometry(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setGeometry, doc_QLayout_setGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_itemAt, "itemAt(self, int) -> QLayoutItem");

extern "C" {static PyObject *meth_QLayout_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QLayout_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLayout, &sipCpp, &a0))
        {
             ::QLayoutItem*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QLayout, sipName_itemAt);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAt(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLayoutItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_itemAt, doc_QLayout_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_takeAt, "takeAt(self, int) -> QLayoutItem");

extern "C" {static PyObject *meth_QLayout_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QLayout_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLayout, &sipCpp, &a0))
        {
             ::QLayoutItem*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QLayout, sipName_takeAt);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeAt(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLayoutItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_takeAt, doc_QLayout_takeAt);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_indexOf, "indexOf(self, QWidget) -> int");

extern "C" {static PyObject *meth_QLayout_indexOf(PyObject *, PyObject *);}
static PyObject *meth_QLayout_indexOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWidget* a0;
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QLayout, &sipCpp, sipType_QWidget, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QLayout::indexOf(a0) : sipCpp->indexOf(a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_indexOf, doc_QLayout_indexOf);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_count, "count(self) -> int");

extern "C" {static PyObject *meth_QLayout_count(PyObject *, PyObject *);}
static PyObject *meth_QLayout_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QLayout, sipName_count);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_count, doc_QLayout_count);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QLayout_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QLayout_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QLayout::isEmpty() : sipCpp->isEmpty());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_isEmpty, doc_QLayout_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_totalHeightForWidth, "totalHeightForWidth(self, int) -> int");

extern "C" {static PyObject *meth_QLayout_totalHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QLayout_totalHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLayout, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->totalHeightForWidth(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_totalHeightForWidth, doc_QLayout_totalHeightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_totalMinimumSize, "totalMinimumSize(self) -> QSize");

extern "C" {static PyObject *meth_QLayout_totalMinimumSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_totalMinimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize(sipCpp->totalMinimumSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_totalMinimumSize, doc_QLayout_totalMinimumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_totalMaximumSize, "totalMaximumSize(self) -> QSize");

extern "C" {static PyObject *meth_QLayout_totalMaximumSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_totalMaximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize(sipCpp->totalMaximumSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_totalMaximumSize, doc_QLayout_totalMaximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_totalSizeHint, "totalSizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QLayout_totalSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLayout_totalSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize(sipCpp->totalSizeHint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_totalSizeHint, doc_QLayout_totalSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_layout, "layout(self) -> QLayout");

extern "C" {static PyObject *meth_QLayout_layout(PyObject *, PyObject *);}
static PyObject *meth_QLayout_layout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
             ::QLayout*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QLayout::layout() : sipCpp->layout());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLayout,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_layout, doc_QLayout_layout);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setEnabled, "setEnabled(self, bool)");

extern "C" {static PyObject *meth_QLayout_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setEnabled, doc_QLayout_setEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_isEnabled, "isEnabled(self) -> bool");

extern "C" {static PyObject *meth_QLayout_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLayout_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_isEnabled, doc_QLayout_isEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_closestAcceptableSize, "closestAcceptableSize(QWidget, QSize) -> QSize");

extern "C" {static PyObject *meth_QLayout_closestAcceptableSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_closestAcceptableSize(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWidget* a0;
        const  ::QSize* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J9", sipType_QWidget, &a0, sipType_QSize, &a1))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize( ::QLayout::closestAcceptableSize(a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_closestAcceptableSize, doc_QLayout_closestAcceptableSize);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_widgetEvent, "widgetEvent(self, QEvent)");

extern "C" {static PyObject *meth_QLayout_widgetEvent(PyObject *, PyObject *);}
static PyObject *meth_QLayout_widgetEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QEvent* a0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLayout, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->widgetEvent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_widgetEvent, doc_QLayout_widgetEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_childEvent, "childEvent(self, QChildEvent)");

extern "C" {static PyObject *meth_QLayout_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QLayout_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QLayout, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QLayout::childEvent(a0) : sipCpp->childEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_childEvent, doc_QLayout_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_addChildLayout, "addChildLayout(self, QLayout)");

extern "C" {static PyObject *meth_QLayout_addChildLayout(PyObject *, PyObject *);}
static PyObject *meth_QLayout_addChildLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QLayout* a0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ:", &sipSelf, sipType_QLayout, &sipCpp, sipType_QLayout, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addChildLayout(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_addChildLayout, doc_QLayout_addChildLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_addChildWidget, "addChildWidget(self, QWidget)");

extern "C" {static PyObject *meth_QLayout_addChildWidget(PyObject *, PyObject *);}
static PyObject *meth_QLayout_addChildWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
        PyObject *a0Wrapper;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p@J8", &sipSelf, sipType_QLayout, &sipCpp, &a0Wrapper, sipType_QWidget, &a0))
        {
#line 133 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipCpp->addChildWidget(a0);
        #else
        sipCpp->sipProtect_addChildWidget(a0);
        #endif
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
        
            if (py_parent)
                sipTransferTo(a0Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows
            // addChildWidget(QWidget()).
            sipTransferTo(a0Wrapper, sipSelf);
        }
#line 1905 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_addChildWidget, doc_QLayout_addChildWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_alignmentRect, "alignmentRect(self, QRect) -> QRect");

extern "C" {static PyObject *meth_QLayout_alignmentRect(PyObject *, PyObject *);}
static PyObject *meth_QLayout_alignmentRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QRect* a0;
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QLayout, &sipCpp, sipType_QRect, &a0))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect(sipCpp->alignmentRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_alignmentRect, doc_QLayout_alignmentRect);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setContentsMargins, "setContentsMargins(self, int, int, int, int)\n"
    "setContentsMargins(self, QMargins)");

extern "C" {static PyObject *meth_QLayout_setContentsMargins(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setContentsMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QLayout, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContentsMargins(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QMargins* a0;
         ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLayout, &sipCpp, sipType_QMargins, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContentsMargins(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setContentsMargins, doc_QLayout_setContentsMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_getContentsMargins, "getContentsMargins(self) -> Tuple[int, int, int, int]");

extern "C" {static PyObject *meth_QLayout_getContentsMargins(PyObject *, PyObject *);}
static PyObject *meth_QLayout_getContentsMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getContentsMargins(&a0,&a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_getContentsMargins, doc_QLayout_getContentsMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_contentsRect, "contentsRect(self) -> QRect");

extern "C" {static PyObject *meth_QLayout_contentsRect(PyObject *, PyObject *);}
static PyObject *meth_QLayout_contentsRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect(sipCpp->contentsRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_contentsRect, doc_QLayout_contentsRect);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_contentsMargins, "contentsMargins(self) -> QMargins");

extern "C" {static PyObject *meth_QLayout_contentsMargins(PyObject *, PyObject *);}
static PyObject *meth_QLayout_contentsMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
             ::QMargins*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QMargins(sipCpp->contentsMargins());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMargins,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_contentsMargins, doc_QLayout_contentsMargins);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QLayout___len__(PyObject *);}
static SIP_SSIZE_T slot_QLayout___len__(PyObject *sipSelf)
{
     ::QLayout *sipCpp = reinterpret_cast< ::QLayout *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLayout));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 2107 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQLayout.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QLayout(void *, const sipTypeDef *);}
static void *cast_QLayout(void *sipCppV, const sipTypeDef *targetType)
{
     ::QLayout *sipCpp = reinterpret_cast< ::QLayout *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QLayoutItem)
        return static_cast< ::QLayoutItem *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLayout(void *, int);}
static void release_QLayout(void *sipCppV, int)
{
     ::QLayout *sipCpp = reinterpret_cast< ::QLayout *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QLayout(sipSimpleWrapper *);}
static void dealloc_QLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQLayout *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QLayout(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLayout *sipCpp = 0;

    {
         ::QWidget* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQLayout(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQLayout();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLayout[] = {{34, 0, 0}, {277, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QLayout[] = {
    {(void *)slot_QLayout___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLayout[] = {
    {SIP_MLNAME_CAST(sipName_activate), meth_QLayout_activate, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_activate)},
    {SIP_MLNAME_CAST(sipName_addChildLayout), meth_QLayout_addChildLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_addChildLayout)},
    {SIP_MLNAME_CAST(sipName_addChildWidget), meth_QLayout_addChildWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_addChildWidget)},
    {SIP_MLNAME_CAST(sipName_addItem), meth_QLayout_addItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_addItem)},
    {SIP_MLNAME_CAST(sipName_addWidget), meth_QLayout_addWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_addWidget)},
    {SIP_MLNAME_CAST(sipName_alignmentRect), meth_QLayout_alignmentRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_alignmentRect)},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QLayout_childEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_childEvent)},
    {SIP_MLNAME_CAST(sipName_closestAcceptableSize), meth_QLayout_closestAcceptableSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_closestAcceptableSize)},
    {SIP_MLNAME_CAST(sipName_contentsMargins), meth_QLayout_contentsMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_contentsMargins)},
    {SIP_MLNAME_CAST(sipName_contentsRect), meth_QLayout_contentsRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_contentsRect)},
    {SIP_MLNAME_CAST(sipName_count), meth_QLayout_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_count)},
    {SIP_MLNAME_CAST(sipName_expandingDirections), meth_QLayout_expandingDirections, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_expandingDirections)},
    {SIP_MLNAME_CAST(sipName_geometry), meth_QLayout_geometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_geometry)},
    {SIP_MLNAME_CAST(sipName_getContentsMargins), meth_QLayout_getContentsMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_getContentsMargins)},
    {SIP_MLNAME_CAST(sipName_indexOf), meth_QLayout_indexOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_indexOf)},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QLayout_invalidate, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_invalidate)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QLayout_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QLayout_isEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_isEnabled)},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QLayout_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_itemAt)},
    {SIP_MLNAME_CAST(sipName_layout), meth_QLayout_layout, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_layout)},
    {SIP_MLNAME_CAST(sipName_margin), meth_QLayout_margin, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_margin)},
    {SIP_MLNAME_CAST(sipName_maximumSize), meth_QLayout_maximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_maximumSize)},
    {SIP_MLNAME_CAST(sipName_menuBar), meth_QLayout_menuBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_menuBar)},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QLayout_minimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_minimumSize)},
    {SIP_MLNAME_CAST(sipName_parentWidget), meth_QLayout_parentWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_parentWidget)},
    {SIP_MLNAME_CAST(sipName_removeItem), meth_QLayout_removeItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_removeItem)},
    {SIP_MLNAME_CAST(sipName_removeWidget), meth_QLayout_removeWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_removeWidget)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QLayout_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setContentsMargins), meth_QLayout_setContentsMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setContentsMargins)},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QLayout_setEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setEnabled)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QLayout_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setGeometry)},
    {SIP_MLNAME_CAST(sipName_setMargin), meth_QLayout_setMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setMargin)},
    {SIP_MLNAME_CAST(sipName_setMenuBar), meth_QLayout_setMenuBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setMenuBar)},
    {SIP_MLNAME_CAST(sipName_setSizeConstraint), meth_QLayout_setSizeConstraint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setSizeConstraint)},
    {SIP_MLNAME_CAST(sipName_setSpacing), meth_QLayout_setSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setSpacing)},
    {SIP_MLNAME_CAST(sipName_sizeConstraint), meth_QLayout_sizeConstraint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_sizeConstraint)},
    {SIP_MLNAME_CAST(sipName_spacing), meth_QLayout_spacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_spacing)},
    {SIP_MLNAME_CAST(sipName_takeAt), meth_QLayout_takeAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_takeAt)},
    {SIP_MLNAME_CAST(sipName_totalHeightForWidth), meth_QLayout_totalHeightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_totalHeightForWidth)},
    {SIP_MLNAME_CAST(sipName_totalMaximumSize), meth_QLayout_totalMaximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_totalMaximumSize)},
    {SIP_MLNAME_CAST(sipName_totalMinimumSize), meth_QLayout_totalMinimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_totalMinimumSize)},
    {SIP_MLNAME_CAST(sipName_totalSizeHint), meth_QLayout_totalSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_totalSizeHint)},
    {SIP_MLNAME_CAST(sipName_update), meth_QLayout_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_update)},
    {SIP_MLNAME_CAST(sipName_widgetEvent), meth_QLayout_widgetEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_widgetEvent)}
};

static sipEnumMemberDef enummembers_QLayout[] = {
    {sipName_SetDefaultConstraint, static_cast<int>( ::QLayout::SetDefaultConstraint), 276},
    {sipName_SetFixedSize, static_cast<int>( ::QLayout::SetFixedSize), 276},
    {sipName_SetMaximumSize, static_cast<int>( ::QLayout::SetMaximumSize), 276},
    {sipName_SetMinAndMaxSize, static_cast<int>( ::QLayout::SetMinAndMaxSize), 276},
    {sipName_SetMinimumSize, static_cast<int>( ::QLayout::SetMinimumSize), 276},
    {sipName_SetNoConstraint, static_cast<int>( ::QLayout::SetNoConstraint), 276},
};

PyDoc_STRVAR(doc_QLayout, "\1QLayout(QWidget)\n"
    "QLayout()");


static pyqt4ClassPluginDef plugin_QLayout = {
    & ::QLayout::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QLayout = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QLayout,
        {0},
        &plugin_QLayout
    },
    {
        sipNameNr_QLayout,
        {0, 0, 1},
        44, methods_QLayout,
        6, enummembers_QLayout,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLayout,
    -1,
    -1,
    supers_QLayout,
    slots_QLayout,
    init_type_QLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLayout,
    0,
    0,
    0,
    release_QLayout,
    cast_QLayout,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstringlistmodel.sip"
#include <qstringlistmodel.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 139 "sip/QtCore/qhash.sip"
#include <qhash.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 139 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStringListModel.cpp"


class sipQStringListModel : public  ::QStringListModel
{
public:
    sipQStringListModel( ::QObject*);
    sipQStringListModel(const  ::QStringList&, ::QObject*);
    virtual ~sipQStringListModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void revert();
    bool submit();
     ::QSize span(const  ::QModelIndex&) const;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const;
     ::QModelIndex buddy(const  ::QModelIndex&) const;
    void sort(int, ::Qt::SortOrder);
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const;
    bool canFetchMore(const  ::QModelIndex&) const;
    void fetchMore(const  ::QModelIndex&);
    bool removeColumns(int,int,const  ::QModelIndex&);
    bool removeRows(int,int,const  ::QModelIndex&);
    bool insertColumns(int,int,const  ::QModelIndex&);
    bool insertRows(int,int,const  ::QModelIndex&);
     ::Qt::DropActions supportedDropActions() const;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);
     ::QMimeData* mimeData(const  ::QModelIndexList&) const;
     ::QStringList mimeTypes() const;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&);
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int);
     ::QVariant headerData(int, ::Qt::Orientation,int) const;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int);
     ::QVariant data(const  ::QModelIndex&,int) const;
    int rowCount(const  ::QModelIndex&) const;
     ::QModelIndex index(int,int,const  ::QModelIndex&) const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStringListModel(const sipQStringListModel &);
    sipQStringListModel &operator = (const sipQStringListModel &);

    char sipPyMethods[32];
};

sipQStringListModel::sipQStringListModel( ::QObject*a0):  ::QStringListModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStringListModel::sipQStringListModel(const  ::QStringList& a0, ::QObject*a1):  ::QStringListModel(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStringListModel::~sipQStringListModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQStringListModel::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QStringListModel);
}

int sipQStringListModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QStringListModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QStringListModel,_c,_id,_a);

    return _id;
}

void *sipQStringListModel::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QStringListModel, _clname)) ? this :  ::QStringListModel::qt_metacast(_clname);
}

void sipQStringListModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
         ::QStringListModel::revert();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQStringListModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return  ::QStringListModel::submit();

    extern bool sipVH_QtGui_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_67(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQStringListModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return  ::QStringListModel::span(a0);

    extern  ::QSize sipVH_QtGui_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_68(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQStringListModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return  ::QStringListModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtGui_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtGui_69(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QModelIndex sipQStringListModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return  ::QStringListModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtGui_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_70(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStringListModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
         ::QStringListModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtGui_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtGui_71(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

 ::Qt::ItemFlags sipQStringListModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return  ::QStringListModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtGui_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_72(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStringListModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return  ::QStringListModel::canFetchMore(a0);

    extern bool sipVH_QtGui_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_59(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStringListModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
         ::QStringListModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtGui_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtGui_50(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStringListModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return  ::QStringListModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStringListModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return  ::QStringListModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStringListModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return  ::QStringListModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStringListModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return  ::QStringListModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::Qt::DropActions sipQStringListModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return  ::QStringListModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtGui_74(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_74(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQStringListModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return  ::QStringListModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtGui_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtGui_75(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QMimeData* sipQStringListModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return  ::QStringListModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtGui_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtGui_76(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QStringList sipQStringListModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return  ::QStringListModel::mimeTypes();

    extern  ::QStringList sipVH_QtGui_77(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_77(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQStringListModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return  ::QStringListModel::setItemData(a0,a1);

    extern bool sipVH_QtGui_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtGui_78(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

QMap<int, ::QVariant> sipQStringListModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return  ::QStringListModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtGui_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_79(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStringListModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return  ::QStringListModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtGui_80(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtGui_80(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QVariant sipQStringListModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return  ::QStringListModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtGui_81(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtGui_81(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStringListModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return  ::QStringListModel::setData(a0,a1,a2);

    extern bool sipVH_QtGui_82(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtGui_82(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQStringListModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return  ::QStringListModel::data(a0,a1);

    extern  ::QVariant sipVH_QtGui_83(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtGui_83(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

int sipQStringListModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_rowCount);

    if (!sipMeth)
        return  ::QStringListModel::rowCount(a0);

    extern int sipVH_QtGui_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_84(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQStringListModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return  ::QStringListModel::index(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtGui_85(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_85(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStringListModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QStringListModel::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStringListModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QStringListModel::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQStringListModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QStringListModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStringListModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QStringListModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStringListModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QStringListModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStringListModel::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QStringListModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStringListModel::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QStringListModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QStringListModel_rowCount, "rowCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QStringListModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QStringListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QStringListModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStringListModel::rowCount(*a0) : sipCpp->rowCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_rowCount, doc_QStringListModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QStringListModel_data, "data(self, QModelIndex, int) -> Any");

extern "C" {static PyObject *meth_QStringListModel_data(PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        const  ::QStringListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9i", &sipSelf, sipType_QStringListModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QStringListModel::data(*a0,a1) : sipCpp->data(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_data, doc_QStringListModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_QStringListModel_setData, "setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QStringListModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
         ::QStringListModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|i", &sipSelf, sipType_QStringListModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant,&a1, &a1State, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStringListModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_setData, doc_QStringListModel_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QStringListModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QStringListModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QStringListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStringListModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::QStringListModel::flags(*a0) : sipCpp->flags(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_flags, doc_QStringListModel_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QStringListModel_insertRows, "insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStringListModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QStringListModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QStringListModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStringListModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_insertRows, doc_QStringListModel_insertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QStringListModel_removeRows, "removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStringListModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QStringListModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QStringListModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStringListModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_removeRows, doc_QStringListModel_removeRows);

    return NULL;
}


PyDoc_STRVAR(doc_QStringListModel_stringList, "stringList(self) -> List[str]");

extern "C" {static PyObject *meth_QStringListModel_stringList(PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_stringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStringListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringListModel, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->stringList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_stringList, doc_QStringListModel_stringList);

    return NULL;
}


PyDoc_STRVAR(doc_QStringListModel_setStringList, "setStringList(self, Sequence[str])");

extern "C" {static PyObject *meth_QStringListModel_setStringList(PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_setStringList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QStringListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStringListModel, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStringList(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_setStringList, doc_QStringListModel_setStringList);

    return NULL;
}


PyDoc_STRVAR(doc_QStringListModel_sort, "sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QStringListModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::SortOrder a1 = Qt::AscendingOrder;
         ::QStringListModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QStringListModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QStringListModel::sort(a0,a1) : sipCpp->sort(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_sort, doc_QStringListModel_sort);

    return NULL;
}


PyDoc_STRVAR(doc_QStringListModel_supportedDropActions, "supportedDropActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QStringListModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QStringListModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QStringListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStringListModel, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Qt::DropActions((sipSelfWasArg ? sipCpp-> ::QStringListModel::supportedDropActions() : sipCpp->supportedDropActions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStringListModel, sipName_supportedDropActions, doc_QStringListModel_supportedDropActions);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QStringListModel(void *, const sipTypeDef *);}
static void *cast_QStringListModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QStringListModel *sipCpp = reinterpret_cast< ::QStringListModel *>(sipCppV);

    if (targetType == sipType_QAbstractListModel)
        return static_cast< ::QAbstractListModel *>(sipCpp);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStringListModel(void *, int);}
static void release_QStringListModel(void *sipCppV, int)
{
     ::QStringListModel *sipCpp = reinterpret_cast< ::QStringListModel *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QStringListModel(sipSimpleWrapper *);}
static void dealloc_QStringListModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQStringListModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStringListModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QStringListModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStringListModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQStringListModel *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStringListModel(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QStringList,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStringListModel(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStringListModel[] = {{1, 0, 1}};


static PyMethodDef methods_QStringListModel[] = {
    {SIP_MLNAME_CAST(sipName_data), meth_QStringListModel_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QStringListModel_data)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QStringListModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QStringListModel_flags)},
    {SIP_MLNAME_CAST(sipName_insertRows), (PyCFunction)meth_QStringListModel_insertRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStringListModel_insertRows)},
    {SIP_MLNAME_CAST(sipName_removeRows), (PyCFunction)meth_QStringListModel_removeRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStringListModel_removeRows)},
    {SIP_MLNAME_CAST(sipName_rowCount), (PyCFunction)meth_QStringListModel_rowCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStringListModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setData), (PyCFunction)meth_QStringListModel_setData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStringListModel_setData)},
    {SIP_MLNAME_CAST(sipName_setStringList), meth_QStringListModel_setStringList, METH_VARARGS, SIP_MLDOC_CAST(doc_QStringListModel_setStringList)},
    {SIP_MLNAME_CAST(sipName_sort), (PyCFunction)meth_QStringListModel_sort, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStringListModel_sort)},
    {SIP_MLNAME_CAST(sipName_stringList), meth_QStringListModel_stringList, METH_VARARGS, SIP_MLDOC_CAST(doc_QStringListModel_stringList)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QStringListModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QStringListModel_supportedDropActions)}
};

PyDoc_STRVAR(doc_QStringListModel, "\1QStringListModel(parent: QObject = None)\n"
    "QStringListModel(Sequence[str], parent: QObject = None)");


static pyqt4ClassPluginDef plugin_QStringListModel = {
    & ::QStringListModel::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QStringListModel = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QStringListModel,
        {0},
        &plugin_QStringListModel
    },
    {
        sipNameNr_QStringListModel,
        {0, 0, 1},
        10, methods_QStringListModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QStringListModel,
    -1,
    -1,
    supers_QStringListModel,
    0,
    init_type_QStringListModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStringListModel,
    0,
    0,
    0,
    release_QStringListModel,
    cast_QStringListModel,
    0,
    0,
    0,
    0,
    0,
    0
};

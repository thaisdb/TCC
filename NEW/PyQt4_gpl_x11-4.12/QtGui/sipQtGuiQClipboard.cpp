/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qclipboard.sip"
#include <qclipboard.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qimage.sip"
#include <qimage.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"


PyDoc_STRVAR(doc_QClipboard_clear, "clear(self, mode: QClipboard.Mode = QClipboard.Clipboard)");

extern "C" {static PyObject *meth_QClipboard_clear(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_clear(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QClipboard::Mode a0 = QClipboard::Clipboard;
         ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_clear, doc_QClipboard_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_supportsFindBuffer, "supportsFindBuffer(self) -> bool");

extern "C" {static PyObject *meth_QClipboard_supportsFindBuffer(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_supportsFindBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->supportsFindBuffer();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_supportsFindBuffer, doc_QClipboard_supportsFindBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_supportsSelection, "supportsSelection(self) -> bool");

extern "C" {static PyObject *meth_QClipboard_supportsSelection(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_supportsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->supportsSelection();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_supportsSelection, doc_QClipboard_supportsSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_ownsClipboard, "ownsClipboard(self) -> bool");

extern "C" {static PyObject *meth_QClipboard_ownsClipboard(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_ownsClipboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ownsClipboard();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_ownsClipboard, doc_QClipboard_ownsClipboard);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_ownsFindBuffer, "ownsFindBuffer(self) -> bool");

extern "C" {static PyObject *meth_QClipboard_ownsFindBuffer(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_ownsFindBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ownsFindBuffer();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_ownsFindBuffer, doc_QClipboard_ownsFindBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_ownsSelection, "ownsSelection(self) -> bool");

extern "C" {static PyObject *meth_QClipboard_ownsSelection(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_ownsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QClipboard, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ownsSelection();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_ownsSelection, doc_QClipboard_ownsSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_text, "text(self, mode: QClipboard.Mode = QClipboard.Clipboard) -> str\n"
    "text(self, str, mode: QClipboard.Mode = QClipboard.Clipboard) -> str");

extern "C" {static PyObject *meth_QClipboard_text(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_text(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QClipboard::Mode a0 = QClipboard::Clipboard;
        const  ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->text(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        const  ::QString* a0;
        int a0State = 0;
         ::QClipboard::Mode a1 = QClipboard::Clipboard;
        const  ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QString,&a0, &a0State, sipType_QClipboard_Mode, &a1))
        {
            PyObject * sipRes = 0;

#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qclipboard.sip"
        QString *text;
        QString *subtype = new QString(*a0);
        
        Py_BEGIN_ALLOW_THREADS
        text = new QString(sipCpp->text(*subtype, a1));
        Py_END_ALLOW_THREADS
        
        PyObject *text_obj = sipConvertFromNewType(text, sipType_QString, NULL);
        PyObject *subtype_obj = sipConvertFromNewType(subtype, sipType_QString, NULL);
        
        if (text_obj && subtype_obj)
        {
        #if PY_VERSION_HEX >= 0x02040000
            sipRes = PyTuple_Pack(2, text_obj, subtype_obj);
        #else
            sipRes = Py_BuildValue("(OO)", text_obj, subtype_obj);
        #endif
        }
        
        Py_XDECREF(text_obj);
        Py_XDECREF(subtype_obj);
#line 333 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipRes;
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
         ::QString* a0;
        int a0State = 0;
         ::QClipboard::Mode a1 = QClipboard::Clipboard;
        const  ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QString,&a0, &a0State, sipType_QClipboard_Mode, &a1))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->text(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_text, doc_QClipboard_text);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_setText, "setText(self, str, mode: QClipboard.Mode = QClipboard.Clipboard)");

extern "C" {static PyObject *meth_QClipboard_setText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_setText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QClipboard::Mode a1 = QClipboard::Clipboard;
         ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QString,&a0, &a0State, sipType_QClipboard_Mode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_setText, doc_QClipboard_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_mimeData, "mimeData(self, mode: QClipboard.Mode = QClipboard.Clipboard) -> QMimeData");

extern "C" {static PyObject *meth_QClipboard_mimeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_mimeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QClipboard::Mode a0 = QClipboard::Clipboard;
        const  ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
            const  ::QMimeData*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mimeData(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast< ::QMimeData *>(sipRes),sipType_QMimeData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_mimeData, doc_QClipboard_mimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_setMimeData, "setMimeData(self, QMimeData, mode: QClipboard.Mode = QClipboard.Clipboard)");

extern "C" {static PyObject *meth_QClipboard_setMimeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_setMimeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMimeData* a0;
        PyObject *a0Wrapper;
         ::QClipboard::Mode a1 = QClipboard::Clipboard;
         ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B@J8|E", &sipSelf, sipType_QClipboard, &sipCpp, &a0Wrapper, sipType_QMimeData, &a0, sipType_QClipboard_Mode, &a1))
        {
#line 88 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qclipboard.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setMimeData(a0, a1);
        Py_END_ALLOW_THREADS
        
        // Transfer ownership to C++ and make sure the Python object stays alive by
        // giving it a reference to itself.  The cycle will be broken by QMimeData's
        // virtual dtor.  The reason we don't do the obvious and just use /Transfer/ is
        // that the QClipboard Python object we would transfer ownership to is likely
        // to be garbage collected immediately afterwards.
        sipTransferTo(a0Wrapper, a0Wrapper);
#line 477 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_setMimeData, doc_QClipboard_setMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_image, "image(self, mode: QClipboard.Mode = QClipboard.Clipboard) -> QImage");

extern "C" {static PyObject *meth_QClipboard_image(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_image(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QClipboard::Mode a0 = QClipboard::Clipboard;
        const  ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
             ::QImage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QImage(sipCpp->image(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_image, doc_QClipboard_image);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_pixmap, "pixmap(self, mode: QClipboard.Mode = QClipboard.Clipboard) -> QPixmap");

extern "C" {static PyObject *meth_QClipboard_pixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_pixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QClipboard::Mode a0 = QClipboard::Clipboard;
        const  ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QClipboard_Mode, &a0))
        {
             ::QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPixmap(sipCpp->pixmap(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_pixmap, doc_QClipboard_pixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_setImage, "setImage(self, QImage, mode: QClipboard.Mode = QClipboard.Clipboard)");

extern "C" {static PyObject *meth_QClipboard_setImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_setImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QImage* a0;
         ::QClipboard::Mode a1 = QClipboard::Clipboard;
         ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QImage, &a0, sipType_QClipboard_Mode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setImage(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_setImage, doc_QClipboard_setImage);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_setPixmap, "setPixmap(self, QPixmap, mode: QClipboard.Mode = QClipboard.Clipboard)");

extern "C" {static PyObject *meth_QClipboard_setPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QClipboard_setPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPixmap* a0;
         ::QClipboard::Mode a1 = QClipboard::Clipboard;
         ::QClipboard *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QPixmap, &a0, sipType_QClipboard_Mode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPixmap(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_setPixmap, doc_QClipboard_setPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_connectNotify, "connectNotify(self, QT_SIGNAL)");

extern "C" {static PyObject *meth_QClipboard_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        PyObject * a0;
         ::QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pP0", &sipSelf, sipType_QClipboard, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 119 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qclipboard.sip"
        typedef const char *(*pyqt4_get_signal_t)(PyObject *);
        
        static pyqt4_get_signal_t pyqt4_get_signal = 0;
        
        if (!pyqt4_get_signal)
        {
            pyqt4_get_signal = (pyqt4_get_signal_t)sipImportSymbol("pyqt4_get_signal");
            Q_ASSERT(pyqt4_get_signal);
        }
        
        const char *sig = pyqt4_get_signal(a0);
            
        if (sig)
        {
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            (sipSelfWasArg ? sipCpp->QClipboard::connectNotify(sig) : sipCpp->connectNotify(sig));
        #else
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg, sig);
        #endif
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 675 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQClipboard.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_connectNotify, doc_QClipboard_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QClipboard_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QClipboard_event(PyObject *, PyObject *);}
static PyObject *meth_QClipboard_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QClipboard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QClipboard, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QClipboard::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QClipboard, sipName_event, doc_QClipboard_event);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QClipboard(void *, const sipTypeDef *);}
static void *cast_QClipboard(void *sipCppV, const sipTypeDef *targetType)
{
     ::QClipboard *sipCpp = reinterpret_cast< ::QClipboard *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QClipboard(void *, int);}
static void release_QClipboard(void *, int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QClipboard[] = {{34, 0, 1}};


static PyMethodDef methods_QClipboard[] = {
    {SIP_MLNAME_CAST(sipName_clear), (PyCFunction)meth_QClipboard_clear, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_clear)},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QClipboard_connectNotify, METH_VARARGS, SIP_MLDOC_CAST(doc_QClipboard_connectNotify)},
    {SIP_MLNAME_CAST(sipName_event), meth_QClipboard_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QClipboard_event)},
    {SIP_MLNAME_CAST(sipName_image), (PyCFunction)meth_QClipboard_image, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_image)},
    {SIP_MLNAME_CAST(sipName_mimeData), (PyCFunction)meth_QClipboard_mimeData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_mimeData)},
    {SIP_MLNAME_CAST(sipName_ownsClipboard), meth_QClipboard_ownsClipboard, METH_VARARGS, SIP_MLDOC_CAST(doc_QClipboard_ownsClipboard)},
    {SIP_MLNAME_CAST(sipName_ownsFindBuffer), meth_QClipboard_ownsFindBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QClipboard_ownsFindBuffer)},
    {SIP_MLNAME_CAST(sipName_ownsSelection), meth_QClipboard_ownsSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QClipboard_ownsSelection)},
    {SIP_MLNAME_CAST(sipName_pixmap), (PyCFunction)meth_QClipboard_pixmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_pixmap)},
    {SIP_MLNAME_CAST(sipName_setImage), (PyCFunction)meth_QClipboard_setImage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_setImage)},
    {SIP_MLNAME_CAST(sipName_setMimeData), (PyCFunction)meth_QClipboard_setMimeData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_setMimeData)},
    {SIP_MLNAME_CAST(sipName_setPixmap), (PyCFunction)meth_QClipboard_setPixmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_setPixmap)},
    {SIP_MLNAME_CAST(sipName_setText), (PyCFunction)meth_QClipboard_setText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_setText)},
    {SIP_MLNAME_CAST(sipName_supportsFindBuffer), meth_QClipboard_supportsFindBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QClipboard_supportsFindBuffer)},
    {SIP_MLNAME_CAST(sipName_supportsSelection), meth_QClipboard_supportsSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QClipboard_supportsSelection)},
    {SIP_MLNAME_CAST(sipName_text), (PyCFunction)meth_QClipboard_text, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QClipboard_text)}
};

static sipEnumMemberDef enummembers_QClipboard[] = {
    {sipName_Clipboard, static_cast<int>( ::QClipboard::Clipboard), 54},
    {sipName_FindBuffer, static_cast<int>( ::QClipboard::FindBuffer), 54},
    {sipName_Selection, static_cast<int>( ::QClipboard::Selection), 54},
};


/* Define this type's signals. */
static const pyqt4QtSignal signals_QClipboard[] = {
    {"selectionChanged()", "\1selectionChanged(self)", 0, 0},
    {"findBufferChanged()", "\1findBufferChanged(self)", 0, 0},
    {"dataChanged()", "\1dataChanged(self)", 0, 0},
    {"changed(QClipboard::Mode)", "\1changed(self, QClipboard.Mode)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QClipboard = {
    & ::QClipboard::staticMetaObject,
    0,
    signals_QClipboard
};


sipClassTypeDef sipTypeDef_QtGui_QClipboard = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QClipboard,
        {0},
        &plugin_QClipboard
    },
    {
        sipNameNr_QClipboard,
        {0, 0, 1},
        16, methods_QClipboard,
        3, enummembers_QClipboard,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QClipboard,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QClipboard,
    cast_QClipboard,
    0,
    0,
    0,
    0,
    0,
    0
};

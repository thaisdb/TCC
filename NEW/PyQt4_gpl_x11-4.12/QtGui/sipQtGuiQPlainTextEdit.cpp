/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qplaintextedit.sip"
#include <qplaintextedit.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 46 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 44 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 159 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 47 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 129 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 50 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 110 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 53 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 56 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 59 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 62 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 647 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 65 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 347 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 596 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 74 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 505 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 77 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 739 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 80 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 765 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 83 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 792 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 86 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 781 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 618 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 92 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 252 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 95 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 524 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 98 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 561 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 101 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 474 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 104 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 107 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 110 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 210 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qprinter.sip"
#include <qprinter.h>
#line 113 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 116 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 119 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 35 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 124 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qmenu.sip"
#include <qmenu.h>
#line 127 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 130 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 59 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 133 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 136 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 336 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 139 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 142 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 59 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 145 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 148 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 151 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 154 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 28 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 157 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 160 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 163 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 166 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 169 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 172 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 175 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 178 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 181 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 184 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 187 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 190 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 193 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 196 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 199 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 202 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 205 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 208 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 607 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 211 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 854 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 214 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 403 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 217 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 574 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 220 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 548 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 223 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 226 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 52 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 229 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 232 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 235 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 238 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 241 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 244 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 247 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 250 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 253 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 256 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 259 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 262 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 265 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 268 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 271 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 274 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 277 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 280 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 283 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextEdit.cpp"


class sipQPlainTextEdit : public  ::QPlainTextEdit
{
public:
    sipQPlainTextEdit( ::QWidget*);
    sipQPlainTextEdit(const  ::QString&, ::QWidget*);
    virtual ~sipQPlainTextEdit();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void insertFromMimeData(const  ::QMimeData*);
    bool canInsertFromMimeData(const  ::QMimeData*) const;
     ::QMimeData* createMimeDataFromSelection() const;
     ::QVariant loadResource(int,const  ::QUrl&);
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
     ::QPaintEngine* paintEngine() const;
    int devType() const;
    void setVisible(bool);
     ::QSize sizeHint() const;
     ::QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    void mousePressEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void wheelEvent( ::QWheelEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void focusInEvent( ::QFocusEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void enterEvent( ::QEvent*);
    void leaveEvent( ::QEvent*);
    void paintEvent( ::QPaintEvent*);
    void moveEvent( ::QMoveEvent*);
    void resizeEvent( ::QResizeEvent*);
    void closeEvent( ::QCloseEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void tabletEvent( ::QTabletEvent*);
    void actionEvent( ::QActionEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dropEvent( ::QDropEvent*);
    void showEvent( ::QShowEvent*);
    void hideEvent( ::QHideEvent*);
    void changeEvent( ::QEvent*);
    void inputMethodEvent( ::QInputMethodEvent*);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const  ::QPalette&);
    void fontChange(const  ::QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool viewportEvent( ::QEvent*);
    void scrollContentsBy(int,int);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlainTextEdit(const sipQPlainTextEdit &);
    sipQPlainTextEdit &operator = (const sipQPlainTextEdit &);

    char sipPyMethods[53];
};

sipQPlainTextEdit::sipQPlainTextEdit( ::QWidget*a0):  ::QPlainTextEdit(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlainTextEdit::sipQPlainTextEdit(const  ::QString& a0, ::QWidget*a1):  ::QPlainTextEdit(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlainTextEdit::~sipQPlainTextEdit()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQPlainTextEdit::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QPlainTextEdit);
}

int sipQPlainTextEdit::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QPlainTextEdit::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QPlainTextEdit,_c,_id,_a);

    return _id;
}

void *sipQPlainTextEdit::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QPlainTextEdit, _clname)) ? this :  ::QPlainTextEdit::qt_metacast(_clname);
}

void sipQPlainTextEdit::insertFromMimeData(const  ::QMimeData*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_insertFromMimeData);

    if (!sipMeth)
    {
         ::QPlainTextEdit::insertFromMimeData(a0);
        return;
    }

    extern void sipVH_QtGui_238(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*);

    sipVH_QtGui_238(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQPlainTextEdit::canInsertFromMimeData(const  ::QMimeData*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_canInsertFromMimeData);

    if (!sipMeth)
        return  ::QPlainTextEdit::canInsertFromMimeData(a0);

    extern bool sipVH_QtGui_237(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*);

    return sipVH_QtGui_237(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QMimeData* sipQPlainTextEdit::createMimeDataFromSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_createMimeDataFromSelection);

    if (!sipMeth)
        return  ::QPlainTextEdit::createMimeDataFromSelection();

    extern  ::QMimeData* sipVH_QtGui_236(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_236(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QVariant sipQPlainTextEdit::loadResource(int a0,const  ::QUrl& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_loadResource);

    if (!sipMeth)
        return  ::QPlainTextEdit::loadResource(a0,a1);

    extern  ::QVariant sipVH_QtGui_235(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::QUrl&);

    return sipVH_QtGui_235(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQPlainTextEdit::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QPlainTextEdit::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QPlainTextEdit::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQPlainTextEdit::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QPlainTextEdit::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQPlainTextEdit::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QPlainTextEdit::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQPlainTextEdit::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QPlainTextEdit::metric(a0);

    extern int sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQPlainTextEdit::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QPlainTextEdit::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQPlainTextEdit::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QPlainTextEdit::devType();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQPlainTextEdit::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QPlainTextEdit::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSize sipQPlainTextEdit::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QPlainTextEdit::sizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQPlainTextEdit::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QPlainTextEdit::minimumSizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQPlainTextEdit::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QPlainTextEdit::heightForWidth(a0);

    extern int sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::enterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::changeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QPlainTextEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtGui_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQPlainTextEdit::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QPlainTextEdit::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtGui_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtGui_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQPlainTextEdit::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QPlainTextEdit::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_31(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
         ::QPlainTextEdit::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::paletteChange(const  ::QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
         ::QPlainTextEdit::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPalette&);

    sipVH_QtGui_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::fontChange(const  ::QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
         ::QPlainTextEdit::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QFont&);

    sipVH_QtGui_33(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
         ::QPlainTextEdit::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
         ::QPlainTextEdit::languageChange();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQPlainTextEdit::viewportEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return  ::QPlainTextEdit::viewportEvent(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextEdit::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
         ::QPlainTextEdit::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtGui_43(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QPlainTextEdit_setDocument, "setDocument(self, QTextDocument)");

extern "C" {static PyObject *meth_QPlainTextEdit_setDocument(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextDocument* a0;
        PyObject *a0Keep;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0Keep, sipType_QTextDocument, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocument(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -51, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setDocument, doc_QPlainTextEdit_setDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_document, "document(self) -> QTextDocument");

extern "C" {static PyObject *meth_QPlainTextEdit_document(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QTextDocument*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->document();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_document, doc_QPlainTextEdit_document);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setTextCursor, "setTextCursor(self, QTextCursor)");

extern "C" {static PyObject *meth_QPlainTextEdit_setTextCursor(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setTextCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextCursor* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextCursor, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextCursor(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setTextCursor, doc_QPlainTextEdit_setTextCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_textCursor, "textCursor(self) -> QTextCursor");

extern "C" {static PyObject *meth_QPlainTextEdit_textCursor(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_textCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QTextCursor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTextCursor(sipCpp->textCursor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_textCursor, doc_QPlainTextEdit_textCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_isReadOnly, "isReadOnly(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isReadOnly();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_isReadOnly, doc_QPlainTextEdit_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setReadOnly, "setReadOnly(self, bool)");

extern "C" {static PyObject *meth_QPlainTextEdit_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setReadOnly(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setReadOnly, doc_QPlainTextEdit_setReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setTextInteractionFlags, "setTextInteractionFlags(self, Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag])");

extern "C" {static PyObject *meth_QPlainTextEdit_setTextInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setTextInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::TextInteractionFlags* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_Qt_TextInteractionFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextInteractionFlags(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setTextInteractionFlags, doc_QPlainTextEdit_setTextInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_textInteractionFlags, "textInteractionFlags(self) -> Qt.TextInteractionFlags");

extern "C" {static PyObject *meth_QPlainTextEdit_textInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_textInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::Qt::TextInteractionFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Qt::TextInteractionFlags(sipCpp->textInteractionFlags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_textInteractionFlags, doc_QPlainTextEdit_textInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_mergeCurrentCharFormat, "mergeCurrentCharFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QPlainTextEdit_mergeCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mergeCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextCharFormat* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->mergeCurrentCharFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_mergeCurrentCharFormat, doc_QPlainTextEdit_mergeCurrentCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setCurrentCharFormat, "setCurrentCharFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QPlainTextEdit_setCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextCharFormat* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentCharFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setCurrentCharFormat, doc_QPlainTextEdit_setCurrentCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_currentCharFormat, "currentCharFormat(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QPlainTextEdit_currentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_currentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QTextCharFormat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTextCharFormat(sipCpp->currentCharFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_currentCharFormat, doc_QPlainTextEdit_currentCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_tabChangesFocus, "tabChangesFocus(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_tabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_tabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabChangesFocus();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_tabChangesFocus, doc_QPlainTextEdit_tabChangesFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setTabChangesFocus, "setTabChangesFocus(self, bool)");

extern "C" {static PyObject *meth_QPlainTextEdit_setTabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setTabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabChangesFocus(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setTabChangesFocus, doc_QPlainTextEdit_setTabChangesFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setDocumentTitle, "setDocumentTitle(self, str)");

extern "C" {static PyObject *meth_QPlainTextEdit_setDocumentTitle(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setDocumentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocumentTitle(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setDocumentTitle, doc_QPlainTextEdit_setDocumentTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_documentTitle, "documentTitle(self) -> str");

extern "C" {static PyObject *meth_QPlainTextEdit_documentTitle(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_documentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->documentTitle());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_documentTitle, doc_QPlainTextEdit_documentTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_isUndoRedoEnabled, "isUndoRedoEnabled(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_isUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_isUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isUndoRedoEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_isUndoRedoEnabled, doc_QPlainTextEdit_isUndoRedoEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setUndoRedoEnabled, "setUndoRedoEnabled(self, bool)");

extern "C" {static PyObject *meth_QPlainTextEdit_setUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUndoRedoEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setUndoRedoEnabled, doc_QPlainTextEdit_setUndoRedoEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setMaximumBlockCount, "setMaximumBlockCount(self, int)");

extern "C" {static PyObject *meth_QPlainTextEdit_setMaximumBlockCount(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setMaximumBlockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaximumBlockCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setMaximumBlockCount, doc_QPlainTextEdit_setMaximumBlockCount);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_maximumBlockCount, "maximumBlockCount(self) -> int");

extern "C" {static PyObject *meth_QPlainTextEdit_maximumBlockCount(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_maximumBlockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->maximumBlockCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_maximumBlockCount, doc_QPlainTextEdit_maximumBlockCount);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_lineWrapMode, "lineWrapMode(self) -> QPlainTextEdit.LineWrapMode");

extern "C" {static PyObject *meth_QPlainTextEdit_lineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_lineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QPlainTextEdit::LineWrapMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineWrapMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPlainTextEdit_LineWrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_lineWrapMode, doc_QPlainTextEdit_lineWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setLineWrapMode, "setLineWrapMode(self, QPlainTextEdit.LineWrapMode)");

extern "C" {static PyObject *meth_QPlainTextEdit_setLineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setLineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPlainTextEdit::LineWrapMode a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QPlainTextEdit_LineWrapMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLineWrapMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setLineWrapMode, doc_QPlainTextEdit_setLineWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_wordWrapMode, "wordWrapMode(self) -> QTextOption.WrapMode");

extern "C" {static PyObject *meth_QPlainTextEdit_wordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_wordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QTextOption::WrapMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wordWrapMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTextOption_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_wordWrapMode, doc_QPlainTextEdit_wordWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setWordWrapMode, "setWordWrapMode(self, QTextOption.WrapMode)");

extern "C" {static PyObject *meth_QPlainTextEdit_setWordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setWordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextOption::WrapMode a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextOption_WrapMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWordWrapMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setWordWrapMode, doc_QPlainTextEdit_setWordWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setBackgroundVisible, "setBackgroundVisible(self, bool)");

extern "C" {static PyObject *meth_QPlainTextEdit_setBackgroundVisible(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setBackgroundVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackgroundVisible(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setBackgroundVisible, doc_QPlainTextEdit_setBackgroundVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_backgroundVisible, "backgroundVisible(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_backgroundVisible(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_backgroundVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->backgroundVisible();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_backgroundVisible, doc_QPlainTextEdit_backgroundVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setCenterOnScroll, "setCenterOnScroll(self, bool)");

extern "C" {static PyObject *meth_QPlainTextEdit_setCenterOnScroll(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setCenterOnScroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCenterOnScroll(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setCenterOnScroll, doc_QPlainTextEdit_setCenterOnScroll);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_centerOnScroll, "centerOnScroll(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_centerOnScroll(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_centerOnScroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->centerOnScroll();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_centerOnScroll, doc_QPlainTextEdit_centerOnScroll);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_find, "find(self, str, options: QTextDocument.FindFlags = 0) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_find(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_find(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextDocument::FindFlags a1def = 0;
         ::QTextDocument::FindFlags* a1 = &a1def;
        int a1State = 0;
         ::QPlainTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QString,&a0, &a0State, sipType_QTextDocument_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->find(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QTextDocument_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_find, doc_QPlainTextEdit_find);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_toPlainText, "toPlainText(self) -> str");

extern "C" {static PyObject *meth_QPlainTextEdit_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toPlainText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_toPlainText, doc_QPlainTextEdit_toPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_ensureCursorVisible, "ensureCursorVisible(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_ensureCursorVisible(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_ensureCursorVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ensureCursorVisible();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_ensureCursorVisible, doc_QPlainTextEdit_ensureCursorVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_loadResource, "loadResource(self, int, QUrl) -> Any");

extern "C" {static PyObject *meth_QPlainTextEdit_loadResource(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_loadResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QUrl* a1;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0, sipType_QUrl, &a1))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::loadResource(a0,*a1) : sipCpp->loadResource(a0,*a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_loadResource, doc_QPlainTextEdit_loadResource);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_createStandardContextMenu, "createStandardContextMenu(self) -> QMenu");

extern "C" {static PyObject *meth_QPlainTextEdit_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QMenu*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createStandardContextMenu();
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_createStandardContextMenu, doc_QPlainTextEdit_createStandardContextMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_cursorForPosition, "cursorForPosition(self, QPoint) -> QTextCursor");

extern "C" {static PyObject *meth_QPlainTextEdit_cursorForPosition(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_cursorForPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
             ::QTextCursor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTextCursor(sipCpp->cursorForPosition(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_cursorForPosition, doc_QPlainTextEdit_cursorForPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_cursorRect, "cursorRect(self, QTextCursor) -> QRect\n"
    "cursorRect(self) -> QRect");

extern "C" {static PyObject *meth_QPlainTextEdit_cursorRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_cursorRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextCursor* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextCursor, &a0))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect(sipCpp->cursorRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect(sipCpp->cursorRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_cursorRect, doc_QPlainTextEdit_cursorRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_overwriteMode, "overwriteMode(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_overwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_overwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->overwriteMode();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_overwriteMode, doc_QPlainTextEdit_overwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setOverwriteMode, "setOverwriteMode(self, bool)");

extern "C" {static PyObject *meth_QPlainTextEdit_setOverwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setOverwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOverwriteMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setOverwriteMode, doc_QPlainTextEdit_setOverwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_tabStopWidth, "tabStopWidth(self) -> int");

extern "C" {static PyObject *meth_QPlainTextEdit_tabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_tabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabStopWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_tabStopWidth, doc_QPlainTextEdit_tabStopWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setTabStopWidth, "setTabStopWidth(self, int)");

extern "C" {static PyObject *meth_QPlainTextEdit_setTabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setTabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabStopWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setTabStopWidth, doc_QPlainTextEdit_setTabStopWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_cursorWidth, "cursorWidth(self) -> int");

extern "C" {static PyObject *meth_QPlainTextEdit_cursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_cursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cursorWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_cursorWidth, doc_QPlainTextEdit_cursorWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setCursorWidth, "setCursorWidth(self, int)");

extern "C" {static PyObject *meth_QPlainTextEdit_setCursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setCursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCursorWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setCursorWidth, doc_QPlainTextEdit_setCursorWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setExtraSelections, "setExtraSelections(self, object)");

extern "C" {static PyObject *meth_QPlainTextEdit_setExtraSelections(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setExtraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList< ::QTextEdit::ExtraSelection>* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QList_0100QTextEdit_ExtraSelection,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExtraSelections(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList< ::QTextEdit::ExtraSelection> *>(a0),sipType_QList_0100QTextEdit_ExtraSelection,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setExtraSelections, doc_QPlainTextEdit_setExtraSelections);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_extraSelections, "extraSelections(self) -> List[QTextEdit.ExtraSelection]");

extern "C" {static PyObject *meth_QPlainTextEdit_extraSelections(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_extraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            QList< ::QTextEdit::ExtraSelection>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QTextEdit::ExtraSelection>(sipCpp->extraSelections());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextEdit_ExtraSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_extraSelections, doc_QPlainTextEdit_extraSelections);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_moveCursor, "moveCursor(self, QTextCursor.MoveOperation, mode: QTextCursor.MoveMode = QTextCursor.MoveAnchor)");

extern "C" {static PyObject *meth_QPlainTextEdit_moveCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_moveCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextCursor::MoveOperation a0;
         ::QTextCursor::MoveMode a1 = QTextCursor::MoveAnchor;
         ::QPlainTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|E", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextCursor_MoveOperation, &a0, sipType_QTextCursor_MoveMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveCursor(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_moveCursor, doc_QPlainTextEdit_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_canPaste, "canPaste(self) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_canPaste(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_canPaste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->canPaste();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_canPaste, doc_QPlainTextEdit_canPaste);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_print_, "print_(self, QPrinter)");

extern "C" {static PyObject *meth_QPlainTextEdit_print_(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPrinter* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QPrinter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->print(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_print_, doc_QPlainTextEdit_print_);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_blockCount, "blockCount(self) -> int");

extern "C" {static PyObject *meth_QPlainTextEdit_blockCount(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_blockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->blockCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_blockCount, doc_QPlainTextEdit_blockCount);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_setPlainText, "setPlainText(self, str)");

extern "C" {static PyObject *meth_QPlainTextEdit_setPlainText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPlainText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_setPlainText, doc_QPlainTextEdit_setPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_cut, "cut(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_cut(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_cut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->cut();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_cut, doc_QPlainTextEdit_cut);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_copy, "copy(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_copy(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->copy();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_copy, doc_QPlainTextEdit_copy);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_paste, "paste(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_paste(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_paste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->paste();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_paste, doc_QPlainTextEdit_paste);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_undo, "undo(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_undo(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->undo();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_undo, doc_QPlainTextEdit_undo);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_redo, "redo(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_redo(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->redo();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_redo, doc_QPlainTextEdit_redo);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_clear, "clear(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_clear(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_clear, doc_QPlainTextEdit_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_selectAll, "selectAll(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->selectAll();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_selectAll, doc_QPlainTextEdit_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_insertPlainText, "insertPlainText(self, str)");

extern "C" {static PyObject *meth_QPlainTextEdit_insertPlainText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_insertPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertPlainText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_insertPlainText, doc_QPlainTextEdit_insertPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_appendPlainText, "appendPlainText(self, str)");

extern "C" {static PyObject *meth_QPlainTextEdit_appendPlainText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_appendPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendPlainText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_appendPlainText, doc_QPlainTextEdit_appendPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_appendHtml, "appendHtml(self, str)");

extern "C" {static PyObject *meth_QPlainTextEdit_appendHtml(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_appendHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendHtml(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_appendHtml, doc_QPlainTextEdit_appendHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_centerCursor, "centerCursor(self)");

extern "C" {static PyObject *meth_QPlainTextEdit_centerCursor(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_centerCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->centerCursor();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_centerCursor, doc_QPlainTextEdit_centerCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_event(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_event, doc_QPlainTextEdit_event);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::timerEvent(a0) : sipCpp->timerEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_timerEvent, doc_QPlainTextEdit_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_keyPressEvent, doc_QPlainTextEdit_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_keyReleaseEvent, doc_QPlainTextEdit_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_resizeEvent, doc_QPlainTextEdit_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_paintEvent, doc_QPlainTextEdit_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_mousePressEvent, doc_QPlainTextEdit_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_mouseMoveEvent, doc_QPlainTextEdit_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_mouseReleaseEvent, doc_QPlainTextEdit_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_mouseDoubleClickEvent, doc_QPlainTextEdit_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_focusNextPrevChild, doc_QPlainTextEdit_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_contextMenuEvent, doc_QPlainTextEdit_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_dragEnterEvent, doc_QPlainTextEdit_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_dragLeaveEvent, doc_QPlainTextEdit_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_dragMoveEvent, doc_QPlainTextEdit_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::dropEvent(a0) : sipCpp->dropEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_dropEvent, doc_QPlainTextEdit_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_focusInEvent, doc_QPlainTextEdit_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_focusOutEvent, doc_QPlainTextEdit_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::showEvent(a0) : sipCpp->showEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_showEvent, doc_QPlainTextEdit_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_changeEvent, doc_QPlainTextEdit_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::wheelEvent(a0) : sipCpp->wheelEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_wheelEvent, doc_QPlainTextEdit_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QPlainTextEdit_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_inputMethodEvent, doc_QPlainTextEdit_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> Any");

extern "C" {static PyObject *meth_QPlainTextEdit_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::InputMethodQuery a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_inputMethodQuery, doc_QPlainTextEdit_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_createMimeDataFromSelection, "createMimeDataFromSelection(self) -> QMimeData");

extern "C" {static PyObject *meth_QPlainTextEdit_createMimeDataFromSelection(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_createMimeDataFromSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QMimeData*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::createMimeDataFromSelection() : sipCpp->createMimeDataFromSelection());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMimeData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_createMimeDataFromSelection, doc_QPlainTextEdit_createMimeDataFromSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_canInsertFromMimeData, "canInsertFromMimeData(self, QMimeData) -> bool");

extern "C" {static PyObject *meth_QPlainTextEdit_canInsertFromMimeData(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_canInsertFromMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QMimeData, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::canInsertFromMimeData(a0) : sipCpp->canInsertFromMimeData(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_canInsertFromMimeData, doc_QPlainTextEdit_canInsertFromMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_insertFromMimeData, "insertFromMimeData(self, QMimeData)");

extern "C" {static PyObject *meth_QPlainTextEdit_insertFromMimeData(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_insertFromMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QMimeData, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::insertFromMimeData(a0) : sipCpp->insertFromMimeData(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_insertFromMimeData, doc_QPlainTextEdit_insertFromMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_scrollContentsBy, "scrollContentsBy(self, int, int)");

extern "C" {static PyObject *meth_QPlainTextEdit_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
         ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QPlainTextEdit, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextEdit::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_scrollContentsBy, doc_QPlainTextEdit_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_firstVisibleBlock, "firstVisibleBlock(self) -> QTextBlock");

extern "C" {static PyObject *meth_QPlainTextEdit_firstVisibleBlock(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_firstVisibleBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QTextBlock*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTextBlock(sipCpp->firstVisibleBlock());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_firstVisibleBlock, doc_QPlainTextEdit_firstVisibleBlock);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_contentOffset, "contentOffset(self) -> QPointF");

extern "C" {static PyObject *meth_QPlainTextEdit_contentOffset(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_contentOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPointF(sipCpp->contentOffset());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_contentOffset, doc_QPlainTextEdit_contentOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_blockBoundingRect, "blockBoundingRect(self, QTextBlock) -> QRectF");

extern "C" {static PyObject *meth_QPlainTextEdit_blockBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_blockBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextBlock* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextBlock, &a0))
        {
             ::QRectF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRectF(sipCpp->blockBoundingRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_blockBoundingRect, doc_QPlainTextEdit_blockBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_blockBoundingGeometry, "blockBoundingGeometry(self, QTextBlock) -> QRectF");

extern "C" {static PyObject *meth_QPlainTextEdit_blockBoundingGeometry(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_blockBoundingGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextBlock* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QTextBlock, &a0))
        {
             ::QRectF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRectF(sipCpp->blockBoundingGeometry(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_blockBoundingGeometry, doc_QPlainTextEdit_blockBoundingGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_getPaintContext, "getPaintContext(self) -> QAbstractTextDocumentLayout.PaintContext");

extern "C" {static PyObject *meth_QPlainTextEdit_getPaintContext(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_getPaintContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QPlainTextEdit, &sipCpp))
        {
             ::QAbstractTextDocumentLayout::PaintContext*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QAbstractTextDocumentLayout::PaintContext(sipCpp->getPaintContext());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QAbstractTextDocumentLayout_PaintContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_getPaintContext, doc_QPlainTextEdit_getPaintContext);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextEdit_anchorAt, "anchorAt(self, QPoint) -> str");

extern "C" {static PyObject *meth_QPlainTextEdit_anchorAt(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_anchorAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
        const  ::QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->anchorAt(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextEdit, sipName_anchorAt, doc_QPlainTextEdit_anchorAt);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPlainTextEdit(void *, const sipTypeDef *);}
static void *cast_QPlainTextEdit(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPlainTextEdit *sipCpp = reinterpret_cast< ::QPlainTextEdit *>(sipCppV);

    if (targetType == sipType_QAbstractScrollArea)
        return static_cast< ::QAbstractScrollArea *>(sipCpp);

    if (targetType == sipType_QFrame)
        return static_cast< ::QFrame *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlainTextEdit(void *, int);}
static void release_QPlainTextEdit(void *sipCppV, int)
{
     ::QPlainTextEdit *sipCpp = reinterpret_cast< ::QPlainTextEdit *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QPlainTextEdit(sipSimpleWrapper *);}
static void dealloc_QPlainTextEdit(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPlainTextEdit *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPlainTextEdit(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPlainTextEdit(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlainTextEdit(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPlainTextEdit *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPlainTextEdit(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPlainTextEdit(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlainTextEdit[] = {{21, 255, 1}};


static PyMethodDef methods_QPlainTextEdit[] = {
    {SIP_MLNAME_CAST(sipName_anchorAt), meth_QPlainTextEdit_anchorAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_anchorAt)},
    {SIP_MLNAME_CAST(sipName_appendHtml), meth_QPlainTextEdit_appendHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_appendHtml)},
    {SIP_MLNAME_CAST(sipName_appendPlainText), meth_QPlainTextEdit_appendPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_appendPlainText)},
    {SIP_MLNAME_CAST(sipName_backgroundVisible), meth_QPlainTextEdit_backgroundVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_backgroundVisible)},
    {SIP_MLNAME_CAST(sipName_blockBoundingGeometry), meth_QPlainTextEdit_blockBoundingGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_blockBoundingGeometry)},
    {SIP_MLNAME_CAST(sipName_blockBoundingRect), meth_QPlainTextEdit_blockBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_blockBoundingRect)},
    {SIP_MLNAME_CAST(sipName_blockCount), meth_QPlainTextEdit_blockCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_blockCount)},
    {SIP_MLNAME_CAST(sipName_canInsertFromMimeData), meth_QPlainTextEdit_canInsertFromMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_canInsertFromMimeData)},
    {SIP_MLNAME_CAST(sipName_canPaste), meth_QPlainTextEdit_canPaste, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_canPaste)},
    {SIP_MLNAME_CAST(sipName_centerCursor), meth_QPlainTextEdit_centerCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_centerCursor)},
    {SIP_MLNAME_CAST(sipName_centerOnScroll), meth_QPlainTextEdit_centerOnScroll, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_centerOnScroll)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QPlainTextEdit_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_changeEvent)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QPlainTextEdit_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_clear)},
    {SIP_MLNAME_CAST(sipName_contentOffset), meth_QPlainTextEdit_contentOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_contentOffset)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QPlainTextEdit_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_copy), meth_QPlainTextEdit_copy, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_copy)},
    {SIP_MLNAME_CAST(sipName_createMimeDataFromSelection), meth_QPlainTextEdit_createMimeDataFromSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_createMimeDataFromSelection)},
    {SIP_MLNAME_CAST(sipName_createStandardContextMenu), meth_QPlainTextEdit_createStandardContextMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_createStandardContextMenu)},
    {SIP_MLNAME_CAST(sipName_currentCharFormat), meth_QPlainTextEdit_currentCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_currentCharFormat)},
    {SIP_MLNAME_CAST(sipName_cursorForPosition), meth_QPlainTextEdit_cursorForPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_cursorForPosition)},
    {SIP_MLNAME_CAST(sipName_cursorRect), meth_QPlainTextEdit_cursorRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_cursorRect)},
    {SIP_MLNAME_CAST(sipName_cursorWidth), meth_QPlainTextEdit_cursorWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_cursorWidth)},
    {SIP_MLNAME_CAST(sipName_cut), meth_QPlainTextEdit_cut, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_cut)},
    {SIP_MLNAME_CAST(sipName_document), meth_QPlainTextEdit_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_document)},
    {SIP_MLNAME_CAST(sipName_documentTitle), meth_QPlainTextEdit_documentTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_documentTitle)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QPlainTextEdit_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QPlainTextEdit_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QPlainTextEdit_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QPlainTextEdit_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_dropEvent)},
    {SIP_MLNAME_CAST(sipName_ensureCursorVisible), meth_QPlainTextEdit_ensureCursorVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_ensureCursorVisible)},
    {SIP_MLNAME_CAST(sipName_event), meth_QPlainTextEdit_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_event)},
    {SIP_MLNAME_CAST(sipName_extraSelections), meth_QPlainTextEdit_extraSelections, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_extraSelections)},
    {SIP_MLNAME_CAST(sipName_find), (PyCFunction)meth_QPlainTextEdit_find, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPlainTextEdit_find)},
    {SIP_MLNAME_CAST(sipName_firstVisibleBlock), meth_QPlainTextEdit_firstVisibleBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_firstVisibleBlock)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QPlainTextEdit_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QPlainTextEdit_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QPlainTextEdit_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_getPaintContext), meth_QPlainTextEdit_getPaintContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_getPaintContext)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QPlainTextEdit_inputMethodEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QPlainTextEdit_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_insertFromMimeData), meth_QPlainTextEdit_insertFromMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_insertFromMimeData)},
    {SIP_MLNAME_CAST(sipName_insertPlainText), meth_QPlainTextEdit_insertPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_insertPlainText)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QPlainTextEdit_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_isUndoRedoEnabled), meth_QPlainTextEdit_isUndoRedoEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_isUndoRedoEnabled)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QPlainTextEdit_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QPlainTextEdit_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_lineWrapMode), meth_QPlainTextEdit_lineWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_lineWrapMode)},
    {SIP_MLNAME_CAST(sipName_loadResource), meth_QPlainTextEdit_loadResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_loadResource)},
    {SIP_MLNAME_CAST(sipName_maximumBlockCount), meth_QPlainTextEdit_maximumBlockCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_maximumBlockCount)},
    {SIP_MLNAME_CAST(sipName_mergeCurrentCharFormat), meth_QPlainTextEdit_mergeCurrentCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_mergeCurrentCharFormat)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QPlainTextEdit_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QPlainTextEdit_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QPlainTextEdit_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QPlainTextEdit_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), (PyCFunction)meth_QPlainTextEdit_moveCursor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPlainTextEdit_moveCursor)},
    {SIP_MLNAME_CAST(sipName_overwriteMode), meth_QPlainTextEdit_overwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_overwriteMode)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QPlainTextEdit_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_paintEvent)},
    {SIP_MLNAME_CAST(sipName_paste), meth_QPlainTextEdit_paste, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_paste)},
    {SIP_MLNAME_CAST(sipName_print_), meth_QPlainTextEdit_print_, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_print_)},
    {SIP_MLNAME_CAST(sipName_redo), meth_QPlainTextEdit_redo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_redo)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QPlainTextEdit_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QPlainTextEdit_scrollContentsBy, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QPlainTextEdit_selectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_selectAll)},
    {SIP_MLNAME_CAST(sipName_setBackgroundVisible), meth_QPlainTextEdit_setBackgroundVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setBackgroundVisible)},
    {SIP_MLNAME_CAST(sipName_setCenterOnScroll), meth_QPlainTextEdit_setCenterOnScroll, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setCenterOnScroll)},
    {SIP_MLNAME_CAST(sipName_setCurrentCharFormat), meth_QPlainTextEdit_setCurrentCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setCurrentCharFormat)},
    {SIP_MLNAME_CAST(sipName_setCursorWidth), meth_QPlainTextEdit_setCursorWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setCursorWidth)},
    {SIP_MLNAME_CAST(sipName_setDocument), meth_QPlainTextEdit_setDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setDocument)},
    {SIP_MLNAME_CAST(sipName_setDocumentTitle), meth_QPlainTextEdit_setDocumentTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setDocumentTitle)},
    {SIP_MLNAME_CAST(sipName_setExtraSelections), meth_QPlainTextEdit_setExtraSelections, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setExtraSelections)},
    {SIP_MLNAME_CAST(sipName_setLineWrapMode), meth_QPlainTextEdit_setLineWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setLineWrapMode)},
    {SIP_MLNAME_CAST(sipName_setMaximumBlockCount), meth_QPlainTextEdit_setMaximumBlockCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setMaximumBlockCount)},
    {SIP_MLNAME_CAST(sipName_setOverwriteMode), meth_QPlainTextEdit_setOverwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setOverwriteMode)},
    {SIP_MLNAME_CAST(sipName_setPlainText), meth_QPlainTextEdit_setPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setPlainText)},
    {SIP_MLNAME_CAST(sipName_setReadOnly), meth_QPlainTextEdit_setReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setReadOnly)},
    {SIP_MLNAME_CAST(sipName_setTabChangesFocus), meth_QPlainTextEdit_setTabChangesFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setTabChangesFocus)},
    {SIP_MLNAME_CAST(sipName_setTabStopWidth), meth_QPlainTextEdit_setTabStopWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setTabStopWidth)},
    {SIP_MLNAME_CAST(sipName_setTextCursor), meth_QPlainTextEdit_setTextCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setTextCursor)},
    {SIP_MLNAME_CAST(sipName_setTextInteractionFlags), meth_QPlainTextEdit_setTextInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setTextInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_setUndoRedoEnabled), meth_QPlainTextEdit_setUndoRedoEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setUndoRedoEnabled)},
    {SIP_MLNAME_CAST(sipName_setWordWrapMode), meth_QPlainTextEdit_setWordWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_setWordWrapMode)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QPlainTextEdit_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_showEvent)},
    {SIP_MLNAME_CAST(sipName_tabChangesFocus), meth_QPlainTextEdit_tabChangesFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_tabChangesFocus)},
    {SIP_MLNAME_CAST(sipName_tabStopWidth), meth_QPlainTextEdit_tabStopWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_tabStopWidth)},
    {SIP_MLNAME_CAST(sipName_textCursor), meth_QPlainTextEdit_textCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_textCursor)},
    {SIP_MLNAME_CAST(sipName_textInteractionFlags), meth_QPlainTextEdit_textInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_textInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QPlainTextEdit_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_timerEvent)},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QPlainTextEdit_toPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_toPlainText)},
    {SIP_MLNAME_CAST(sipName_undo), meth_QPlainTextEdit_undo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_undo)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QPlainTextEdit_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_wordWrapMode), meth_QPlainTextEdit_wordWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextEdit_wordWrapMode)}
};

static sipEnumMemberDef enummembers_QPlainTextEdit[] = {
    {sipName_NoWrap, static_cast<int>( ::QPlainTextEdit::NoWrap), 400},
    {sipName_WidgetWidth, static_cast<int>( ::QPlainTextEdit::WidgetWidth), 400},
};

PyDoc_STRVAR(doc_QPlainTextEdit, "\1QPlainTextEdit(parent: QWidget = None)\n"
    "QPlainTextEdit(str, parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QPlainTextEdit[] = {
    {"modificationChanged(bool)", "\1modificationChanged(self, bool)", 0, 0},
    {"blockCountChanged(int)", "\1blockCountChanged(self, int)", 0, 0},
    {"updateRequest(QRect,int)", "\1updateRequest(self, QRect, int)", 0, 0},
    {"cursorPositionChanged()", "\1cursorPositionChanged(self)", 0, 0},
    {"selectionChanged()", "\1selectionChanged(self)", 0, 0},
    {"copyAvailable(bool)", "\1copyAvailable(self, bool)", 0, 0},
    {"redoAvailable(bool)", "\1redoAvailable(self, bool)", 0, 0},
    {"undoAvailable(bool)", "\1undoAvailable(self, bool)", 0, 0},
    {"textChanged()", "\1textChanged(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QPlainTextEdit = {
    & ::QPlainTextEdit::staticMetaObject,
    0,
    signals_QPlainTextEdit
};


sipClassTypeDef sipTypeDef_QtGui_QPlainTextEdit = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QPlainTextEdit,
        {0},
        &plugin_QPlainTextEdit
    },
    {
        sipNameNr_QPlainTextEdit,
        {0, 0, 1},
        91, methods_QPlainTextEdit,
        2, enummembers_QPlainTextEdit,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlainTextEdit,
    -1,
    -1,
    supers_QPlainTextEdit,
    0,
    init_type_QPlainTextEdit,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlainTextEdit,
    0,
    0,
    0,
    release_QPlainTextEdit,
    cast_QPlainTextEdit,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlistwidget.sip"
#include <qlistwidget.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListWidgetItem.cpp"

#line 128 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlistwidget.sip"
#include <qlistwidget.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListWidgetItem.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListWidgetItem.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListWidgetItem.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListWidgetItem.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListWidgetItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListWidgetItem.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListWidgetItem.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListWidgetItem.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListWidgetItem.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListWidgetItem.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListWidgetItem.cpp"


class sipQListWidgetItem : public  ::QListWidgetItem
{
public:
    sipQListWidgetItem( ::QListWidget*,int);
    sipQListWidgetItem(const  ::QString&, ::QListWidget*,int);
    sipQListWidgetItem(const  ::QIcon&,const  ::QString&, ::QListWidget*,int);
    sipQListWidgetItem(const  ::QListWidgetItem&);
    virtual ~sipQListWidgetItem();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void write( ::QDataStream&) const;
    void read( ::QDataStream&);
    bool operator<(const  ::QListWidgetItem&) const;
    void setData(int,const  ::QVariant&);
     ::QVariant data(int) const;
    void setBackgroundColor(const  ::QColor&);
     ::QListWidgetItem* clone() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQListWidgetItem(const sipQListWidgetItem &);
    sipQListWidgetItem &operator = (const sipQListWidgetItem &);

    char sipPyMethods[7];
};

sipQListWidgetItem::sipQListWidgetItem( ::QListWidget*a0,int a1):  ::QListWidgetItem(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQListWidgetItem::sipQListWidgetItem(const  ::QString& a0, ::QListWidget*a1,int a2):  ::QListWidgetItem(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQListWidgetItem::sipQListWidgetItem(const  ::QIcon& a0,const  ::QString& a1, ::QListWidget*a2,int a3):  ::QListWidgetItem(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQListWidgetItem::sipQListWidgetItem(const  ::QListWidgetItem& a0):  ::QListWidgetItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQListWidgetItem::~sipQListWidgetItem()
{
    sipCommonDtor(sipPySelf);
}

void sipQListWidgetItem::write( ::QDataStream& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_write);

    if (!sipMeth)
    {
         ::QListWidgetItem::write(a0);
        return;
    }

    extern void sipVH_QtGui_214(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDataStream&);

    sipVH_QtGui_214(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListWidgetItem::read( ::QDataStream& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_read);

    if (!sipMeth)
    {
         ::QListWidgetItem::read(a0);
        return;
    }

    extern void sipVH_QtGui_214(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDataStream&);

    sipVH_QtGui_214(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQListWidgetItem::operator<(const  ::QListWidgetItem& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName___lt__);

    if (!sipMeth)
        return  ::QListWidgetItem::operator<(a0);

    extern bool sipVH_QtGui_213(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QListWidgetItem&);

    return sipVH_QtGui_213(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListWidgetItem::setData(int a0,const  ::QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
    {
         ::QListWidgetItem::setData(a0,a1);
        return;
    }

    extern void sipVH_QtGui_212(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::QVariant&);

    sipVH_QtGui_212(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

 ::QVariant sipQListWidgetItem::data(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return  ::QListWidgetItem::data(a0);

    extern  ::QVariant sipVH_QtGui_211(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_211(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListWidgetItem::setBackgroundColor(const  ::QColor& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setBackgroundColor);

    if (!sipMeth)
    {
         ::QListWidgetItem::setBackgroundColor(a0);
        return;
    }

    extern void sipVH_QtGui_210(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QColor&);

    sipVH_QtGui_210(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QListWidgetItem* sipQListWidgetItem::clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_clone);

    if (!sipMeth)
        return  ::QListWidgetItem::clone();

    extern  ::QListWidgetItem* sipVH_QtGui_209(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_209(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QListWidgetItem_clone, "clone(self) -> QListWidgetItem");

extern "C" {static PyObject *meth_QListWidgetItem_clone(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::QListWidgetItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QListWidgetItem::clone() : sipCpp->clone());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QListWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_clone, doc_QListWidgetItem_clone);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_listWidget, "listWidget(self) -> QListWidget");

extern "C" {static PyObject *meth_QListWidgetItem_listWidget(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_listWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::QListWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->listWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QListWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_listWidget, doc_QListWidgetItem_listWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_flags, "flags(self) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QListWidgetItem_flags(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::Qt::ItemFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Qt::ItemFlags(sipCpp->flags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_flags, doc_QListWidgetItem_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_text, "text(self) -> str");

extern "C" {static PyObject *meth_QListWidgetItem_text(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->text());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_text, doc_QListWidgetItem_text);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_icon, "icon(self) -> QIcon");

extern "C" {static PyObject *meth_QListWidgetItem_icon(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::QIcon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QIcon(sipCpp->icon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_icon, doc_QListWidgetItem_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_statusTip, "statusTip(self) -> str");

extern "C" {static PyObject *meth_QListWidgetItem_statusTip(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_statusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->statusTip());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_statusTip, doc_QListWidgetItem_statusTip);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_toolTip, "toolTip(self) -> str");

extern "C" {static PyObject *meth_QListWidgetItem_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toolTip());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_toolTip, doc_QListWidgetItem_toolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_whatsThis, "whatsThis(self) -> str");

extern "C" {static PyObject *meth_QListWidgetItem_whatsThis(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_whatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->whatsThis());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_whatsThis, doc_QListWidgetItem_whatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_font, "font(self) -> QFont");

extern "C" {static PyObject *meth_QListWidgetItem_font(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::QFont*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QFont(sipCpp->font());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_font, doc_QListWidgetItem_font);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_textAlignment, "textAlignment(self) -> int");

extern "C" {static PyObject *meth_QListWidgetItem_textAlignment(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_textAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textAlignment();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_textAlignment, doc_QListWidgetItem_textAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setTextAlignment, "setTextAlignment(self, int)");

extern "C" {static PyObject *meth_QListWidgetItem_setTextAlignment(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setTextAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListWidgetItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextAlignment(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setTextAlignment, doc_QListWidgetItem_setTextAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_backgroundColor, "backgroundColor(self) -> QColor");

extern "C" {static PyObject *meth_QListWidgetItem_backgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_backgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::QColor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QColor(sipCpp->backgroundColor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_backgroundColor, doc_QListWidgetItem_backgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setBackgroundColor, "setBackgroundColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QListWidgetItem_setBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListWidgetItem::setBackgroundColor(*a0) : sipCpp->setBackgroundColor(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setBackgroundColor, doc_QListWidgetItem_setBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_textColor, "textColor(self) -> QColor");

extern "C" {static PyObject *meth_QListWidgetItem_textColor(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_textColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::QColor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QColor(sipCpp->textColor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_textColor, doc_QListWidgetItem_textColor);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setTextColor, "setTextColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QListWidgetItem_setTextColor(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setTextColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setTextColor, doc_QListWidgetItem_setTextColor);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_checkState, "checkState(self) -> Qt.CheckState");

extern "C" {static PyObject *meth_QListWidgetItem_checkState(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_checkState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::Qt::CheckState sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->checkState();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_CheckState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_checkState, doc_QListWidgetItem_checkState);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setCheckState, "setCheckState(self, Qt.CheckState)");

extern "C" {static PyObject *meth_QListWidgetItem_setCheckState(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setCheckState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::CheckState a0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_Qt_CheckState, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCheckState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setCheckState, doc_QListWidgetItem_setCheckState);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QListWidgetItem_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize(sipCpp->sizeHint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_sizeHint, doc_QListWidgetItem_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setSizeHint, "setSizeHint(self, QSize)");

extern "C" {static PyObject *meth_QListWidgetItem_setSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSize* a0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSizeHint(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setSizeHint, doc_QListWidgetItem_setSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_data, "data(self, int) -> Any");

extern "C" {static PyObject *meth_QListWidgetItem_data(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListWidgetItem, &sipCpp, &a0))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QListWidgetItem::data(a0) : sipCpp->data(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_data, doc_QListWidgetItem_data);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setData, "setData(self, int, Any)");

extern "C" {static PyObject *meth_QListWidgetItem_setData(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QListWidgetItem, &sipCpp, &a0, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListWidgetItem::setData(a0,*a1) : sipCpp->setData(a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setData, doc_QListWidgetItem_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_read, "read(self, QDataStream)");

extern "C" {static PyObject *meth_QListWidgetItem_read(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDataStream* a0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListWidgetItem::read(*a0) : sipCpp->read(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_read, doc_QListWidgetItem_read);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_write, "write(self, QDataStream)");

extern "C" {static PyObject *meth_QListWidgetItem_write(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDataStream* a0;
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListWidgetItem::write(*a0) : sipCpp->write(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_write, doc_QListWidgetItem_write);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_type, "type(self) -> int");

extern "C" {static PyObject *meth_QListWidgetItem_type(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_type, doc_QListWidgetItem_type);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setFlags, "setFlags(self, Union[Qt.ItemFlags, Qt.ItemFlag])");

extern "C" {static PyObject *meth_QListWidgetItem_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::ItemFlags* a0;
        int a0State = 0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_Qt_ItemFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFlags(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_ItemFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setFlags, doc_QListWidgetItem_setFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QListWidgetItem_setText(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setText, doc_QListWidgetItem_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setIcon, "setIcon(self, QIcon)");

extern "C" {static PyObject *meth_QListWidgetItem_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QIcon* a0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_QIcon, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIcon(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setIcon, doc_QListWidgetItem_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setStatusTip, "setStatusTip(self, str)");

extern "C" {static PyObject *meth_QListWidgetItem_setStatusTip(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setStatusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStatusTip(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setStatusTip, doc_QListWidgetItem_setStatusTip);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setToolTip, "setToolTip(self, str)");

extern "C" {static PyObject *meth_QListWidgetItem_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setToolTip(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setToolTip, doc_QListWidgetItem_setToolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setWhatsThis, "setWhatsThis(self, str)");

extern "C" {static PyObject *meth_QListWidgetItem_setWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWhatsThis(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setWhatsThis, doc_QListWidgetItem_setWhatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setFont, "setFont(self, QFont)");

extern "C" {static PyObject *meth_QListWidgetItem_setFont(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFont* a0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFont(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setFont, doc_QListWidgetItem_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_background, "background(self) -> QBrush");

extern "C" {static PyObject *meth_QListWidgetItem_background(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::QBrush*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QBrush(sipCpp->background());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_background, doc_QListWidgetItem_background);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setBackground, "setBackground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QListWidgetItem_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackground(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setBackground, doc_QListWidgetItem_setBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_foreground, "foreground(self) -> QBrush");

extern "C" {static PyObject *meth_QListWidgetItem_foreground(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
             ::QBrush*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QBrush(sipCpp->foreground());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_foreground, doc_QListWidgetItem_foreground);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setForeground, "setForeground(self, Union[QBrush, QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QListWidgetItem_setForeground(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QBrush* a0;
        int a0State = 0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QListWidgetItem, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setForeground(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setForeground, doc_QListWidgetItem_setForeground);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setSelected, "setSelected(self, bool)");

extern "C" {static PyObject *meth_QListWidgetItem_setSelected(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListWidgetItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSelected(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setSelected, doc_QListWidgetItem_setSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_isSelected, "isSelected(self) -> bool");

extern "C" {static PyObject *meth_QListWidgetItem_isSelected(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_isSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSelected();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_isSelected, doc_QListWidgetItem_isSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_setHidden, "setHidden(self, bool)");

extern "C" {static PyObject *meth_QListWidgetItem_setHidden(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_setHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListWidgetItem, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHidden(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_setHidden, doc_QListWidgetItem_setHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QListWidgetItem_isHidden, "isHidden(self) -> bool");

extern "C" {static PyObject *meth_QListWidgetItem_isHidden(PyObject *, PyObject *);}
static PyObject *meth_QListWidgetItem_isHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListWidgetItem, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isHidden();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListWidgetItem, sipName_isHidden, doc_QListWidgetItem_isHidden);

    return NULL;
}


extern "C" {static PyObject *slot_QListWidgetItem___ge__(PyObject *,PyObject *);}
static PyObject *slot_QListWidgetItem___ge__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QListWidgetItem *sipCpp = reinterpret_cast< ::QListWidgetItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QListWidgetItem));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QListWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp-> ::QListWidgetItem::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ge_slot, sipType_QListWidgetItem, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QListWidgetItem___lt__(PyObject *,PyObject *);}
static PyObject *slot_QListWidgetItem___lt__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QListWidgetItem *sipCpp = reinterpret_cast< ::QListWidgetItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QListWidgetItem));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QListWidgetItem* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QListWidgetItem, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QListWidgetItem::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, lt_slot, sipType_QListWidgetItem, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QListWidgetItem(void *, int);}
static void release_QListWidgetItem(void *sipCppV, int sipIsDerived)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipIsDerived)
        delete reinterpret_cast<sipQListWidgetItem *>(sipCppV);
    else
        delete reinterpret_cast< ::QListWidgetItem *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QListWidgetItem(sipSimpleWrapper *);}
static void dealloc_QListWidgetItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQListWidgetItem *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QListWidgetItem(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QListWidgetItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QListWidgetItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQListWidgetItem *sipCpp = 0;

    {
         ::QListWidget* a0 = 0;
        int a1 =  ::QListWidgetItem::Type;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHi", sipType_QListWidget, &a0, sipOwner, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQListWidgetItem(a0,a1);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QListWidget* a1 = 0;
        int a2 =  ::QListWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JHi", sipType_QString,&a0, &a0State, sipType_QListWidget, &a1, sipOwner, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQListWidgetItem(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QIcon* a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QListWidget* a2 = 0;
        int a3 =  ::QListWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J1|JHi", sipType_QIcon, &a0, sipType_QString,&a1, &a1State, sipType_QListWidget, &a2, sipOwner, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQListWidgetItem(*a0,*a1,a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QListWidgetItem* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QListWidgetItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQListWidgetItem(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QListWidgetItem[] = {
    {(void *)slot_QListWidgetItem___ge__, ge_slot},
    {(void *)slot_QListWidgetItem___lt__, lt_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QListWidgetItem[] = {
    {SIP_MLNAME_CAST(sipName_background), meth_QListWidgetItem_background, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_background)},
    {SIP_MLNAME_CAST(sipName_backgroundColor), meth_QListWidgetItem_backgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_backgroundColor)},
    {SIP_MLNAME_CAST(sipName_checkState), meth_QListWidgetItem_checkState, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_checkState)},
    {SIP_MLNAME_CAST(sipName_clone), meth_QListWidgetItem_clone, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_clone)},
    {SIP_MLNAME_CAST(sipName_data), meth_QListWidgetItem_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_data)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QListWidgetItem_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_flags)},
    {SIP_MLNAME_CAST(sipName_font), meth_QListWidgetItem_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_font)},
    {SIP_MLNAME_CAST(sipName_foreground), meth_QListWidgetItem_foreground, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_foreground)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QListWidgetItem_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_icon)},
    {SIP_MLNAME_CAST(sipName_isHidden), meth_QListWidgetItem_isHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_isHidden)},
    {SIP_MLNAME_CAST(sipName_isSelected), meth_QListWidgetItem_isSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_isSelected)},
    {SIP_MLNAME_CAST(sipName_listWidget), meth_QListWidgetItem_listWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_listWidget)},
    {SIP_MLNAME_CAST(sipName_read), meth_QListWidgetItem_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_read)},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QListWidgetItem_setBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setBackground)},
    {SIP_MLNAME_CAST(sipName_setBackgroundColor), meth_QListWidgetItem_setBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setCheckState), meth_QListWidgetItem_setCheckState, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setCheckState)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QListWidgetItem_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setData)},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QListWidgetItem_setFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setFlags)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QListWidgetItem_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setFont)},
    {SIP_MLNAME_CAST(sipName_setForeground), meth_QListWidgetItem_setForeground, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setForeground)},
    {SIP_MLNAME_CAST(sipName_setHidden), meth_QListWidgetItem_setHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setHidden)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QListWidgetItem_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setIcon)},
    {SIP_MLNAME_CAST(sipName_setSelected), meth_QListWidgetItem_setSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setSelected)},
    {SIP_MLNAME_CAST(sipName_setSizeHint), meth_QListWidgetItem_setSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setSizeHint)},
    {SIP_MLNAME_CAST(sipName_setStatusTip), meth_QListWidgetItem_setStatusTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setStatusTip)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QListWidgetItem_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setText)},
    {SIP_MLNAME_CAST(sipName_setTextAlignment), meth_QListWidgetItem_setTextAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setTextAlignment)},
    {SIP_MLNAME_CAST(sipName_setTextColor), meth_QListWidgetItem_setTextColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setTextColor)},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QListWidgetItem_setToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setToolTip)},
    {SIP_MLNAME_CAST(sipName_setWhatsThis), meth_QListWidgetItem_setWhatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_setWhatsThis)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QListWidgetItem_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_sizeHint)},
    {SIP_MLNAME_CAST(sipName_statusTip), meth_QListWidgetItem_statusTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_statusTip)},
    {SIP_MLNAME_CAST(sipName_text), meth_QListWidgetItem_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_text)},
    {SIP_MLNAME_CAST(sipName_textAlignment), meth_QListWidgetItem_textAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_textAlignment)},
    {SIP_MLNAME_CAST(sipName_textColor), meth_QListWidgetItem_textColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_textColor)},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QListWidgetItem_toolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_toolTip)},
    {SIP_MLNAME_CAST(sipName_type), meth_QListWidgetItem_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_type)},
    {SIP_MLNAME_CAST(sipName_whatsThis), meth_QListWidgetItem_whatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_whatsThis)},
    {SIP_MLNAME_CAST(sipName_write), meth_QListWidgetItem_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QListWidgetItem_write)}
};

static sipEnumMemberDef enummembers_QListWidgetItem[] = {
    {sipName_Type, static_cast<int>( ::QListWidgetItem::Type), 322},
    {sipName_UserType, static_cast<int>( ::QListWidgetItem::UserType), 322},
};

PyDoc_STRVAR(doc_QListWidgetItem, "\1QListWidgetItem(parent: QListWidget = None, type: int = QListWidgetItem.Type)\n"
    "QListWidgetItem(str, parent: QListWidget = None, type: int = QListWidgetItem.Type)\n"
    "QListWidgetItem(QIcon, str, parent: QListWidget = None, type: int = QListWidgetItem.Type)\n"
    "QListWidgetItem(QListWidgetItem)");


static pyqt4ClassPluginDef plugin_QListWidgetItem = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QListWidgetItem = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QListWidgetItem,
        {0},
        &plugin_QListWidgetItem
    },
    {
        sipNameNr_QListWidgetItem,
        {0, 0, 1},
        39, methods_QListWidgetItem,
        2, enummembers_QListWidgetItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QListWidgetItem,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    slots_QListWidgetItem,
    init_type_QListWidgetItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QListWidgetItem,
    0,
    0,
    0,
    release_QListWidgetItem,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

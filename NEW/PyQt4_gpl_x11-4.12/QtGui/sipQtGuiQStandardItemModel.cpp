/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 184 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 139 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 139 "sip/QtCore/qhash.sip"
#include <qhash.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQStandardItemModel.cpp"


class sipQStandardItemModel : public  ::QStandardItemModel
{
public:
    sipQStandardItemModel( ::QObject*);
    sipQStandardItemModel(int,int, ::QObject*);
    virtual ~sipQStandardItemModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
     ::QModelIndex index(int,int,const  ::QModelIndex&) const;
     ::QModelIndex parent(const  ::QModelIndex&) const;
    int rowCount(const  ::QModelIndex&) const;
    int columnCount(const  ::QModelIndex&) const;
    bool hasChildren(const  ::QModelIndex&) const;
     ::QVariant data(const  ::QModelIndex&,int) const;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int);
     ::QVariant headerData(int, ::Qt::Orientation,int) const;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int);
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&);
     ::QStringList mimeTypes() const;
     ::QMimeData* mimeData(const  ::QModelIndexList&) const;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);
     ::Qt::DropActions supportedDropActions() const;
    bool insertRows(int,int,const  ::QModelIndex&);
    bool insertColumns(int,int,const  ::QModelIndex&);
    bool removeRows(int,int,const  ::QModelIndex&);
    bool removeColumns(int,int,const  ::QModelIndex&);
    void fetchMore(const  ::QModelIndex&);
    bool canFetchMore(const  ::QModelIndex&) const;
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const;
    void sort(int, ::Qt::SortOrder);
     ::QModelIndex buddy(const  ::QModelIndex&) const;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const;
     ::QSize span(const  ::QModelIndex&) const;
    bool submit();
    void revert();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStandardItemModel(const sipQStandardItemModel &);
    sipQStandardItemModel &operator = (const sipQStandardItemModel &);

    char sipPyMethods[35];
};

sipQStandardItemModel::sipQStandardItemModel( ::QObject*a0):  ::QStandardItemModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItemModel::sipQStandardItemModel(int a0,int a1, ::QObject*a2):  ::QStandardItemModel(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItemModel::~sipQStandardItemModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQStandardItemModel::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QStandardItemModel);
}

int sipQStandardItemModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QStandardItemModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QStandardItemModel,_c,_id,_a);

    return _id;
}

void *sipQStandardItemModel::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QStandardItemModel, _clname)) ? this :  ::QStandardItemModel::qt_metacast(_clname);
}

void sipQStandardItemModel::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QStandardItemModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QStandardItemModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QStandardItemModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QStandardItemModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QStandardItemModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QStandardItemModel::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQStandardItemModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QStandardItemModel::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQStandardItemModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return  ::QStandardItemModel::index(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtGui_85(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_85(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndex sipQStandardItemModel::parent(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_parent);

    if (!sipMeth)
        return  ::QStandardItemModel::parent(a0);

    extern  ::QModelIndex sipVH_QtGui_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_70(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQStandardItemModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_rowCount);

    if (!sipMeth)
        return  ::QStandardItemModel::rowCount(a0);

    extern int sipVH_QtGui_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_84(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQStandardItemModel::columnCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_columnCount);

    if (!sipMeth)
        return  ::QStandardItemModel::columnCount(a0);

    extern int sipVH_QtGui_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_84(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::hasChildren(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_hasChildren);

    if (!sipMeth)
        return  ::QStandardItemModel::hasChildren(a0);

    extern bool sipVH_QtGui_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_59(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQStandardItemModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return  ::QStandardItemModel::data(a0,a1);

    extern  ::QVariant sipVH_QtGui_83(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtGui_83(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQStandardItemModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return  ::QStandardItemModel::setData(a0,a1,a2);

    extern bool sipVH_QtGui_82(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtGui_82(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQStandardItemModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return  ::QStandardItemModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtGui_81(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtGui_81(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStandardItemModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return  ::QStandardItemModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtGui_80(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtGui_80(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QMap<int, ::QVariant> sipQStandardItemModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return  ::QStandardItemModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtGui_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_79(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return  ::QStandardItemModel::setItemData(a0,a1);

    extern bool sipVH_QtGui_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtGui_78(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

 ::QStringList sipQStandardItemModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return  ::QStandardItemModel::mimeTypes();

    extern  ::QStringList sipVH_QtGui_77(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_77(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QMimeData* sipQStandardItemModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return  ::QStandardItemModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtGui_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtGui_76(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return  ::QStandardItemModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtGui_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtGui_75(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::Qt::DropActions sipQStandardItemModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return  ::QStandardItemModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtGui_74(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_74(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQStandardItemModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return  ::QStandardItemModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStandardItemModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return  ::QStandardItemModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStandardItemModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return  ::QStandardItemModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQStandardItemModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return  ::QStandardItemModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQStandardItemModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
         ::QStandardItemModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtGui_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtGui_50(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return  ::QStandardItemModel::canFetchMore(a0);

    extern bool sipVH_QtGui_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_59(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::Qt::ItemFlags sipQStandardItemModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return  ::QStandardItemModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtGui_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_72(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQStandardItemModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
         ::QStandardItemModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtGui_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtGui_71(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

 ::QModelIndex sipQStandardItemModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return  ::QStandardItemModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtGui_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_70(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQStandardItemModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return  ::QStandardItemModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtGui_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtGui_69(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QSize sipQStandardItemModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return  ::QStandardItemModel::span(a0);

    extern  ::QSize sipVH_QtGui_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_68(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQStandardItemModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return  ::QStandardItemModel::submit();

    extern bool sipVH_QtGui_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_67(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQStandardItemModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
         ::QStandardItemModel::revert();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QStandardItemModel_index, "index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QStandardItemModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_index, doc_QStandardItemModel_index);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_parent, "parent(self, QModelIndex) -> QModelIndex\n"
    "parent(self) -> QObject");

extern "C" {static PyObject *meth_QStandardItemModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::parent(*a0) : sipCpp->parent(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    {
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
             ::QObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parent();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_parent, doc_QStandardItemModel_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_rowCount, "rowCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QStandardItemModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::rowCount(*a0) : sipCpp->rowCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_rowCount, doc_QStandardItemModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_columnCount, "columnCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QStandardItemModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::columnCount(*a0) : sipCpp->columnCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_columnCount, doc_QStandardItemModel_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_hasChildren, "hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_hasChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_hasChildren, doc_QStandardItemModel_hasChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_data, "data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QStandardItemModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::data(*a0,a1) : sipCpp->data(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_data, doc_QStandardItemModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setData, "setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant,&a1, &a1State, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setData, doc_QStandardItemModel_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_headerData, "headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QStandardItemModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiE|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_headerData, doc_QStandardItemModel_headerData);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setHeaderData, "setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_setHeaderData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setHeaderData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = Qt::EditRole;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiEJ1|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, sipType_QVariant,&a2, &a2State, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::setHeaderData(a0,a1,*a2,a3) : sipCpp->setHeaderData(a0,a1,*a2,a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setHeaderData, doc_QStandardItemModel_setHeaderData);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_insertRows, "insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_insertRows, doc_QStandardItemModel_insertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_insertColumns, "insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_insertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_insertColumns, doc_QStandardItemModel_insertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_removeRows, "removeRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_removeRows, doc_QStandardItemModel_removeRows);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_removeColumns, "removeColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_removeColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_removeColumns, doc_QStandardItemModel_removeColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QStandardItemModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::flags(*a0) : sipCpp->flags(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_flags, doc_QStandardItemModel_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_clear, "clear(self)");

extern "C" {static PyObject *meth_QStandardItemModel_clear(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_clear, doc_QStandardItemModel_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_supportedDropActions, "supportedDropActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QStandardItemModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Qt::DropActions((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::supportedDropActions() : sipCpp->supportedDropActions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_supportedDropActions, doc_QStandardItemModel_supportedDropActions);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_itemData, "itemData(self, QModelIndex) -> Dict[int, QVariant]");

extern "C" {static PyObject *meth_QStandardItemModel_itemData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_itemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QMap<int, ::QVariant>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMap<int, ::QVariant>((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::itemData(*a0) : sipCpp->itemData(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMap_1800_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_itemData, doc_QStandardItemModel_itemData);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setItemData, "setItemData(self, QModelIndex, Dict[int]) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_setItemData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setItemData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const QMap<int, ::QVariant>* a1;
        int a1State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QMap_1800_0100QVariant,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::setItemData(*a0,*a1) : sipCpp->setItemData(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QMap<int, ::QVariant> *>(a1),sipType_QMap_1800_0100QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setItemData, doc_QStandardItemModel_setItemData);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_sort, "sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QStandardItemModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::SortOrder a1 = Qt::AscendingOrder;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::sort(a0,a1) : sipCpp->sort(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_sort, doc_QStandardItemModel_sort);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_itemFromIndex, "itemFromIndex(self, QModelIndex) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_itemFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_itemFromIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QModelIndex* a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemFromIndex(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_itemFromIndex, doc_QStandardItemModel_itemFromIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_indexFromItem, "indexFromItem(self, QStandardItem) -> QModelIndex");

extern "C" {static PyObject *meth_QStandardItemModel_indexFromItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_indexFromItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStandardItem* a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStandardItem, &a0))
        {
             ::QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QModelIndex(sipCpp->indexFromItem(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_indexFromItem, doc_QStandardItemModel_indexFromItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_item, "item(self, int, column: int = 0) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_item(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_item(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = 0;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1))
        {
             ::QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->item(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_item, doc_QStandardItemModel_item);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setItem, "setItem(self, int, int, QStandardItem)\n"
    "setItem(self, int, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_setItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::QStandardItem* a2;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1, sipType_QStandardItem, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItem(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QStandardItem* a1;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setItem, doc_QStandardItemModel_setItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_invisibleRootItem, "invisibleRootItem(self) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_invisibleRootItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_invisibleRootItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
             ::QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->invisibleRootItem();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_invisibleRootItem, doc_QStandardItemModel_invisibleRootItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_horizontalHeaderItem, "horizontalHeaderItem(self, int) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_horizontalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_horizontalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
             ::QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->horizontalHeaderItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_horizontalHeaderItem, doc_QStandardItemModel_horizontalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setHorizontalHeaderItem, "setHorizontalHeaderItem(self, int, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_setHorizontalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setHorizontalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QStandardItem* a1;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHorizontalHeaderItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setHorizontalHeaderItem, doc_QStandardItemModel_setHorizontalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_verticalHeaderItem, "verticalHeaderItem(self, int) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_verticalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_verticalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
             ::QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->verticalHeaderItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_verticalHeaderItem, doc_QStandardItemModel_verticalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setVerticalHeaderItem, "setVerticalHeaderItem(self, int, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_setVerticalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setVerticalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QStandardItem* a1;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVerticalHeaderItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setVerticalHeaderItem, doc_QStandardItemModel_setVerticalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setHorizontalHeaderLabels, "setHorizontalHeaderLabels(self, Sequence[str])");

extern "C" {static PyObject *meth_QStandardItemModel_setHorizontalHeaderLabels(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setHorizontalHeaderLabels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHorizontalHeaderLabels(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setHorizontalHeaderLabels, doc_QStandardItemModel_setHorizontalHeaderLabels);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setVerticalHeaderLabels, "setVerticalHeaderLabels(self, Sequence[str])");

extern "C" {static PyObject *meth_QStandardItemModel_setVerticalHeaderLabels(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setVerticalHeaderLabels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVerticalHeaderLabels(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setVerticalHeaderLabels, doc_QStandardItemModel_setVerticalHeaderLabels);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setRowCount, "setRowCount(self, int)");

extern "C" {static PyObject *meth_QStandardItemModel_setRowCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setRowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRowCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setRowCount, doc_QStandardItemModel_setRowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setColumnCount, "setColumnCount(self, int)");

extern "C" {static PyObject *meth_QStandardItemModel_setColumnCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumnCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setColumnCount, doc_QStandardItemModel_setColumnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_appendRow, "appendRow(self, object)\n"
    "appendRow(self, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_appendRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_appendRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList< ::QStandardItem*>* a0;
        int a0State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QList_0101QStandardItem,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendRow(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QStandardItem* a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStandardItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendRow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_appendRow, doc_QStandardItemModel_appendRow);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_appendColumn, "appendColumn(self, Sequence[QStandardItem])");

extern "C" {static PyObject *meth_QStandardItemModel_appendColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_appendColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList< ::QStandardItem*>* a0;
        int a0State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QList_0101QStandardItem,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendColumn(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_appendColumn, doc_QStandardItemModel_appendColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_insertRow, "insertRow(self, int, Sequence[QStandardItem])\n"
    "insertRow(self, int, QStandardItem)\n"
    "insertRow(self, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_insertRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_insertRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QList< ::QStandardItem*>* a1;
        int a1State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiJ3", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QList_0101QStandardItem,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRow(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
         ::QStandardItem* a1;
         ::QStandardItemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRow(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QModelIndex& a1def = QModelIndex();
        const  ::QModelIndex* a1 = &a1def;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertRow(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_insertRow, doc_QStandardItemModel_insertRow);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_insertColumn, "insertColumn(self, int, Sequence[QStandardItem])\n"
    "insertColumn(self, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_insertColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_insertColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QList< ::QStandardItem*>* a1;
        int a1State = 0;
         ::QStandardItemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiJ3", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QList_0101QStandardItem,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertColumn(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList< ::QStandardItem*> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const  ::QModelIndex& a1def = QModelIndex();
        const  ::QModelIndex* a1 = &a1def;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|J9", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertColumn(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_insertColumn, doc_QStandardItemModel_insertColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeItem, "takeItem(self, int, column: int = 0) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_takeItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = 0;
         ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0, &a1))
        {
             ::QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeItem(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeItem, doc_QStandardItemModel_takeItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeRow, "takeRow(self, int) -> List[QStandardItem]");

extern "C" {static PyObject *meth_QStandardItemModel_takeRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            QList< ::QStandardItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QStandardItem*>(sipCpp->takeRow(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeRow, doc_QStandardItemModel_takeRow);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeColumn, "takeColumn(self, int) -> List[QStandardItem]");

extern "C" {static PyObject *meth_QStandardItemModel_takeColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            QList< ::QStandardItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QStandardItem*>(sipCpp->takeColumn(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeColumn, doc_QStandardItemModel_takeColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeHorizontalHeaderItem, "takeHorizontalHeaderItem(self, int) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_takeHorizontalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeHorizontalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
             ::QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeHorizontalHeaderItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeHorizontalHeaderItem, doc_QStandardItemModel_takeHorizontalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_takeVerticalHeaderItem, "takeVerticalHeaderItem(self, int) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_takeVerticalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_takeVerticalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
             ::QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeVerticalHeaderItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_takeVerticalHeaderItem, doc_QStandardItemModel_takeVerticalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_itemPrototype, "itemPrototype(self) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItemModel_itemPrototype(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_itemPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
            const  ::QStandardItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemPrototype();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast< ::QStandardItem *>(sipRes),sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_itemPrototype, doc_QStandardItemModel_itemPrototype);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setItemPrototype, "setItemPrototype(self, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItemModel_setItemPrototype(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setItemPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStandardItem* a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QStandardItem, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemPrototype(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setItemPrototype, doc_QStandardItemModel_setItemPrototype);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_findItems, "findItems(self, str, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchExactly, column: int = 0) -> List[QStandardItem]");

extern "C" {static PyObject *meth_QStandardItemModel_findItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_findItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::Qt::MatchFlags a1def = Qt::MatchExactly;
         ::Qt::MatchFlags* a1 = &a1def;
        int a1State = 0;
        int a2 = 0;
        const  ::QStandardItemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_flags,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1i", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_MatchFlags, &a1, &a1State, &a2))
        {
            QList< ::QStandardItem*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QStandardItem*>(sipCpp->findItems(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_Qt_MatchFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_findItems, doc_QStandardItemModel_findItems);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_sortRole, "sortRole(self) -> int");

extern "C" {static PyObject *meth_QStandardItemModel_sortRole(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_sortRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sortRole();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_sortRole, doc_QStandardItemModel_sortRole);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_setSortRole, "setSortRole(self, int)");

extern "C" {static PyObject *meth_QStandardItemModel_setSortRole(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_setSortRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItemModel, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSortRole(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_setSortRole, doc_QStandardItemModel_setSortRole);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_mimeTypes, "mimeTypes(self) -> List[str]");

extern "C" {static PyObject *meth_QStandardItemModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItemModel, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QStandardItemModel::mimeTypes() : sipCpp->mimeTypes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_mimeTypes, doc_QStandardItemModel_mimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_mimeData, "mimeData(self, object) -> QMimeData");

extern "C" {static PyObject *meth_QStandardItemModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndexList* a0;
        int a0State = 0;
        const  ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
             ::QMimeData*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_mimeData, doc_QStandardItemModel_mimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItemModel_dropMimeData, "dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QStandardItemModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItemModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
         ::QStandardItemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QStandardItemModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QStandardItemModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItemModel, sipName_dropMimeData, doc_QStandardItemModel_dropMimeData);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QStandardItemModel(void *, const sipTypeDef *);}
static void *cast_QStandardItemModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QStandardItemModel *sipCpp = reinterpret_cast< ::QStandardItemModel *>(sipCppV);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStandardItemModel(void *, int);}
static void release_QStandardItemModel(void *sipCppV, int)
{
     ::QStandardItemModel *sipCpp = reinterpret_cast< ::QStandardItemModel *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QStandardItemModel(sipSimpleWrapper *);}
static void dealloc_QStandardItemModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQStandardItemModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QStandardItemModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QStandardItemModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStandardItemModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQStandardItemModel *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStandardItemModel(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ii|JH", &a0, &a1, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStandardItemModel(a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStandardItemModel[] = {{0, 0, 1}};


static PyMethodDef methods_QStandardItemModel[] = {
    {SIP_MLNAME_CAST(sipName_appendColumn), meth_QStandardItemModel_appendColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_appendColumn)},
    {SIP_MLNAME_CAST(sipName_appendRow), meth_QStandardItemModel_appendRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_appendRow)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QStandardItemModel_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_clear)},
    {SIP_MLNAME_CAST(sipName_columnCount), (PyCFunction)meth_QStandardItemModel_columnCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_data), (PyCFunction)meth_QStandardItemModel_data, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_data)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QStandardItemModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_findItems), (PyCFunction)meth_QStandardItemModel_findItems, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_findItems)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QStandardItemModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), (PyCFunction)meth_QStandardItemModel_hasChildren, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_hasChildren)},
    {SIP_MLNAME_CAST(sipName_headerData), (PyCFunction)meth_QStandardItemModel_headerData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_headerData)},
    {SIP_MLNAME_CAST(sipName_horizontalHeaderItem), meth_QStandardItemModel_horizontalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_horizontalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_index), (PyCFunction)meth_QStandardItemModel_index, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_index)},
    {SIP_MLNAME_CAST(sipName_indexFromItem), meth_QStandardItemModel_indexFromItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_indexFromItem)},
    {SIP_MLNAME_CAST(sipName_insertColumn), (PyCFunction)meth_QStandardItemModel_insertColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_insertColumn)},
    {SIP_MLNAME_CAST(sipName_insertColumns), (PyCFunction)meth_QStandardItemModel_insertColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRow), (PyCFunction)meth_QStandardItemModel_insertRow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_insertRow)},
    {SIP_MLNAME_CAST(sipName_insertRows), (PyCFunction)meth_QStandardItemModel_insertRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_insertRows)},
    {SIP_MLNAME_CAST(sipName_invisibleRootItem), meth_QStandardItemModel_invisibleRootItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_invisibleRootItem)},
    {SIP_MLNAME_CAST(sipName_item), (PyCFunction)meth_QStandardItemModel_item, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_item)},
    {SIP_MLNAME_CAST(sipName_itemData), meth_QStandardItemModel_itemData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_itemData)},
    {SIP_MLNAME_CAST(sipName_itemFromIndex), meth_QStandardItemModel_itemFromIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_itemFromIndex)},
    {SIP_MLNAME_CAST(sipName_itemPrototype), meth_QStandardItemModel_itemPrototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_itemPrototype)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QStandardItemModel_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QStandardItemModel_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QStandardItemModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_parent)},
    {SIP_MLNAME_CAST(sipName_removeColumns), (PyCFunction)meth_QStandardItemModel_removeColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_removeColumns)},
    {SIP_MLNAME_CAST(sipName_removeRows), (PyCFunction)meth_QStandardItemModel_removeRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_removeRows)},
    {SIP_MLNAME_CAST(sipName_rowCount), (PyCFunction)meth_QStandardItemModel_rowCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setColumnCount), meth_QStandardItemModel_setColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setColumnCount)},
    {SIP_MLNAME_CAST(sipName_setData), (PyCFunction)meth_QStandardItemModel_setData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_setData)},
    {SIP_MLNAME_CAST(sipName_setHeaderData), (PyCFunction)meth_QStandardItemModel_setHeaderData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_setHeaderData)},
    {SIP_MLNAME_CAST(sipName_setHorizontalHeaderItem), meth_QStandardItemModel_setHorizontalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setHorizontalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_setHorizontalHeaderLabels), meth_QStandardItemModel_setHorizontalHeaderLabels, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setHorizontalHeaderLabels)},
    {SIP_MLNAME_CAST(sipName_setItem), meth_QStandardItemModel_setItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setItem)},
    {SIP_MLNAME_CAST(sipName_setItemData), meth_QStandardItemModel_setItemData, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setItemData)},
    {SIP_MLNAME_CAST(sipName_setItemPrototype), meth_QStandardItemModel_setItemPrototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setItemPrototype)},
    {SIP_MLNAME_CAST(sipName_setRowCount), meth_QStandardItemModel_setRowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setRowCount)},
    {SIP_MLNAME_CAST(sipName_setSortRole), meth_QStandardItemModel_setSortRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setSortRole)},
    {SIP_MLNAME_CAST(sipName_setVerticalHeaderItem), meth_QStandardItemModel_setVerticalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setVerticalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_setVerticalHeaderLabels), meth_QStandardItemModel_setVerticalHeaderLabels, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_setVerticalHeaderLabels)},
    {SIP_MLNAME_CAST(sipName_sort), (PyCFunction)meth_QStandardItemModel_sort, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_sort)},
    {SIP_MLNAME_CAST(sipName_sortRole), meth_QStandardItemModel_sortRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_sortRole)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QStandardItemModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_supportedDropActions)},
    {SIP_MLNAME_CAST(sipName_takeColumn), meth_QStandardItemModel_takeColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeColumn)},
    {SIP_MLNAME_CAST(sipName_takeHorizontalHeaderItem), meth_QStandardItemModel_takeHorizontalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeHorizontalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_takeItem), (PyCFunction)meth_QStandardItemModel_takeItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeItem)},
    {SIP_MLNAME_CAST(sipName_takeRow), meth_QStandardItemModel_takeRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeRow)},
    {SIP_MLNAME_CAST(sipName_takeVerticalHeaderItem), meth_QStandardItemModel_takeVerticalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_takeVerticalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_verticalHeaderItem), meth_QStandardItemModel_verticalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItemModel_verticalHeaderItem)}
};

PyDoc_STRVAR(doc_QStandardItemModel, "\1QStandardItemModel(parent: QObject = None)\n"
    "QStandardItemModel(int, int, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QStandardItemModel[] = {
    {"itemChanged(QStandardItem*)", "\1itemChanged(self, QStandardItem)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QStandardItemModel = {
    & ::QStandardItemModel::staticMetaObject,
    0,
    signals_QStandardItemModel
};


sipClassTypeDef sipTypeDef_QtGui_QStandardItemModel = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QStandardItemModel,
        {0},
        &plugin_QStandardItemModel
    },
    {
        sipNameNr_QStandardItemModel,
        {0, 0, 1},
        49, methods_QStandardItemModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QStandardItemModel,
    -1,
    -1,
    supers_QStandardItemModel,
    0,
    init_type_QStandardItemModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStandardItemModel,
    0,
    0,
    0,
    release_QStandardItemModel,
    cast_QStandardItemModel,
    0,
    0,
    0,
    0,
    0,
    0
};

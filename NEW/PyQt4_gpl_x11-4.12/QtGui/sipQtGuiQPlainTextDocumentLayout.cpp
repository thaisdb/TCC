/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 195 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qplaintextedit.sip"
#include <qplaintextedit.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"

#line 59 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 129 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 159 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 65 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 103 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 110 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 46 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 59 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 336 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 62 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 65 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 65 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 68 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 88 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 71 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 74 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 77 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 80 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 83 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 86 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 89 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 92 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 95 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 98 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 101 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 104 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 107 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 110 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 113 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPlainTextDocumentLayout.cpp"


class sipQPlainTextDocumentLayout : public  ::QPlainTextDocumentLayout
{
public:
    sipQPlainTextDocumentLayout( ::QTextDocument*);
    virtual ~sipQPlainTextDocumentLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    void draw( ::QPainter*,const  ::QAbstractTextDocumentLayout::PaintContext&);
    int hitTest(const  ::QPointF&, ::Qt::HitTestAccuracy) const;
    int pageCount() const;
     ::QSizeF documentSize() const;
     ::QRectF frameBoundingRect( ::QTextFrame*) const;
     ::QRectF blockBoundingRect(const  ::QTextBlock&) const;
    void documentChanged(int,int,int);
    void resizeInlineObject( ::QTextInlineObject,int,const  ::QTextFormat&);
    void positionInlineObject( ::QTextInlineObject,int,const  ::QTextFormat&);
    void drawInlineObject( ::QPainter*,const  ::QRectF&, ::QTextInlineObject,int,const  ::QTextFormat&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlainTextDocumentLayout(const sipQPlainTextDocumentLayout &);
    sipQPlainTextDocumentLayout &operator = (const sipQPlainTextDocumentLayout &);

    char sipPyMethods[17];
};

sipQPlainTextDocumentLayout::sipQPlainTextDocumentLayout( ::QTextDocument*a0):  ::QPlainTextDocumentLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlainTextDocumentLayout::~sipQPlainTextDocumentLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQPlainTextDocumentLayout::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QPlainTextDocumentLayout);
}

int sipQPlainTextDocumentLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QPlainTextDocumentLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QPlainTextDocumentLayout,_c,_id,_a);

    return _id;
}

void *sipQPlainTextDocumentLayout::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QPlainTextDocumentLayout, _clname)) ? this :  ::QPlainTextDocumentLayout::qt_metacast(_clname);
}

void sipQPlainTextDocumentLayout::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQPlainTextDocumentLayout::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQPlainTextDocumentLayout::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::draw( ::QPainter*a0,const  ::QAbstractTextDocumentLayout::PaintContext& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_draw);

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::draw(a0,a1);
        return;
    }

    extern void sipVH_QtGui_93(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QAbstractTextDocumentLayout::PaintContext&);

    sipVH_QtGui_93(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

int sipQPlainTextDocumentLayout::hitTest(const  ::QPointF& a0, ::Qt::HitTestAccuracy a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_hitTest);

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::hitTest(a0,a1);

    extern int sipVH_QtGui_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPointF&, ::Qt::HitTestAccuracy);

    return sipVH_QtGui_94(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

int sipQPlainTextDocumentLayout::pageCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_pageCount);

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::pageCount();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSizeF sipQPlainTextDocumentLayout::documentSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_documentSize);

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::documentSize();

    extern  ::QSizeF sipVH_QtGui_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_95(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QRectF sipQPlainTextDocumentLayout::frameBoundingRect( ::QTextFrame*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_frameBoundingRect);

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::frameBoundingRect(a0);

    extern  ::QRectF sipVH_QtGui_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTextFrame*);

    return sipVH_QtGui_96(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QRectF sipQPlainTextDocumentLayout::blockBoundingRect(const  ::QTextBlock& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_blockBoundingRect);

    if (!sipMeth)
        return  ::QPlainTextDocumentLayout::blockBoundingRect(a0);

    extern  ::QRectF sipVH_QtGui_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    return sipVH_QtGui_97(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::documentChanged(int a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_documentChanged);

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::documentChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_98(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    sipVH_QtGui_98(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPlainTextDocumentLayout::resizeInlineObject( ::QTextInlineObject a0,int a1,const  ::QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_resizeInlineObject);

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::resizeInlineObject(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_99(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTextInlineObject,int,const  ::QTextFormat&);

    sipVH_QtGui_99(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPlainTextDocumentLayout::positionInlineObject( ::QTextInlineObject a0,int a1,const  ::QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_positionInlineObject);

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::positionInlineObject(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_99(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTextInlineObject,int,const  ::QTextFormat&);

    sipVH_QtGui_99(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPlainTextDocumentLayout::drawInlineObject( ::QPainter*a0,const  ::QRectF& a1, ::QTextInlineObject a2,int a3,const  ::QTextFormat& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_drawInlineObject);

    if (!sipMeth)
    {
         ::QPlainTextDocumentLayout::drawInlineObject(a0,a1,a2,a3,a4);
        return;
    }

    extern void sipVH_QtGui_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRectF&, ::QTextInlineObject,int,const  ::QTextFormat&);

    sipVH_QtGui_100(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_draw, "draw(self, QPainter, QAbstractTextDocumentLayout.PaintContext)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_draw(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPainter* a0;
        const  ::QAbstractTextDocumentLayout::PaintContext* a1;
         ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QPainter, &a0, sipType_QAbstractTextDocumentLayout_PaintContext, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::draw(a0,*a1) : sipCpp->draw(a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_draw, doc_QPlainTextDocumentLayout_draw);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_hitTest, "hitTest(self, Union[QPointF, QPoint], Qt.HitTestAccuracy) -> int");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_hitTest(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_hitTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::Qt::HitTestAccuracy a1;
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_Qt_HitTestAccuracy, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::hitTest(*a0,a1) : sipCpp->hitTest(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_hitTest, doc_QPlainTextDocumentLayout_hitTest);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_pageCount, "pageCount(self) -> int");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_pageCount(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_pageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::pageCount() : sipCpp->pageCount());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_pageCount, doc_QPlainTextDocumentLayout_pageCount);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_documentSize, "documentSize(self) -> QSizeF");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_documentSize(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_documentSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
             ::QSizeF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSizeF((sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::documentSize() : sipCpp->documentSize()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_documentSize, doc_QPlainTextDocumentLayout_documentSize);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_frameBoundingRect, "frameBoundingRect(self, QTextFrame) -> QRectF");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_frameBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_frameBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTextFrame* a0;
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextFrame, &a0))
        {
             ::QRectF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRectF((sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::frameBoundingRect(a0) : sipCpp->frameBoundingRect(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_frameBoundingRect, doc_QPlainTextDocumentLayout_frameBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_blockBoundingRect, "blockBoundingRect(self, QTextBlock) -> QRectF");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_blockBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_blockBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTextBlock* a0;
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextBlock, &a0))
        {
             ::QRectF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRectF((sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::blockBoundingRect(*a0) : sipCpp->blockBoundingRect(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_blockBoundingRect, doc_QPlainTextDocumentLayout_blockBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_ensureBlockLayout, "ensureBlockLayout(self, QTextBlock)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_ensureBlockLayout(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_ensureBlockLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextBlock* a0;
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextBlock, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ensureBlockLayout(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_ensureBlockLayout, doc_QPlainTextDocumentLayout_ensureBlockLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_setCursorWidth, "setCursorWidth(self, int)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_setCursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_setCursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCursorWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_setCursorWidth, doc_QPlainTextDocumentLayout_setCursorWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_cursorWidth, "cursorWidth(self) -> int");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_cursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_cursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cursorWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_cursorWidth, doc_QPlainTextDocumentLayout_cursorWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_requestUpdate, "requestUpdate(self)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_requestUpdate(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_requestUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->requestUpdate();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_requestUpdate, doc_QPlainTextDocumentLayout_requestUpdate);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_documentChanged, "documentChanged(self, int, int, int)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_documentChanged(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_documentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        int a2;
         ::QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "piii", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QPlainTextDocumentLayout::documentChanged(a0,a1,a2) : sipCpp->documentChanged(a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_documentChanged, doc_QPlainTextDocumentLayout_documentChanged);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPlainTextDocumentLayout(void *, const sipTypeDef *);}
static void *cast_QPlainTextDocumentLayout(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPlainTextDocumentLayout *sipCpp = reinterpret_cast< ::QPlainTextDocumentLayout *>(sipCppV);

    if (targetType == sipType_QAbstractTextDocumentLayout)
        return static_cast< ::QAbstractTextDocumentLayout *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlainTextDocumentLayout(void *, int);}
static void release_QPlainTextDocumentLayout(void *sipCppV, int)
{
     ::QPlainTextDocumentLayout *sipCpp = reinterpret_cast< ::QPlainTextDocumentLayout *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QPlainTextDocumentLayout(sipSimpleWrapper *);}
static void dealloc_QPlainTextDocumentLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPlainTextDocumentLayout *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPlainTextDocumentLayout(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPlainTextDocumentLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlainTextDocumentLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPlainTextDocumentLayout *sipCpp = 0;

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPlainTextDocumentLayout(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlainTextDocumentLayout[] = {{30, 255, 1}};


static PyMethodDef methods_QPlainTextDocumentLayout[] = {
    {SIP_MLNAME_CAST(sipName_blockBoundingRect), meth_QPlainTextDocumentLayout_blockBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_blockBoundingRect)},
    {SIP_MLNAME_CAST(sipName_cursorWidth), meth_QPlainTextDocumentLayout_cursorWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_cursorWidth)},
    {SIP_MLNAME_CAST(sipName_documentChanged), meth_QPlainTextDocumentLayout_documentChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_documentChanged)},
    {SIP_MLNAME_CAST(sipName_documentSize), meth_QPlainTextDocumentLayout_documentSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_documentSize)},
    {SIP_MLNAME_CAST(sipName_draw), meth_QPlainTextDocumentLayout_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_draw)},
    {SIP_MLNAME_CAST(sipName_ensureBlockLayout), meth_QPlainTextDocumentLayout_ensureBlockLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_ensureBlockLayout)},
    {SIP_MLNAME_CAST(sipName_frameBoundingRect), meth_QPlainTextDocumentLayout_frameBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_frameBoundingRect)},
    {SIP_MLNAME_CAST(sipName_hitTest), meth_QPlainTextDocumentLayout_hitTest, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_hitTest)},
    {SIP_MLNAME_CAST(sipName_pageCount), meth_QPlainTextDocumentLayout_pageCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_pageCount)},
    {SIP_MLNAME_CAST(sipName_requestUpdate), meth_QPlainTextDocumentLayout_requestUpdate, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_requestUpdate)},
    {SIP_MLNAME_CAST(sipName_setCursorWidth), meth_QPlainTextDocumentLayout_setCursorWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_setCursorWidth)}
};

PyDoc_STRVAR(doc_QPlainTextDocumentLayout, "\1QPlainTextDocumentLayout(QTextDocument)");


static pyqt4ClassPluginDef plugin_QPlainTextDocumentLayout = {
    & ::QPlainTextDocumentLayout::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QPlainTextDocumentLayout = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QPlainTextDocumentLayout,
        {0},
        &plugin_QPlainTextDocumentLayout
    },
    {
        sipNameNr_QPlainTextDocumentLayout,
        {0, 0, 1},
        11, methods_QPlainTextDocumentLayout,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlainTextDocumentLayout,
    -1,
    -1,
    supers_QPlainTextDocumentLayout,
    0,
    init_type_QPlainTextDocumentLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlainTextDocumentLayout,
    0,
    0,
    0,
    release_QPlainTextDocumentLayout,
    cast_QPlainTextDocumentLayout,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qproxymodel.sip"
#include <qproxymodel.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 122 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 139 "sip/QtCore/qhash.sip"
#include <qhash.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 139 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 26 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQProxyModel.cpp"


class sipQProxyModel : public  ::QProxyModel
{
public:
    sipQProxyModel( ::QObject*);
    virtual ~sipQProxyModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setModel( ::QAbstractItemModel*);
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
     ::QModelIndex index(int,int,const  ::QModelIndex&) const;
     ::QModelIndex parent(const  ::QModelIndex&) const;
    int rowCount(const  ::QModelIndex&) const;
    int columnCount(const  ::QModelIndex&) const;
    bool hasChildren(const  ::QModelIndex&) const;
     ::QVariant data(const  ::QModelIndex&,int) const;
    bool setData(const  ::QModelIndex&,const  ::QVariant&,int);
     ::QVariant headerData(int, ::Qt::Orientation,int) const;
    bool setHeaderData(int, ::Qt::Orientation,const  ::QVariant&,int);
    QMap<int, ::QVariant> itemData(const  ::QModelIndex&) const;
    bool setItemData(const  ::QModelIndex&,const QMap<int, ::QVariant>&);
     ::QStringList mimeTypes() const;
     ::QMimeData* mimeData(const  ::QModelIndexList&) const;
    bool dropMimeData(const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);
     ::Qt::DropActions supportedDropActions() const;
    bool insertRows(int,int,const  ::QModelIndex&);
    bool insertColumns(int,int,const  ::QModelIndex&);
    bool removeRows(int,int,const  ::QModelIndex&);
    bool removeColumns(int,int,const  ::QModelIndex&);
    void fetchMore(const  ::QModelIndex&);
    bool canFetchMore(const  ::QModelIndex&) const;
     ::Qt::ItemFlags flags(const  ::QModelIndex&) const;
    void sort(int, ::Qt::SortOrder);
     ::QModelIndex buddy(const  ::QModelIndex&) const;
     ::QModelIndexList match(const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags) const;
     ::QSize span(const  ::QModelIndex&) const;
    bool submit();
    void revert();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQProxyModel(const sipQProxyModel &);
    sipQProxyModel &operator = (const sipQProxyModel &);

    char sipPyMethods[36];
};

sipQProxyModel::sipQProxyModel( ::QObject*a0):  ::QProxyModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQProxyModel::~sipQProxyModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQProxyModel::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QProxyModel);
}

int sipQProxyModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QProxyModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QProxyModel,_c,_id,_a);

    return _id;
}

void *sipQProxyModel::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QProxyModel, _clname)) ? this :  ::QProxyModel::qt_metacast(_clname);
}

void sipQProxyModel::setModel( ::QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setModel);

    if (!sipMeth)
    {
         ::QProxyModel::setModel(a0);
        return;
    }

    extern void sipVH_QtGui_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractItemModel*);

    sipVH_QtGui_44(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQProxyModel::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QProxyModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQProxyModel::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QProxyModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQProxyModel::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QProxyModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQProxyModel::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QProxyModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQProxyModel::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QProxyModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQProxyModel::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QProxyModel::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQProxyModel::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QProxyModel::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQProxyModel::index(int a0,int a1,const  ::QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return  ::QProxyModel::index(a0,a1,a2);

    extern  ::QModelIndex sipVH_QtGui_85(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_85(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QModelIndex sipQProxyModel::parent(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_parent);

    if (!sipMeth)
        return  ::QProxyModel::parent(a0);

    extern  ::QModelIndex sipVH_QtGui_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_70(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQProxyModel::rowCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_rowCount);

    if (!sipMeth)
        return  ::QProxyModel::rowCount(a0);

    extern int sipVH_QtGui_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_84(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQProxyModel::columnCount(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_columnCount);

    if (!sipMeth)
        return  ::QProxyModel::columnCount(a0);

    extern int sipVH_QtGui_84(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_84(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQProxyModel::hasChildren(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_hasChildren);

    if (!sipMeth)
        return  ::QProxyModel::hasChildren(a0);

    extern bool sipVH_QtGui_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_59(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQProxyModel::data(const  ::QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return  ::QProxyModel::data(a0,a1);

    extern  ::QVariant sipVH_QtGui_83(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int);

    return sipVH_QtGui_83(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQProxyModel::setData(const  ::QModelIndex& a0,const  ::QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return  ::QProxyModel::setData(a0,a1,a2);

    extern bool sipVH_QtGui_82(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QVariant&,int);

    return sipVH_QtGui_82(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QVariant sipQProxyModel::headerData(int a0, ::Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return  ::QProxyModel::headerData(a0,a1,a2);

    extern  ::QVariant sipVH_QtGui_81(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,int);

    return sipVH_QtGui_81(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQProxyModel::setHeaderData(int a0, ::Qt::Orientation a1,const  ::QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return  ::QProxyModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtGui_80(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::Orientation,const  ::QVariant&,int);

    return sipVH_QtGui_80(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

QMap<int, ::QVariant> sipQProxyModel::itemData(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return  ::QProxyModel::itemData(a0);

    extern QMap<int, ::QVariant> sipVH_QtGui_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_79(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQProxyModel::setItemData(const  ::QModelIndex& a0,const QMap<int, ::QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return  ::QProxyModel::setItemData(a0,a1);

    extern bool sipVH_QtGui_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const QMap<int, ::QVariant>&);

    return sipVH_QtGui_78(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

 ::QStringList sipQProxyModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return  ::QProxyModel::mimeTypes();

    extern  ::QStringList sipVH_QtGui_77(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_77(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QMimeData* sipQProxyModel::mimeData(const  ::QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return  ::QProxyModel::mimeData(a0);

    extern  ::QMimeData* sipVH_QtGui_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndexList&);

    return sipVH_QtGui_76(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQProxyModel::dropMimeData(const  ::QMimeData*a0, ::Qt::DropAction a1,int a2,int a3,const  ::QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return  ::QProxyModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtGui_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*, ::Qt::DropAction,int,int,const  ::QModelIndex&);

    return sipVH_QtGui_75(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::Qt::DropActions sipQProxyModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return  ::QProxyModel::supportedDropActions();

    extern  ::Qt::DropActions sipVH_QtGui_74(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_74(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQProxyModel::insertRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return  ::QProxyModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQProxyModel::insertColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return  ::QProxyModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQProxyModel::removeRows(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return  ::QProxyModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQProxyModel::removeColumns(int a0,int a1,const  ::QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return  ::QProxyModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtGui_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::QModelIndex&);

    return sipVH_QtGui_73(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQProxyModel::fetchMore(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
         ::QProxyModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtGui_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtGui_50(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQProxyModel::canFetchMore(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return  ::QProxyModel::canFetchMore(a0);

    extern bool sipVH_QtGui_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_59(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::Qt::ItemFlags sipQProxyModel::flags(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return  ::QProxyModel::flags(a0);

    extern  ::Qt::ItemFlags sipVH_QtGui_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_72(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQProxyModel::sort(int a0, ::Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
         ::QProxyModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtGui_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::Qt::SortOrder);

    sipVH_QtGui_71(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

 ::QModelIndex sipQProxyModel::buddy(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return  ::QProxyModel::buddy(a0);

    extern  ::QModelIndex sipVH_QtGui_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_70(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQProxyModel::match(const  ::QModelIndex& a0,int a1,const  ::QVariant& a2,int a3, ::Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return  ::QProxyModel::match(a0,a1,a2,a3,a4);

    extern  ::QModelIndexList sipVH_QtGui_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,const  ::QVariant&,int, ::Qt::MatchFlags);

    return sipVH_QtGui_69(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QSize sipQProxyModel::span(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return  ::QProxyModel::span(a0);

    extern  ::QSize sipVH_QtGui_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_68(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQProxyModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return  ::QProxyModel::submit();

    extern bool sipVH_QtGui_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_67(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQProxyModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
         ::QProxyModel::revert();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QProxyModel_setModel, "setModel(self, QAbstractItemModel)");

extern "C" {static PyObject *meth_QProxyModel_setModel(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemModel* a0;
        PyObject *a0Keep;
         ::QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QProxyModel, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QProxyModel::setModel(a0) : sipCpp->setModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -54, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_setModel, doc_QProxyModel_setModel);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_model, "model(self) -> QAbstractItemModel");

extern "C" {static PyObject *meth_QProxyModel_model(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyModel, &sipCpp))
        {
             ::QAbstractItemModel*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->model();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_model, doc_QProxyModel_model);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_index, "index(self, int, int, parent: QModelIndex = QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QProxyModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
        const  ::QProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
             ::QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QProxyModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_index, doc_QProxyModel_index);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_parent, "parent(self, QModelIndex) -> QModelIndex\n"
    "parent(self) -> QObject");

extern "C" {static PyObject *meth_QProxyModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QProxyModel::parent(*a0) : sipCpp->parent(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    {
        const  ::QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyModel, &sipCpp))
        {
             ::QObject*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parent();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_parent, doc_QProxyModel_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_rowCount, "rowCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QProxyModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyModel::rowCount(*a0) : sipCpp->rowCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_rowCount, doc_QProxyModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_columnCount, "columnCount(self, parent: QModelIndex = QModelIndex()) -> int");

extern "C" {static PyObject *meth_QProxyModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyModel::columnCount(*a0) : sipCpp->columnCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_columnCount, doc_QProxyModel_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_hasChildren, "hasChildren(self, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QProxyModel_hasChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex& a0def = QModelIndex();
        const  ::QModelIndex* a0 = &a0def;
        const  ::QProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_hasChildren, doc_QProxyModel_hasChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_data, "data(self, QModelIndex, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QProxyModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const  ::QProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QProxyModel::data(*a0,a1) : sipCpp->data(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_data, doc_QProxyModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_setData, "setData(self, QModelIndex, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QProxyModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
         ::QProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|i", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant,&a1, &a1State, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_setData, doc_QProxyModel_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_headerData, "headerData(self, int, Qt.Orientation, role: int = Qt.DisplayRole) -> Any");

extern "C" {static PyObject *meth_QProxyModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        const  ::QProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiE|i", &sipSelf, sipType_QProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QProxyModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_headerData, doc_QProxyModel_headerData);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_setHeaderData, "setHeaderData(self, int, Qt.Orientation, Any, role: int = Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QProxyModel_setHeaderData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_setHeaderData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::Orientation a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = Qt::EditRole;
         ::QProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiEJ1|i", &sipSelf, sipType_QProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, sipType_QVariant,&a2, &a2State, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyModel::setHeaderData(a0,a1,*a2,a3) : sipCpp->setHeaderData(a0,a1,*a2,a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_setHeaderData, doc_QProxyModel_setHeaderData);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_mimeTypes, "mimeTypes(self) -> List[str]");

extern "C" {static PyObject *meth_QProxyModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyModel, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList((sipSelfWasArg ? sipCpp-> ::QProxyModel::mimeTypes() : sipCpp->mimeTypes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_mimeTypes, doc_QProxyModel_mimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_mimeData, "mimeData(self, object) -> QMimeData");

extern "C" {static PyObject *meth_QProxyModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndexList* a0;
        int a0State = 0;
        const  ::QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
             ::QMimeData*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_mimeData, doc_QProxyModel_mimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_dropMimeData, "dropMimeData(self, QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QProxyModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::Qt::DropAction a1;
        int a2;
        int a3;
        const  ::QModelIndex* a4;
         ::QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_dropMimeData, doc_QProxyModel_dropMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_supportedDropActions, "supportedDropActions(self) -> Qt.DropActions");

extern "C" {static PyObject *meth_QProxyModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyModel, &sipCpp))
        {
             ::Qt::DropActions*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Qt::DropActions((sipSelfWasArg ? sipCpp-> ::QProxyModel::supportedDropActions() : sipCpp->supportedDropActions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_supportedDropActions, doc_QProxyModel_supportedDropActions);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_insertRows, "insertRows(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QProxyModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_insertRows, doc_QProxyModel_insertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_insertColumns, "insertColumns(self, int, int, parent: QModelIndex = QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QProxyModel_insertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const  ::QModelIndex& a2def = QModelIndex();
        const  ::QModelIndex* a2 = &a2def;
         ::QProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_insertColumns, doc_QProxyModel_insertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_fetchMore, "fetchMore(self, QModelIndex)");

extern "C" {static PyObject *meth_QProxyModel_fetchMore(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_fetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QProxyModel::fetchMore(*a0) : sipCpp->fetchMore(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_fetchMore, doc_QProxyModel_fetchMore);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_flags, "flags(self, QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QProxyModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::Qt::ItemFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Qt::ItemFlags((sipSelfWasArg ? sipCpp-> ::QProxyModel::flags(*a0) : sipCpp->flags(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_flags, doc_QProxyModel_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_sort, "sort(self, int, order: Qt.SortOrder = Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QProxyModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::Qt::SortOrder a1 = Qt::AscendingOrder;
         ::QProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QProxyModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QProxyModel::sort(a0,a1) : sipCpp->sort(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_sort, doc_QProxyModel_sort);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_match, "match(self, QModelIndex, int, Any, hits: int = 1, flags: Union[Qt.MatchFlags, Qt.MatchFlag] = Qt.MatchFlags(Qt.MatchStartsWith|Qt.MatchWrap)) -> object");

extern "C" {static PyObject *meth_QProxyModel_match(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_match(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        const  ::QVariant* a2;
        int a2State = 0;
        int a3 = 1;
         ::Qt::MatchFlags a4def = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap);
         ::Qt::MatchFlags* a4 = &a4def;
        int a4State = 0;
        const  ::QProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_hits,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9iJ1|iJ1", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1, sipType_QVariant,&a2, &a2State, &a3, sipType_Qt_MatchFlags, &a4, &a4State))
        {
             ::QModelIndexList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QModelIndexList((sipSelfWasArg ? sipCpp-> ::QProxyModel::match(*a0,a1,*a2,a3,*a4) : sipCpp->match(*a0,a1,*a2,a3,*a4)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QVariant *>(a2),sipType_QVariant,a2State);
            sipReleaseType(a4,sipType_Qt_MatchFlags,a4State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_match, doc_QProxyModel_match);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_span, "span(self, QModelIndex) -> QSize");

extern "C" {static PyObject *meth_QProxyModel_span(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_span(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QProxyModel::span(*a0) : sipCpp->span(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_span, doc_QProxyModel_span);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_submit, "submit(self) -> bool");

extern "C" {static PyObject *meth_QProxyModel_submit(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_submit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyModel, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QProxyModel::submit() : sipCpp->submit());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_submit, doc_QProxyModel_submit);

    return NULL;
}


PyDoc_STRVAR(doc_QProxyModel_revert, "revert(self)");

extern "C" {static PyObject *meth_QProxyModel_revert(PyObject *, PyObject *);}
static PyObject *meth_QProxyModel_revert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProxyModel, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QProxyModel::revert() : sipCpp->revert());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProxyModel, sipName_revert, doc_QProxyModel_revert);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QProxyModel(void *, const sipTypeDef *);}
static void *cast_QProxyModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::QProxyModel *sipCpp = reinterpret_cast< ::QProxyModel *>(sipCppV);

    if (targetType == sipType_QAbstractItemModel)
        return static_cast< ::QAbstractItemModel *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QProxyModel(void *, int);}
static void release_QProxyModel(void *sipCppV, int)
{
     ::QProxyModel *sipCpp = reinterpret_cast< ::QProxyModel *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QProxyModel(sipSimpleWrapper *);}
static void dealloc_QProxyModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQProxyModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QProxyModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QProxyModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QProxyModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQProxyModel *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQProxyModel(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QProxyModel[] = {{0, 0, 1}};


static PyMethodDef methods_QProxyModel[] = {
    {SIP_MLNAME_CAST(sipName_columnCount), (PyCFunction)meth_QProxyModel_columnCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_data), (PyCFunction)meth_QProxyModel_data, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyModel_data)},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QProxyModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_fetchMore), meth_QProxyModel_fetchMore, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_fetchMore)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QProxyModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), (PyCFunction)meth_QProxyModel_hasChildren, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyModel_hasChildren)},
    {SIP_MLNAME_CAST(sipName_headerData), (PyCFunction)meth_QProxyModel_headerData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyModel_headerData)},
    {SIP_MLNAME_CAST(sipName_index), (PyCFunction)meth_QProxyModel_index, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyModel_index)},
    {SIP_MLNAME_CAST(sipName_insertColumns), (PyCFunction)meth_QProxyModel_insertColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyModel_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRows), (PyCFunction)meth_QProxyModel_insertRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyModel_insertRows)},
    {SIP_MLNAME_CAST(sipName_match), (PyCFunction)meth_QProxyModel_match, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyModel_match)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QProxyModel_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QProxyModel_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_model), meth_QProxyModel_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_model)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QProxyModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_parent)},
    {SIP_MLNAME_CAST(sipName_revert), meth_QProxyModel_revert, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_revert)},
    {SIP_MLNAME_CAST(sipName_rowCount), (PyCFunction)meth_QProxyModel_rowCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_setData), (PyCFunction)meth_QProxyModel_setData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyModel_setData)},
    {SIP_MLNAME_CAST(sipName_setHeaderData), (PyCFunction)meth_QProxyModel_setHeaderData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyModel_setHeaderData)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QProxyModel_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_setModel)},
    {SIP_MLNAME_CAST(sipName_sort), (PyCFunction)meth_QProxyModel_sort, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProxyModel_sort)},
    {SIP_MLNAME_CAST(sipName_span), meth_QProxyModel_span, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_span)},
    {SIP_MLNAME_CAST(sipName_submit), meth_QProxyModel_submit, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_submit)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QProxyModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QProxyModel_supportedDropActions)}
};

PyDoc_STRVAR(doc_QProxyModel, "\1QProxyModel(parent: QObject = None)");


static pyqt4ClassPluginDef plugin_QProxyModel = {
    & ::QProxyModel::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QProxyModel = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QProxyModel,
        {0},
        &plugin_QProxyModel
    },
    {
        sipNameNr_QProxyModel,
        {0, 0, 1},
        24, methods_QProxyModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QProxyModel,
    -1,
    -1,
    supers_QProxyModel,
    0,
    init_type_QProxyModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QProxyModel,
    0,
    0,
    0,
    release_QProxyModel,
    cast_QProxyModel,
    0,
    0,
    0,
    0,
    0,
    0
};

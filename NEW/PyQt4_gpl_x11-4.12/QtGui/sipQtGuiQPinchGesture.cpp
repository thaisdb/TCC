/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 85 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgesture.sip"
#include <qgesture.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 110 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 85 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgesture.sip"
#include <qgesture.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgesture.sip"
#include <qgesture.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPinchGesture.cpp"


class sipQPinchGesture : public  ::QPinchGesture
{
public:
    sipQPinchGesture( ::QObject*);
    virtual ~sipQPinchGesture();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPinchGesture(const sipQPinchGesture &);
    sipQPinchGesture &operator = (const sipQPinchGesture &);

    char sipPyMethods[7];
};

sipQPinchGesture::sipQPinchGesture( ::QObject*a0):  ::QPinchGesture(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPinchGesture::~sipQPinchGesture()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQPinchGesture::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QPinchGesture);
}

int sipQPinchGesture::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QPinchGesture::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QPinchGesture,_c,_id,_a);

    return _id;
}

void *sipQPinchGesture::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QPinchGesture, _clname)) ? this :  ::QPinchGesture::qt_metacast(_clname);
}

void sipQPinchGesture::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QPinchGesture::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPinchGesture::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QPinchGesture::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPinchGesture::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QPinchGesture::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPinchGesture::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QPinchGesture::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQPinchGesture::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QPinchGesture::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQPinchGesture::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QPinchGesture::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQPinchGesture::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QPinchGesture::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPinchGesture_totalChangeFlags, "totalChangeFlags(self) -> QPinchGesture.ChangeFlags");

extern "C" {static PyObject *meth_QPinchGesture_totalChangeFlags(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_totalChangeFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::QPinchGesture::ChangeFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPinchGesture::ChangeFlags(sipCpp->totalChangeFlags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPinchGesture_ChangeFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_totalChangeFlags, doc_QPinchGesture_totalChangeFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_setTotalChangeFlags, "setTotalChangeFlags(self, QPinchGesture.ChangeFlags)");

extern "C" {static PyObject *meth_QPinchGesture_setTotalChangeFlags(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setTotalChangeFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPinchGesture::ChangeFlags* a0;
        int a0State = 0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPinchGesture, &sipCpp, sipType_QPinchGesture_ChangeFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTotalChangeFlags(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QPinchGesture_ChangeFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setTotalChangeFlags, doc_QPinchGesture_setTotalChangeFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_changeFlags, "changeFlags(self) -> QPinchGesture.ChangeFlags");

extern "C" {static PyObject *meth_QPinchGesture_changeFlags(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_changeFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::QPinchGesture::ChangeFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPinchGesture::ChangeFlags(sipCpp->changeFlags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPinchGesture_ChangeFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_changeFlags, doc_QPinchGesture_changeFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_setChangeFlags, "setChangeFlags(self, QPinchGesture.ChangeFlags)");

extern "C" {static PyObject *meth_QPinchGesture_setChangeFlags(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setChangeFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPinchGesture::ChangeFlags* a0;
        int a0State = 0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPinchGesture, &sipCpp, sipType_QPinchGesture_ChangeFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setChangeFlags(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QPinchGesture_ChangeFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setChangeFlags, doc_QPinchGesture_setChangeFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_startCenterPoint, "startCenterPoint(self) -> QPointF");

extern "C" {static PyObject *meth_QPinchGesture_startCenterPoint(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_startCenterPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPointF(sipCpp->startCenterPoint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_startCenterPoint, doc_QPinchGesture_startCenterPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_lastCenterPoint, "lastCenterPoint(self) -> QPointF");

extern "C" {static PyObject *meth_QPinchGesture_lastCenterPoint(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_lastCenterPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPointF(sipCpp->lastCenterPoint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_lastCenterPoint, doc_QPinchGesture_lastCenterPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_centerPoint, "centerPoint(self) -> QPointF");

extern "C" {static PyObject *meth_QPinchGesture_centerPoint(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_centerPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPointF(sipCpp->centerPoint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_centerPoint, doc_QPinchGesture_centerPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_setStartCenterPoint, "setStartCenterPoint(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QPinchGesture_setStartCenterPoint(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setStartCenterPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPinchGesture, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStartCenterPoint(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setStartCenterPoint, doc_QPinchGesture_setStartCenterPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_setLastCenterPoint, "setLastCenterPoint(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QPinchGesture_setLastCenterPoint(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setLastCenterPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPinchGesture, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLastCenterPoint(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setLastCenterPoint, doc_QPinchGesture_setLastCenterPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_setCenterPoint, "setCenterPoint(self, Union[QPointF, QPoint])");

extern "C" {static PyObject *meth_QPinchGesture_setCenterPoint(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setCenterPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPointF* a0;
        int a0State = 0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPinchGesture, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCenterPoint(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setCenterPoint, doc_QPinchGesture_setCenterPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_totalScaleFactor, "totalScaleFactor(self) -> float");

extern "C" {static PyObject *meth_QPinchGesture_totalScaleFactor(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_totalScaleFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->totalScaleFactor();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_totalScaleFactor, doc_QPinchGesture_totalScaleFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_lastScaleFactor, "lastScaleFactor(self) -> float");

extern "C" {static PyObject *meth_QPinchGesture_lastScaleFactor(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_lastScaleFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastScaleFactor();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_lastScaleFactor, doc_QPinchGesture_lastScaleFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_scaleFactor, "scaleFactor(self) -> float");

extern "C" {static PyObject *meth_QPinchGesture_scaleFactor(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_scaleFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scaleFactor();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_scaleFactor, doc_QPinchGesture_scaleFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_setTotalScaleFactor, "setTotalScaleFactor(self, float)");

extern "C" {static PyObject *meth_QPinchGesture_setTotalScaleFactor(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setTotalScaleFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPinchGesture, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTotalScaleFactor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setTotalScaleFactor, doc_QPinchGesture_setTotalScaleFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_setLastScaleFactor, "setLastScaleFactor(self, float)");

extern "C" {static PyObject *meth_QPinchGesture_setLastScaleFactor(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setLastScaleFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPinchGesture, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLastScaleFactor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setLastScaleFactor, doc_QPinchGesture_setLastScaleFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_setScaleFactor, "setScaleFactor(self, float)");

extern "C" {static PyObject *meth_QPinchGesture_setScaleFactor(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setScaleFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPinchGesture, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScaleFactor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setScaleFactor, doc_QPinchGesture_setScaleFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_totalRotationAngle, "totalRotationAngle(self) -> float");

extern "C" {static PyObject *meth_QPinchGesture_totalRotationAngle(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_totalRotationAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->totalRotationAngle();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_totalRotationAngle, doc_QPinchGesture_totalRotationAngle);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_lastRotationAngle, "lastRotationAngle(self) -> float");

extern "C" {static PyObject *meth_QPinchGesture_lastRotationAngle(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_lastRotationAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastRotationAngle();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_lastRotationAngle, doc_QPinchGesture_lastRotationAngle);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_rotationAngle, "rotationAngle(self) -> float");

extern "C" {static PyObject *meth_QPinchGesture_rotationAngle(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_rotationAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPinchGesture, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rotationAngle();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_rotationAngle, doc_QPinchGesture_rotationAngle);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_setTotalRotationAngle, "setTotalRotationAngle(self, float)");

extern "C" {static PyObject *meth_QPinchGesture_setTotalRotationAngle(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setTotalRotationAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPinchGesture, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTotalRotationAngle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setTotalRotationAngle, doc_QPinchGesture_setTotalRotationAngle);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_setLastRotationAngle, "setLastRotationAngle(self, float)");

extern "C" {static PyObject *meth_QPinchGesture_setLastRotationAngle(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setLastRotationAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPinchGesture, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLastRotationAngle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setLastRotationAngle, doc_QPinchGesture_setLastRotationAngle);

    return NULL;
}


PyDoc_STRVAR(doc_QPinchGesture_setRotationAngle, "setRotationAngle(self, float)");

extern "C" {static PyObject *meth_QPinchGesture_setRotationAngle(PyObject *, PyObject *);}
static PyObject *meth_QPinchGesture_setRotationAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QPinchGesture *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPinchGesture, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRotationAngle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPinchGesture, sipName_setRotationAngle, doc_QPinchGesture_setRotationAngle);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QPinchGesture(void *, const sipTypeDef *);}
static void *cast_QPinchGesture(void *sipCppV, const sipTypeDef *targetType)
{
     ::QPinchGesture *sipCpp = reinterpret_cast< ::QPinchGesture *>(sipCppV);

    if (targetType == sipType_QGesture)
        return static_cast< ::QGesture *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPinchGesture(void *, int);}
static void release_QPinchGesture(void *sipCppV, int)
{
     ::QPinchGesture *sipCpp = reinterpret_cast< ::QPinchGesture *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QPinchGesture(sipSimpleWrapper *);}
static void dealloc_QPinchGesture(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQPinchGesture *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPinchGesture(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QPinchGesture(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPinchGesture(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPinchGesture *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPinchGesture(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPinchGesture[] = {{147, 255, 1}};


static PyMethodDef methods_QPinchGesture[] = {
    {SIP_MLNAME_CAST(sipName_centerPoint), meth_QPinchGesture_centerPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_centerPoint)},
    {SIP_MLNAME_CAST(sipName_changeFlags), meth_QPinchGesture_changeFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_changeFlags)},
    {SIP_MLNAME_CAST(sipName_lastCenterPoint), meth_QPinchGesture_lastCenterPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_lastCenterPoint)},
    {SIP_MLNAME_CAST(sipName_lastRotationAngle), meth_QPinchGesture_lastRotationAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_lastRotationAngle)},
    {SIP_MLNAME_CAST(sipName_lastScaleFactor), meth_QPinchGesture_lastScaleFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_lastScaleFactor)},
    {SIP_MLNAME_CAST(sipName_rotationAngle), meth_QPinchGesture_rotationAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_rotationAngle)},
    {SIP_MLNAME_CAST(sipName_scaleFactor), meth_QPinchGesture_scaleFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_scaleFactor)},
    {SIP_MLNAME_CAST(sipName_setCenterPoint), meth_QPinchGesture_setCenterPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_setCenterPoint)},
    {SIP_MLNAME_CAST(sipName_setChangeFlags), meth_QPinchGesture_setChangeFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_setChangeFlags)},
    {SIP_MLNAME_CAST(sipName_setLastCenterPoint), meth_QPinchGesture_setLastCenterPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_setLastCenterPoint)},
    {SIP_MLNAME_CAST(sipName_setLastRotationAngle), meth_QPinchGesture_setLastRotationAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_setLastRotationAngle)},
    {SIP_MLNAME_CAST(sipName_setLastScaleFactor), meth_QPinchGesture_setLastScaleFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_setLastScaleFactor)},
    {SIP_MLNAME_CAST(sipName_setRotationAngle), meth_QPinchGesture_setRotationAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_setRotationAngle)},
    {SIP_MLNAME_CAST(sipName_setScaleFactor), meth_QPinchGesture_setScaleFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_setScaleFactor)},
    {SIP_MLNAME_CAST(sipName_setStartCenterPoint), meth_QPinchGesture_setStartCenterPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_setStartCenterPoint)},
    {SIP_MLNAME_CAST(sipName_setTotalChangeFlags), meth_QPinchGesture_setTotalChangeFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_setTotalChangeFlags)},
    {SIP_MLNAME_CAST(sipName_setTotalRotationAngle), meth_QPinchGesture_setTotalRotationAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_setTotalRotationAngle)},
    {SIP_MLNAME_CAST(sipName_setTotalScaleFactor), meth_QPinchGesture_setTotalScaleFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_setTotalScaleFactor)},
    {SIP_MLNAME_CAST(sipName_startCenterPoint), meth_QPinchGesture_startCenterPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_startCenterPoint)},
    {SIP_MLNAME_CAST(sipName_totalChangeFlags), meth_QPinchGesture_totalChangeFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_totalChangeFlags)},
    {SIP_MLNAME_CAST(sipName_totalRotationAngle), meth_QPinchGesture_totalRotationAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_totalRotationAngle)},
    {SIP_MLNAME_CAST(sipName_totalScaleFactor), meth_QPinchGesture_totalScaleFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPinchGesture_totalScaleFactor)}
};

static sipEnumMemberDef enummembers_QPinchGesture[] = {
    {sipName_CenterPointChanged, static_cast<int>( ::QPinchGesture::CenterPointChanged), 392},
    {sipName_RotationAngleChanged, static_cast<int>( ::QPinchGesture::RotationAngleChanged), 392},
    {sipName_ScaleFactorChanged, static_cast<int>( ::QPinchGesture::ScaleFactorChanged), 392},
};

PyDoc_STRVAR(doc_QPinchGesture, "\1QPinchGesture(parent: QObject = None)");


static pyqt4ClassPluginDef plugin_QPinchGesture = {
    & ::QPinchGesture::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QPinchGesture = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QPinchGesture,
        {0},
        &plugin_QPinchGesture
    },
    {
        sipNameNr_QPinchGesture,
        {0, 0, 1},
        22, methods_QPinchGesture,
        3, enummembers_QPinchGesture,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPinchGesture,
    -1,
    -1,
    supers_QPinchGesture,
    0,
    init_type_QPinchGesture,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPinchGesture,
    0,
    0,
    0,
    release_QPinchGesture,
    cast_QPinchGesture,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

#line 28 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"
#line 30 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"
#line 30 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
// Set the points of a polygon from a Python list.
static bool setPointsFromList(QPolygon *poly, PyObject *l)
{
    int *coords = new int[PyList_GET_SIZE(l)];

    for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(l); ++i)
    {
        coords[i] = SIPLong_AsLong(PyList_GET_ITEM(l, i));

        if (PyErr_Occurred() != NULL)
        {
            delete[] coords;
            return false;
        }
    }

    poly->setPoints(PyList_GET_SIZE(l) >> 1, coords);

    delete[] coords;
    return true;
}
#line 74 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"


PyDoc_STRVAR(doc_QPolygon_translate, "translate(self, int, int)\n"
    "translate(self, QPoint)");

extern "C" {static PyObject *meth_QPolygon_translate(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QPoint* a0;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_translate, doc_QPolygon_translate);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_boundingRect, "boundingRect(self) -> QRect");

extern "C" {static PyObject *meth_QPolygon_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect(sipCpp->boundingRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_boundingRect, doc_QPolygon_boundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_point, "point(self, int) -> QPoint");

extern "C" {static PyObject *meth_QPolygon_point(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_point(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygon, &sipCpp, &a0))
        {
             ::QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPoint(sipCpp->point(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_point, doc_QPolygon_point);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_setPoints, "setPoints(self, List[int])\n"
    "setPoints(self, int, int, *)");

extern "C" {static PyObject *meth_QPolygon_setPoints(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_setPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BT", &sipSelf, sipType_QPolygon, &sipCpp, &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
        if (!setPointsFromList(sipCpp, a0))
            sipIsErr = 1;
#line 207 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        PyObject * a2;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiW", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1, &a2))
        {
#line 117 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
        // Accept at least one pair of integer coordinates.
        int nPoints = 1 + ((PyTuple_GET_SIZE(a2) + 1) >> 1);
        
        int *points = new int[nPoints * 2];
        
        points[0] = a0;
        points[1] = a1;
        
        for (SIP_SSIZE_T i = 0; i < PyTuple_GET_SIZE(a2); ++i)
            points[2 + i] = SIPLong_AsLong(PyTuple_GET_ITEM(a2, i));
        
        sipCpp->setPoints(nPoints, points);
        
        delete[] points;
#line 240 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

            Py_DECREF(a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_setPoints, doc_QPolygon_setPoints);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_putPoints, "putPoints(self, int, int, int, *)\n"
    "putPoints(self, int, int, QPolygon, from_: int = 0)");

extern "C" {static PyObject *meth_QPolygon_putPoints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygon_putPoints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        PyObject * a3;
         ::QPolygon *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiiiW", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1, &a2, &a3))
        {
#line 135 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
        // Accept at least one pair of integer coordinates.
        int nPoints = 1 + ((PyTuple_GET_SIZE(a3) + 1) >> 1);
        
        int *points = new int[nPoints * 2];
        
        points[0] = a1;
        points[1] = a2;
        
        for (SIP_SSIZE_T i = 0; i < PyTuple_GET_SIZE(a3); ++i)
            points[2 + i] = SIPLong_AsLong(PyTuple_GET_ITEM(a3, i));
        
        sipCpp->putPoints(a0, nPoints, points);
        
        delete[] points;
#line 290 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

            Py_DECREF(a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const  ::QPolygon* a2;
        int a3 = 0;
         ::QPolygon *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiJ9|i", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1, sipType_QPolygon, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->putPoints(a0,a1,*a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_putPoints, doc_QPolygon_putPoints);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_setPoint, "setPoint(self, int, QPoint)\n"
    "setPoint(self, int, int, int)");

extern "C" {static PyObject *meth_QPolygon_setPoint(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_setPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QPoint* a1;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QPolygon, &sipCpp, &a0, sipType_QPoint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPoint(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPoint(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_setPoint, doc_QPolygon_setPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_containsPoint, "containsPoint(self, QPoint, Qt.FillRule) -> bool");

extern "C" {static PyObject *meth_QPolygon_containsPoint(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_containsPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
         ::Qt::FillRule a1;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0, sipType_Qt_FillRule, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->containsPoint(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_containsPoint, doc_QPolygon_containsPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_united, "united(self, QPolygon) -> QPolygon");

extern "C" {static PyObject *meth_QPolygon_united(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_united(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPolygon* a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPolygon, &a0))
        {
             ::QPolygon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPolygon(sipCpp->united(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_united, doc_QPolygon_united);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_intersected, "intersected(self, QPolygon) -> QPolygon");

extern "C" {static PyObject *meth_QPolygon_intersected(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPolygon* a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPolygon, &a0))
        {
             ::QPolygon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPolygon(sipCpp->intersected(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_intersected, doc_QPolygon_intersected);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_subtracted, "subtracted(self, QPolygon) -> QPolygon");

extern "C" {static PyObject *meth_QPolygon_subtracted(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_subtracted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPolygon* a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPolygon, &a0))
        {
             ::QPolygon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPolygon(sipCpp->subtracted(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_subtracted, doc_QPolygon_subtracted);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_translated, "translated(self, int, int) -> QPolygon\n"
    "translated(self, QPoint) -> QPolygon");

extern "C" {static PyObject *meth_QPolygon_translated(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1))
        {
             ::QPolygon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPolygon(sipCpp->translated(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    {
        const  ::QPoint* a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0))
        {
             ::QPolygon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPolygon(sipCpp->translated(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_translated, doc_QPolygon_translated);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_append, "append(self, QPoint)");

extern "C" {static PyObject *meth_QPolygon_append(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->append(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_append, doc_QPolygon_append);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_at, "at(self, int) -> QPoint");

extern "C" {static PyObject *meth_QPolygon_at(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygon, &sipCpp, &a0))
        {
             ::QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPoint(sipCpp->at(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_at, doc_QPolygon_at);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_clear, "clear(self)");

extern "C" {static PyObject *meth_QPolygon_clear(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_clear, doc_QPolygon_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_contains, "contains(self, QPoint) -> bool");

extern "C" {static PyObject *meth_QPolygon_contains(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_contains, doc_QPolygon_contains);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_count, "count(self, QPoint) -> int\n"
    "count(self) -> int");

extern "C" {static PyObject *meth_QPolygon_count(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_count, doc_QPolygon_count);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_data, "data(self) -> sip.voidptr");

extern "C" {static PyObject *meth_QPolygon_data(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
            void*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->data();
            Py_END_ALLOW_THREADS

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_data, doc_QPolygon_data);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_fill, "fill(self, QPoint, size: int = -1)");

extern "C" {static PyObject *meth_QPolygon_fill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygon_fill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
        int a1 = -1;
         ::QPolygon *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fill(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_fill, doc_QPolygon_fill);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_first, "first(self) -> QPoint");

extern "C" {static PyObject *meth_QPolygon_first(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_first(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
             ::QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->first();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_first, doc_QPolygon_first);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_indexOf, "indexOf(self, QPoint, from_: int = 0) -> int");

extern "C" {static PyObject *meth_QPolygon_indexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygon_indexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
        int a1 = 0;
        const  ::QPolygon *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_indexOf, doc_QPolygon_indexOf);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_insert, "insert(self, int, QPoint)");

extern "C" {static PyObject *meth_QPolygon_insert(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QPoint* a1;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QPolygon, &sipCpp, &a0, sipType_QPoint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insert(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_insert, doc_QPolygon_insert);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QPolygon_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_isEmpty, doc_QPolygon_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_last, "last(self) -> QPoint");

extern "C" {static PyObject *meth_QPolygon_last(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_last(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
             ::QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->last();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_last, doc_QPolygon_last);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_lastIndexOf, "lastIndexOf(self, QPoint, from_: int = -1) -> int");

extern "C" {static PyObject *meth_QPolygon_lastIndexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygon_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
        int a1 = -1;
        const  ::QPolygon *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_lastIndexOf, doc_QPolygon_lastIndexOf);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_mid, "mid(self, int, length: int = -1) -> QPolygon");

extern "C" {static PyObject *meth_QPolygon_mid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygon_mid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = -1;
        const  ::QPolygon *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1))
        {
             ::QPolygon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPolygon(sipCpp->mid(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_mid, doc_QPolygon_mid);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_prepend, "prepend(self, QPoint)");

extern "C" {static PyObject *meth_QPolygon_prepend(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_prepend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPoint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->prepend(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_prepend, doc_QPolygon_prepend);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_remove, "remove(self, int)\n"
    "remove(self, int, int)");

extern "C" {static PyObject *meth_QPolygon_remove(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygon, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->remove(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPolygon, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->remove(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_remove, doc_QPolygon_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_replace, "replace(self, int, QPoint)");

extern "C" {static PyObject *meth_QPolygon_replace(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_replace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QPoint* a1;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QPolygon, &sipCpp, &a0, sipType_QPoint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->replace(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_replace, doc_QPolygon_replace);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_size, "size(self) -> int");

extern "C" {static PyObject *meth_QPolygon_size(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygon, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->size();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_size, doc_QPolygon_size);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_value, "value(self, int) -> QPoint\n"
    "value(self, int, QPoint) -> QPoint");

extern "C" {static PyObject *meth_QPolygon_value(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygon, &sipCpp, &a0))
        {
             ::QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPoint(sipCpp->value(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    {
        int a0;
        const  ::QPoint* a1;
        const  ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QPolygon, &sipCpp, &a0, sipType_QPoint, &a1))
        {
             ::QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPoint(sipCpp->value(a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_value, doc_QPolygon_value);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygon_swap, "swap(self, QPolygon)");

extern "C" {static PyObject *meth_QPolygon_swap(PyObject *, PyObject *);}
static PyObject *meth_QPolygon_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPolygon* a0;
         ::QPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygon, &sipCpp, sipType_QPolygon, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->swap(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName_swap, doc_QPolygon_swap);

    return NULL;
}


extern "C" {static PyObject *slot_QPolygon___mul__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPolygon* a0;
        const  ::QMatrix* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPolygon, &a0, sipType_QMatrix, &a1))
        {
             ::QPolygon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPolygon((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    {
        const  ::QPolygon* a0;
        const  ::QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPolygon, &a0, sipType_QTransform, &a1))
        {
             ::QPolygon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPolygon((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, mul_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static int slot_QPolygon___contains__(PyObject *,PyObject *);}
static int slot_QPolygon___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            int sipRes = 0;

#line 339 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
// It looks like you can't assign QBool to int.
sipRes = bool(sipCpp->contains(*a0));
#line 1308 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName___contains__, NULL);

    return -1;
}


extern "C" {static int slot_QPolygon___delitem__(PyObject *,PyObject *);}
static int slot_QPolygon___delitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            int sipIsErr = 0;

#line 283 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
int len;

len = sipCpp->count();

if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
    sipIsErr = 1;
else
    sipCpp->remove(a0);
#line 1347 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            int sipIsErr = 0;

#line 295 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
SIP_SSIZE_T len, start, stop, step, slicelength, i;

len = sipCpp->count();

#if PY_VERSION_HEX >= 0x03020000
if (PySlice_GetIndicesEx(a0, len, &start, &stop, &step, &slicelength) < 0)
#else
if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
#endif
    sipIsErr = 1;
else
    for (i = 0; i < slicelength; ++i)
    {
        sipCpp->remove(start);
        start += step - 1;
    }
#line 1380 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName___delitem__, NULL);

    return -1;
}


extern "C" {static int slot_QPolygon___setitem__(PyObject *,PyObject *);}
static int slot_QPolygon___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QPoint* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "iJ9", &a0, sipType_QPoint, &a1))
        {
            int sipIsErr = 0;

#line 236 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
int len;

len = sipCpp->count();

if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
    sipIsErr = 1;
else
    (*sipCpp)[a0] = *a1;
#line 1423 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;
        const  ::QPolygon* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "TJ9", &PySlice_Type, &a0, sipType_QPolygon, &a1))
        {
            int sipIsErr = 0;

#line 248 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
SIP_SSIZE_T len, start, stop, step, slicelength, i;

len = sipCpp->count();

#if PY_VERSION_HEX >= 0x03020000
if (PySlice_GetIndicesEx(a0, len, &start, &stop, &step, &slicelength) < 0)
#else
if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
#endif
    sipIsErr = 1;
else
{
    int vlen = a1->count();

    if (vlen != slicelength)
    {
        sipBadLengthForSlice(vlen, slicelength);
        sipIsErr = 1;
    }
    else
    {
        QVector<QPoint>::const_iterator it = a1->begin();

        for (i = 0; i < slicelength; ++i)
        {
            (*sipCpp)[start] = *it;
            start += step;
            ++it;
        }
    }
}
#line 1472 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_QPolygon___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
             ::QPoint*sipRes = 0;
            int sipIsErr = 0;

#line 224 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
SIP_SSIZE_T idx = sipConvertFromSequenceIndex(a0, sipCpp->count());

if (idx < 0)
    sipIsErr = 1;
else
    sipRes = new QPoint(sipCpp->operator[]((int)idx));
#line 1513 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QPoint,NULL);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
             ::QPolygon*sipRes = 0;
            int sipIsErr = 0;

#line 315 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
SIP_SSIZE_T len, start, stop, step, slicelength, i;

len = sipCpp->count();

#if PY_VERSION_HEX >= 0x03020000
if (PySlice_GetIndicesEx(a0, len, &start, &stop, &step, &slicelength) < 0)
#else
if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
#endif
    sipIsErr = 1;
else
{
    sipRes = new QPolygon();

    for (i = 0; i < slicelength; ++i)
    {
        (*sipRes) += (*sipCpp)[start];
        start += step;
    }
}
#line 1551 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QPolygon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygon, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static PyObject *slot_QPolygon___lshift__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPolygon* a0;
        const  ::QPoint* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPolygon, &a0, sipType_QPoint, &a1))
        {
            PyObject * sipRes = 0;

#line 216 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
    *a0 << *a1;

    sipRes = sipArg0;
    Py_INCREF(sipRes);
#line 1585 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

            return sipRes;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, lshift_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QPolygon___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QPolygon* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygon, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QPolygon::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QPolygon, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QPolygon___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QPolygon* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygon, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::QPolygon::operator+=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPoint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::QPolygon::operator+=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return NULL;
}


extern "C" {static PyObject *slot_QPolygon___add__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___add__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QPolygon* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygon, &a0))
        {
             ::QPolygon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPolygon(sipCpp-> ::QPolygon::operator+(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,concat_slot);

    return NULL;
}


extern "C" {static PyObject *slot_QPolygon___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPolygon___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QPolygon* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygon, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QPolygon::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QPolygon, sipSelf, sipArg);
}


extern "C" {static SIP_SSIZE_T slot_QPolygon___len__(PyObject *);}
static SIP_SSIZE_T slot_QPolygon___len__(PyObject *sipSelf)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygon));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 1760 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPolygon(void *, int);}
static void release_QPolygon(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QPolygon *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QPolygon(void *);}
static PyObject *pickle_QPolygon(void *sipCppV)
{
     ::QPolygon *sipCpp = reinterpret_cast< ::QPolygon *>(sipCppV);
    PyObject *sipRes;

#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
    PyObject *pl = PyList_New(sipCpp->count() * 2);
    
    for (int p = 0, i = 0; i < sipCpp->count(); ++i, p += 2)
    {
        int x, y;
    
        sipCpp->point(i, &x, &y);
    
        PyList_SET_ITEM(pl, p, SIPLong_FromLong(x));
        PyList_SET_ITEM(pl, p + 1, SIPLong_FromLong(y));
    }
    
    sipRes = Py_BuildValue((char *)"(N)", pl);
#line 1802 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

    return sipRes;
}


extern "C" {static void assign_QPolygon(void *, SIP_SSIZE_T, const void *);}
static void assign_QPolygon(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::QPolygon *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::QPolygon *>(sipSrc);
}


extern "C" {static void *array_QPolygon(SIP_SSIZE_T);}
static void *array_QPolygon(SIP_SSIZE_T sipNrElem)
{
    return new  ::QPolygon[sipNrElem];
}


extern "C" {static void *copy_QPolygon(const void *, SIP_SSIZE_T);}
static void *copy_QPolygon(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QPolygon(reinterpret_cast<const  ::QPolygon *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPolygon(sipSimpleWrapper *);}
static void dealloc_QPolygon(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QPolygon(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QPolygon(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPolygon(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QPolygon *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QPolygon();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QPolygon* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPolygon, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QPolygon(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QVector< ::QPoint>* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QVector_0100QPoint,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QPolygon(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QVector< ::QPoint> *>(a0),sipType_QVector_0100QPoint,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QRect* a0;
        bool a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_closed,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|b", sipType_QRect, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QPolygon(*a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "i", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QPolygon(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 83 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
        sipCpp = new QPolygon();
        
        if (!setPointsFromList(sipCpp, a0))
        {
            delete sipCpp;
            sipCpp = 0;
            sipIsErr = 1;
        }
#line 1931 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        const  ::QVariant* a0;
        PyObject *a0Wrapper;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "@J1", &a0Wrapper, sipType_QVariant,&a0, &a0State))
        {
            sipErrorState sipError = sipErrorNone;

#line 95 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpolygon.sip"
        #if QT_VERSION >= 0x050000
        if (a0->canConvert<QPolygon>())
            sipCpp = new QPolygon(a0->value<QPolygon>());
        #else
        if (qVariantCanConvert<QPolygon>(*a0))
            sipCpp = new QPolygon(qVariantValue<QPolygon>(*a0));
        #endif
        else
            sipError = sipBadCallableArg(0, a0Wrapper);
#line 1967 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQPolygon.cpp"
            sipReleaseType(const_cast< ::QVariant *>(a0),sipType_QVariant,a0State);

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return NULL;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPolygon[] = {
    {(void *)slot_QPolygon___mul__, mul_slot},
    {(void *)slot_QPolygon___contains__, contains_slot},
    {(void *)slot_QPolygon___delitem__, delitem_slot},
    {(void *)slot_QPolygon___setitem__, setitem_slot},
    {(void *)slot_QPolygon___getitem__, getitem_slot},
    {(void *)slot_QPolygon___lshift__, lshift_slot},
    {(void *)slot_QPolygon___eq__, eq_slot},
    {(void *)slot_QPolygon___iadd__, iconcat_slot},
    {(void *)slot_QPolygon___add__, concat_slot},
    {(void *)slot_QPolygon___ne__, ne_slot},
    {(void *)slot_QPolygon___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPolygon[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QPolygon_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_append)},
    {SIP_MLNAME_CAST(sipName_at), meth_QPolygon_at, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_at)},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QPolygon_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_boundingRect)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QPolygon_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_clear)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QPolygon_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_contains)},
    {SIP_MLNAME_CAST(sipName_containsPoint), meth_QPolygon_containsPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_containsPoint)},
    {SIP_MLNAME_CAST(sipName_count), meth_QPolygon_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_count)},
    {SIP_MLNAME_CAST(sipName_data), meth_QPolygon_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_data)},
    {SIP_MLNAME_CAST(sipName_fill), (PyCFunction)meth_QPolygon_fill, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygon_fill)},
    {SIP_MLNAME_CAST(sipName_first), meth_QPolygon_first, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_first)},
    {SIP_MLNAME_CAST(sipName_indexOf), (PyCFunction)meth_QPolygon_indexOf, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygon_indexOf)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QPolygon_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_insert)},
    {SIP_MLNAME_CAST(sipName_intersected), meth_QPolygon_intersected, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_intersected)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QPolygon_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_isEmpty)},
    {SIP_MLNAME_CAST(sipName_last), meth_QPolygon_last, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_last)},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), (PyCFunction)meth_QPolygon_lastIndexOf, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygon_lastIndexOf)},
    {SIP_MLNAME_CAST(sipName_mid), (PyCFunction)meth_QPolygon_mid, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygon_mid)},
    {SIP_MLNAME_CAST(sipName_point), meth_QPolygon_point, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_point)},
    {SIP_MLNAME_CAST(sipName_prepend), meth_QPolygon_prepend, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_prepend)},
    {SIP_MLNAME_CAST(sipName_putPoints), (PyCFunction)meth_QPolygon_putPoints, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygon_putPoints)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QPolygon_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_remove)},
    {SIP_MLNAME_CAST(sipName_replace), meth_QPolygon_replace, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_replace)},
    {SIP_MLNAME_CAST(sipName_setPoint), meth_QPolygon_setPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_setPoint)},
    {SIP_MLNAME_CAST(sipName_setPoints), meth_QPolygon_setPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_setPoints)},
    {SIP_MLNAME_CAST(sipName_size), meth_QPolygon_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_size)},
    {SIP_MLNAME_CAST(sipName_subtracted), meth_QPolygon_subtracted, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_subtracted)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPolygon_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_swap)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QPolygon_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_translate)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QPolygon_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_translated)},
    {SIP_MLNAME_CAST(sipName_united), meth_QPolygon_united, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_united)},
    {SIP_MLNAME_CAST(sipName_value), meth_QPolygon_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygon_value)}
};

PyDoc_STRVAR(doc_QPolygon, "\1QPolygon()\n"
    "QPolygon(QPolygon)\n"
    "QPolygon(List[QPoint])\n"
    "QPolygon(QRect, closed: bool = False)\n"
    "QPolygon(int)\n"
    "QPolygon(List[int])\n"
    "QPolygon(Any)");


static pyqt4ClassPluginDef plugin_QPolygon = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QPolygon = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QPolygon,
        {0},
        &plugin_QPolygon
    },
    {
        sipNameNr_QPolygon,
        {0, 0, 1},
        31, methods_QPolygon,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPolygon,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPolygon,
    init_type_QPolygon,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPolygon,
    assign_QPolygon,
    array_QPolygon,
    copy_QPolygon,
    release_QPolygon,
    0,
    0,
    0,
    0,
    pickle_QPolygon,
    0,
    0
};

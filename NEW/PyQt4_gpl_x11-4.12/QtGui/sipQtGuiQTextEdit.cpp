/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 647 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 347 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 596 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 505 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 739 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 765 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 792 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 781 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 618 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 252 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 524 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 561 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 474 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 336 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 210 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qprinter.sip"
#include <qprinter.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 35 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 116 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 119 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 122 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 125 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qmenu.sip"
#include <qmenu.h>
#line 128 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 131 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 59 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 134 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 137 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 140 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 59 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 143 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 146 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 149 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 28 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 152 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 155 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 158 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 161 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 164 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 167 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 170 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 173 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 176 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 179 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 182 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 185 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 188 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 191 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 194 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 197 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 200 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 607 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 203 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 854 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 206 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 403 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 209 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 574 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 212 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 548 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 215 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 218 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 52 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 221 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 224 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 227 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 230 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 233 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 236 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 239 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 242 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 245 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 248 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 251 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 254 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 257 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 260 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 263 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 266 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 269 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 272 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 275 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextEdit.cpp"


class sipQTextEdit : public  ::QTextEdit
{
public:
    sipQTextEdit( ::QWidget*);
    sipQTextEdit(const  ::QString&, ::QWidget*);
    virtual ~sipQTextEdit();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void insertFromMimeData(const  ::QMimeData*);
    bool canInsertFromMimeData(const  ::QMimeData*) const;
     ::QMimeData* createMimeDataFromSelection() const;
     ::QVariant loadResource(int,const  ::QUrl&);
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
     ::QPaintEngine* paintEngine() const;
    int devType() const;
    void setVisible(bool);
     ::QSize sizeHint() const;
     ::QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    void mousePressEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void wheelEvent( ::QWheelEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void focusInEvent( ::QFocusEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void enterEvent( ::QEvent*);
    void leaveEvent( ::QEvent*);
    void paintEvent( ::QPaintEvent*);
    void moveEvent( ::QMoveEvent*);
    void resizeEvent( ::QResizeEvent*);
    void closeEvent( ::QCloseEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void tabletEvent( ::QTabletEvent*);
    void actionEvent( ::QActionEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dropEvent( ::QDropEvent*);
    void showEvent( ::QShowEvent*);
    void hideEvent( ::QHideEvent*);
    void changeEvent( ::QEvent*);
    void inputMethodEvent( ::QInputMethodEvent*);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const  ::QPalette&);
    void fontChange(const  ::QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool viewportEvent( ::QEvent*);
    void scrollContentsBy(int,int);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextEdit(const sipQTextEdit &);
    sipQTextEdit &operator = (const sipQTextEdit &);

    char sipPyMethods[53];
};

sipQTextEdit::sipQTextEdit( ::QWidget*a0):  ::QTextEdit(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextEdit::sipQTextEdit(const  ::QString& a0, ::QWidget*a1):  ::QTextEdit(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextEdit::~sipQTextEdit()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTextEdit::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextEdit);
}

int sipQTextEdit::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTextEdit::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextEdit,_c,_id,_a);

    return _id;
}

void *sipQTextEdit::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTextEdit, _clname)) ? this :  ::QTextEdit::qt_metacast(_clname);
}

void sipQTextEdit::insertFromMimeData(const  ::QMimeData*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_insertFromMimeData);

    if (!sipMeth)
    {
         ::QTextEdit::insertFromMimeData(a0);
        return;
    }

    extern void sipVH_QtGui_238(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*);

    sipVH_QtGui_238(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTextEdit::canInsertFromMimeData(const  ::QMimeData*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_canInsertFromMimeData);

    if (!sipMeth)
        return  ::QTextEdit::canInsertFromMimeData(a0);

    extern bool sipVH_QtGui_237(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QMimeData*);

    return sipVH_QtGui_237(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QMimeData* sipQTextEdit::createMimeDataFromSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_createMimeDataFromSelection);

    if (!sipMeth)
        return  ::QTextEdit::createMimeDataFromSelection();

    extern  ::QMimeData* sipVH_QtGui_236(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_236(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QVariant sipQTextEdit::loadResource(int a0,const  ::QUrl& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_loadResource);

    if (!sipMeth)
        return  ::QTextEdit::loadResource(a0,a1);

    extern  ::QVariant sipVH_QtGui_235(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::QUrl&);

    return sipVH_QtGui_235(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTextEdit::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QTextEdit::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QTextEdit::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QTextEdit::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QTextEdit::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QTextEdit::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTextEdit::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QTextEdit::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQTextEdit::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QTextEdit::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQTextEdit::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QTextEdit::metric(a0);

    extern int sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QPaintEngine* sipQTextEdit::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QTextEdit::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQTextEdit::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QTextEdit::devType();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQTextEdit::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QTextEdit::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSize sipQTextEdit::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QTextEdit::sizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQTextEdit::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QTextEdit::minimumSizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQTextEdit::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QTextEdit::heightForWidth(a0);

    extern int sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QTextEdit::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QTextEdit::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QTextEdit::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QTextEdit::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QTextEdit::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QTextEdit::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QTextEdit::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QTextEdit::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QTextEdit::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QTextEdit::enterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QTextEdit::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QTextEdit::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QTextEdit::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QTextEdit::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QTextEdit::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QTextEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QTextEdit::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QTextEdit::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QTextEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QTextEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QTextEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QTextEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QTextEdit::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QTextEdit::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QTextEdit::changeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QTextEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtGui_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQTextEdit::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QTextEdit::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtGui_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtGui_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTextEdit::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QTextEdit::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_31(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
         ::QTextEdit::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::paletteChange(const  ::QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
         ::QTextEdit::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPalette&);

    sipVH_QtGui_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::fontChange(const  ::QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
         ::QTextEdit::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QFont&);

    sipVH_QtGui_33(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
         ::QTextEdit::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
         ::QTextEdit::languageChange();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQTextEdit::viewportEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return  ::QTextEdit::viewportEvent(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextEdit::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
         ::QTextEdit::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtGui_43(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QTextEdit_setDocument, "setDocument(self, QTextDocument)");

extern "C" {static PyObject *meth_QTextEdit_setDocument(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextDocument* a0;
        PyObject *a0Keep;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTextEdit, &sipCpp, &a0Keep, sipType_QTextDocument, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocument(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -65, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setDocument, doc_QTextEdit_setDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_document, "document(self) -> QTextDocument");

extern "C" {static PyObject *meth_QTextEdit_document(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QTextDocument*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->document();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_document, doc_QTextEdit_document);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTextCursor, "setTextCursor(self, QTextCursor)");

extern "C" {static PyObject *meth_QTextEdit_setTextCursor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextCursor* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCursor, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextCursor(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextCursor, doc_QTextEdit_setTextCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_textCursor, "textCursor(self) -> QTextCursor");

extern "C" {static PyObject *meth_QTextEdit_textCursor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QTextCursor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTextCursor(sipCpp->textCursor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textCursor, doc_QTextEdit_textCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_isReadOnly, "isReadOnly(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isReadOnly();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_isReadOnly, doc_QTextEdit_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setReadOnly, "setReadOnly(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setReadOnly(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setReadOnly, doc_QTextEdit_setReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontPointSize, "fontPointSize(self) -> float");

extern "C" {static PyObject *meth_QTextEdit_fontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontPointSize();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontPointSize, doc_QTextEdit_fontPointSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontFamily, "fontFamily(self) -> str");

extern "C" {static PyObject *meth_QTextEdit_fontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->fontFamily());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontFamily, doc_QTextEdit_fontFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontWeight, "fontWeight(self) -> int");

extern "C" {static PyObject *meth_QTextEdit_fontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontWeight();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontWeight, doc_QTextEdit_fontWeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontUnderline, "fontUnderline(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_fontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontUnderline();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontUnderline, doc_QTextEdit_fontUnderline);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontItalic, "fontItalic(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_fontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontItalic();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontItalic, doc_QTextEdit_fontItalic);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_textColor, "textColor(self) -> QColor");

extern "C" {static PyObject *meth_QTextEdit_textColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QColor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QColor(sipCpp->textColor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textColor, doc_QTextEdit_textColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_currentFont, "currentFont(self) -> QFont");

extern "C" {static PyObject *meth_QTextEdit_currentFont(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_currentFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QFont*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QFont(sipCpp->currentFont());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_currentFont, doc_QTextEdit_currentFont);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_alignment, "alignment(self) -> Qt.Alignment");

extern "C" {static PyObject *meth_QTextEdit_alignment(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::Qt::Alignment*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Qt::Alignment(sipCpp->alignment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_alignment, doc_QTextEdit_alignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mergeCurrentCharFormat, "mergeCurrentCharFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QTextEdit_mergeCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mergeCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextCharFormat* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->mergeCurrentCharFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mergeCurrentCharFormat, doc_QTextEdit_mergeCurrentCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setCurrentCharFormat, "setCurrentCharFormat(self, QTextCharFormat)");

extern "C" {static PyObject *meth_QTextEdit_setCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextCharFormat* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentCharFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setCurrentCharFormat, doc_QTextEdit_setCurrentCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_currentCharFormat, "currentCharFormat(self) -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextEdit_currentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_currentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QTextCharFormat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTextCharFormat(sipCpp->currentCharFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_currentCharFormat, doc_QTextEdit_currentCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_autoFormatting, "autoFormatting(self) -> QTextEdit.AutoFormatting");

extern "C" {static PyObject *meth_QTextEdit_autoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_autoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QTextEdit::AutoFormatting*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTextEdit::AutoFormatting(sipCpp->autoFormatting());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextEdit_AutoFormatting,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_autoFormatting, doc_QTextEdit_autoFormatting);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setAutoFormatting, "setAutoFormatting(self, QTextEdit.AutoFormatting)");

extern "C" {static PyObject *meth_QTextEdit_setAutoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setAutoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextEdit::AutoFormatting* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextEdit_AutoFormatting, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoFormatting(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QTextEdit_AutoFormatting,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setAutoFormatting, doc_QTextEdit_setAutoFormatting);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_tabChangesFocus, "tabChangesFocus(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_tabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_tabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabChangesFocus();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_tabChangesFocus, doc_QTextEdit_tabChangesFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTabChangesFocus, "setTabChangesFocus(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setTabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabChangesFocus(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTabChangesFocus, doc_QTextEdit_setTabChangesFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setDocumentTitle, "setDocumentTitle(self, str)");

extern "C" {static PyObject *meth_QTextEdit_setDocumentTitle(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setDocumentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocumentTitle(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setDocumentTitle, doc_QTextEdit_setDocumentTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_documentTitle, "documentTitle(self) -> str");

extern "C" {static PyObject *meth_QTextEdit_documentTitle(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_documentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->documentTitle());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_documentTitle, doc_QTextEdit_documentTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_isUndoRedoEnabled, "isUndoRedoEnabled(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_isUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_isUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isUndoRedoEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_isUndoRedoEnabled, doc_QTextEdit_isUndoRedoEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setUndoRedoEnabled, "setUndoRedoEnabled(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUndoRedoEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setUndoRedoEnabled, doc_QTextEdit_setUndoRedoEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_lineWrapMode, "lineWrapMode(self) -> QTextEdit.LineWrapMode");

extern "C" {static PyObject *meth_QTextEdit_lineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_lineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QTextEdit::LineWrapMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineWrapMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTextEdit_LineWrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_lineWrapMode, doc_QTextEdit_lineWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setLineWrapMode, "setLineWrapMode(self, QTextEdit.LineWrapMode)");

extern "C" {static PyObject *meth_QTextEdit_setLineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setLineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextEdit::LineWrapMode a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextEdit_LineWrapMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLineWrapMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setLineWrapMode, doc_QTextEdit_setLineWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_lineWrapColumnOrWidth, "lineWrapColumnOrWidth(self) -> int");

extern "C" {static PyObject *meth_QTextEdit_lineWrapColumnOrWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_lineWrapColumnOrWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineWrapColumnOrWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_lineWrapColumnOrWidth, doc_QTextEdit_lineWrapColumnOrWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setLineWrapColumnOrWidth, "setLineWrapColumnOrWidth(self, int)");

extern "C" {static PyObject *meth_QTextEdit_setLineWrapColumnOrWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setLineWrapColumnOrWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLineWrapColumnOrWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setLineWrapColumnOrWidth, doc_QTextEdit_setLineWrapColumnOrWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_wordWrapMode, "wordWrapMode(self) -> QTextOption.WrapMode");

extern "C" {static PyObject *meth_QTextEdit_wordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_wordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QTextOption::WrapMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wordWrapMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTextOption_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_wordWrapMode, doc_QTextEdit_wordWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setWordWrapMode, "setWordWrapMode(self, QTextOption.WrapMode)");

extern "C" {static PyObject *meth_QTextEdit_setWordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setWordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextOption::WrapMode a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextOption_WrapMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWordWrapMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setWordWrapMode, doc_QTextEdit_setWordWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_find, "find(self, str, options: QTextDocument.FindFlags = 0) -> bool");

extern "C" {static PyObject *meth_QTextEdit_find(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_find(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextDocument::FindFlags a1def = 0;
         ::QTextDocument::FindFlags* a1 = &a1def;
        int a1State = 0;
         ::QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State, sipType_QTextDocument_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->find(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QTextDocument_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_find, doc_QTextEdit_find);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_toPlainText, "toPlainText(self) -> str");

extern "C" {static PyObject *meth_QTextEdit_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toPlainText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_toPlainText, doc_QTextEdit_toPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_toHtml, "toHtml(self) -> str");

extern "C" {static PyObject *meth_QTextEdit_toHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_toHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toHtml());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_toHtml, doc_QTextEdit_toHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_append, "append(self, str)");

extern "C" {static PyObject *meth_QTextEdit_append(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->append(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_append, doc_QTextEdit_append);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_ensureCursorVisible, "ensureCursorVisible(self)");

extern "C" {static PyObject *meth_QTextEdit_ensureCursorVisible(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_ensureCursorVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ensureCursorVisible();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_ensureCursorVisible, doc_QTextEdit_ensureCursorVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_loadResource, "loadResource(self, int, QUrl) -> Any");

extern "C" {static PyObject *meth_QTextEdit_loadResource(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_loadResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const  ::QUrl* a1;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTextEdit, &sipCpp, &a0, sipType_QUrl, &a1))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QTextEdit::loadResource(a0,*a1) : sipCpp->loadResource(a0,*a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_loadResource, doc_QTextEdit_loadResource);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_createStandardContextMenu, "createStandardContextMenu(self) -> QMenu\n"
    "createStandardContextMenu(self, QPoint) -> QMenu");

extern "C" {static PyObject *meth_QTextEdit_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QMenu*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createStandardContextMenu();
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    {
        const  ::QPoint* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
             ::QMenu*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createStandardContextMenu(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_createStandardContextMenu, doc_QTextEdit_createStandardContextMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_cursorForPosition, "cursorForPosition(self, QPoint) -> QTextCursor");

extern "C" {static PyObject *meth_QTextEdit_cursorForPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cursorForPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
             ::QTextCursor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTextCursor(sipCpp->cursorForPosition(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cursorForPosition, doc_QTextEdit_cursorForPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_cursorRect, "cursorRect(self, QTextCursor) -> QRect\n"
    "cursorRect(self) -> QRect");

extern "C" {static PyObject *meth_QTextEdit_cursorRect(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cursorRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextCursor* a0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCursor, &a0))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect(sipCpp->cursorRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect(sipCpp->cursorRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cursorRect, doc_QTextEdit_cursorRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_anchorAt, "anchorAt(self, QPoint) -> str");

extern "C" {static PyObject *meth_QTextEdit_anchorAt(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_anchorAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->anchorAt(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_anchorAt, doc_QTextEdit_anchorAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_overwriteMode, "overwriteMode(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_overwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_overwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->overwriteMode();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_overwriteMode, doc_QTextEdit_overwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setOverwriteMode, "setOverwriteMode(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setOverwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setOverwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOverwriteMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setOverwriteMode, doc_QTextEdit_setOverwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_tabStopWidth, "tabStopWidth(self) -> int");

extern "C" {static PyObject *meth_QTextEdit_tabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_tabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabStopWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_tabStopWidth, doc_QTextEdit_tabStopWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTabStopWidth, "setTabStopWidth(self, int)");

extern "C" {static PyObject *meth_QTextEdit_setTabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabStopWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTabStopWidth, doc_QTextEdit_setTabStopWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_acceptRichText, "acceptRichText(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_acceptRichText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_acceptRichText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->acceptRichText();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_acceptRichText, doc_QTextEdit_acceptRichText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setAcceptRichText, "setAcceptRichText(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setAcceptRichText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setAcceptRichText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAcceptRichText(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setAcceptRichText, doc_QTextEdit_setAcceptRichText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTextInteractionFlags, "setTextInteractionFlags(self, Union[Qt.TextInteractionFlags, Qt.TextInteractionFlag])");

extern "C" {static PyObject *meth_QTextEdit_setTextInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::TextInteractionFlags* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_TextInteractionFlags, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextInteractionFlags(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextInteractionFlags, doc_QTextEdit_setTextInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_textInteractionFlags, "textInteractionFlags(self) -> Qt.TextInteractionFlags");

extern "C" {static PyObject *meth_QTextEdit_textInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::Qt::TextInteractionFlags*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::Qt::TextInteractionFlags(sipCpp->textInteractionFlags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textInteractionFlags, doc_QTextEdit_textInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setCursorWidth, "setCursorWidth(self, int)");

extern "C" {static PyObject *meth_QTextEdit_setCursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setCursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCursorWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setCursorWidth, doc_QTextEdit_setCursorWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_cursorWidth, "cursorWidth(self) -> int");

extern "C" {static PyObject *meth_QTextEdit_cursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cursorWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cursorWidth, doc_QTextEdit_cursorWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setExtraSelections, "setExtraSelections(self, Sequence[QTextEdit.ExtraSelection])");

extern "C" {static PyObject *meth_QTextEdit_setExtraSelections(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setExtraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList< ::QTextEdit::ExtraSelection>* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QList_0100QTextEdit_ExtraSelection,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExtraSelections(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList< ::QTextEdit::ExtraSelection> *>(a0),sipType_QList_0100QTextEdit_ExtraSelection,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setExtraSelections, doc_QTextEdit_setExtraSelections);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_extraSelections, "extraSelections(self) -> List[QTextEdit.ExtraSelection]");

extern "C" {static PyObject *meth_QTextEdit_extraSelections(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_extraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QList< ::QTextEdit::ExtraSelection>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QTextEdit::ExtraSelection>(sipCpp->extraSelections());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextEdit_ExtraSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_extraSelections, doc_QTextEdit_extraSelections);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_canPaste, "canPaste(self) -> bool");

extern "C" {static PyObject *meth_QTextEdit_canPaste(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_canPaste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->canPaste();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_canPaste, doc_QTextEdit_canPaste);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_moveCursor, "moveCursor(self, QTextCursor.MoveOperation, mode: QTextCursor.MoveMode = QTextCursor.MoveAnchor)");

extern "C" {static PyObject *meth_QTextEdit_moveCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_moveCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextCursor::MoveOperation a0;
         ::QTextCursor::MoveMode a1 = QTextCursor::MoveAnchor;
         ::QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|E", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCursor_MoveOperation, &a0, sipType_QTextCursor_MoveMode, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveCursor(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_moveCursor, doc_QTextEdit_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_print_, "print_(self, QPrinter)");

extern "C" {static PyObject *meth_QTextEdit_print_(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPrinter* a0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPrinter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->print(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_print_, doc_QTextEdit_print_);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontPointSize, "setFontPointSize(self, float)");

extern "C" {static PyObject *meth_QTextEdit_setFontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontPointSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontPointSize, doc_QTextEdit_setFontPointSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontFamily, "setFontFamily(self, str)");

extern "C" {static PyObject *meth_QTextEdit_setFontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontFamily(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontFamily, doc_QTextEdit_setFontFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontWeight, "setFontWeight(self, int)");

extern "C" {static PyObject *meth_QTextEdit_setFontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontWeight(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontWeight, doc_QTextEdit_setFontWeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontUnderline, "setFontUnderline(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setFontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontUnderline(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontUnderline, doc_QTextEdit_setFontUnderline);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontItalic, "setFontItalic(self, bool)");

extern "C" {static PyObject *meth_QTextEdit_setFontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontItalic(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontItalic, doc_QTextEdit_setFontItalic);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QTextEdit_setText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setText, doc_QTextEdit_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTextColor, "setTextColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextEdit_setTextColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextColor, doc_QTextEdit_setTextColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setCurrentFont, "setCurrentFont(self, QFont)");

extern "C" {static PyObject *meth_QTextEdit_setCurrentFont(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setCurrentFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFont* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QFont, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentFont(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setCurrentFont, doc_QTextEdit_setCurrentFont);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setAlignment, "setAlignment(self, Union[Qt.Alignment, Qt.AlignmentFlag])");

extern "C" {static PyObject *meth_QTextEdit_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::Alignment* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlignment(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setAlignment, doc_QTextEdit_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setPlainText, "setPlainText(self, str)");

extern "C" {static PyObject *meth_QTextEdit_setPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPlainText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setPlainText, doc_QTextEdit_setPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setHtml, "setHtml(self, str)");

extern "C" {static PyObject *meth_QTextEdit_setHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHtml(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setHtml, doc_QTextEdit_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_cut, "cut(self)");

extern "C" {static PyObject *meth_QTextEdit_cut(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->cut();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cut, doc_QTextEdit_cut);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_copy, "copy(self)");

extern "C" {static PyObject *meth_QTextEdit_copy(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->copy();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_copy, doc_QTextEdit_copy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_paste, "paste(self)");

extern "C" {static PyObject *meth_QTextEdit_paste(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_paste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->paste();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_paste, doc_QTextEdit_paste);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_clear, "clear(self)");

extern "C" {static PyObject *meth_QTextEdit_clear(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_clear, doc_QTextEdit_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_selectAll, "selectAll(self)");

extern "C" {static PyObject *meth_QTextEdit_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->selectAll();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_selectAll, doc_QTextEdit_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_insertPlainText, "insertPlainText(self, str)");

extern "C" {static PyObject *meth_QTextEdit_insertPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_insertPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertPlainText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_insertPlainText, doc_QTextEdit_insertPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_insertHtml, "insertHtml(self, str)");

extern "C" {static PyObject *meth_QTextEdit_insertHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_insertHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertHtml(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_insertHtml, doc_QTextEdit_insertHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_scrollToAnchor, "scrollToAnchor(self, str)");

extern "C" {static PyObject *meth_QTextEdit_scrollToAnchor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_scrollToAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scrollToAnchor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_scrollToAnchor, doc_QTextEdit_scrollToAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_redo, "redo(self)");

extern "C" {static PyObject *meth_QTextEdit_redo(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->redo();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_redo, doc_QTextEdit_redo);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_undo, "undo(self)");

extern "C" {static PyObject *meth_QTextEdit_undo(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->undo();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_undo, doc_QTextEdit_undo);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_zoomIn, "zoomIn(self, range: int = 1)");

extern "C" {static PyObject *meth_QTextEdit_zoomIn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_zoomIn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 1;
         ::QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->zoomIn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_zoomIn, doc_QTextEdit_zoomIn);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_zoomOut, "zoomOut(self, range: int = 1)");

extern "C" {static PyObject *meth_QTextEdit_zoomOut(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_zoomOut(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 1;
         ::QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->zoomOut(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_zoomOut, doc_QTextEdit_zoomOut);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QTextEdit_event(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QTextEdit::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_event, doc_QTextEdit_event);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QTextEdit_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::timerEvent(a0) : sipCpp->timerEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_timerEvent, doc_QTextEdit_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QTextEdit_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_keyPressEvent, doc_QTextEdit_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_keyReleaseEvent, "keyReleaseEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QTextEdit_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::keyReleaseEvent(a0) : sipCpp->keyReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_keyReleaseEvent, doc_QTextEdit_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QTextEdit_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_resizeEvent, doc_QTextEdit_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QTextEdit_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_paintEvent, doc_QTextEdit_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mousePressEvent, doc_QTextEdit_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mouseMoveEvent, doc_QTextEdit_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mouseReleaseEvent, doc_QTextEdit_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mouseDoubleClickEvent, "mouseDoubleClickEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::mouseDoubleClickEvent(a0) : sipCpp->mouseDoubleClickEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mouseDoubleClickEvent, doc_QTextEdit_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QTextEdit_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QTextEdit::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusNextPrevChild, doc_QTextEdit_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_contextMenuEvent, "contextMenuEvent(self, QContextMenuEvent)");

extern "C" {static PyObject *meth_QTextEdit_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QContextMenuEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::contextMenuEvent(a0) : sipCpp->contextMenuEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_contextMenuEvent, doc_QTextEdit_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_dragEnterEvent, "dragEnterEvent(self, QDragEnterEvent)");

extern "C" {static PyObject *meth_QTextEdit_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragEnterEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::dragEnterEvent(a0) : sipCpp->dragEnterEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dragEnterEvent, doc_QTextEdit_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QTextEdit_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dragLeaveEvent, doc_QTextEdit_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QTextEdit_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dragMoveEvent, doc_QTextEdit_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QTextEdit_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::dropEvent(a0) : sipCpp->dropEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dropEvent, doc_QTextEdit_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QTextEdit_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusInEvent, doc_QTextEdit_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_focusOutEvent, "focusOutEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QTextEdit_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::focusOutEvent(a0) : sipCpp->focusOutEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusOutEvent, doc_QTextEdit_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QTextEdit_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::showEvent(a0) : sipCpp->showEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_showEvent, doc_QTextEdit_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QTextEdit_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_changeEvent, doc_QTextEdit_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QTextEdit_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::wheelEvent(a0) : sipCpp->wheelEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_wheelEvent, doc_QTextEdit_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_createMimeDataFromSelection, "createMimeDataFromSelection(self) -> QMimeData");

extern "C" {static PyObject *meth_QTextEdit_createMimeDataFromSelection(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_createMimeDataFromSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QMimeData*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QTextEdit::createMimeDataFromSelection() : sipCpp->createMimeDataFromSelection());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMimeData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_createMimeDataFromSelection, doc_QTextEdit_createMimeDataFromSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_canInsertFromMimeData, "canInsertFromMimeData(self, QMimeData) -> bool");

extern "C" {static PyObject *meth_QTextEdit_canInsertFromMimeData(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_canInsertFromMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMimeData, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QTextEdit::canInsertFromMimeData(a0) : sipCpp->canInsertFromMimeData(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_canInsertFromMimeData, doc_QTextEdit_canInsertFromMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_insertFromMimeData, "insertFromMimeData(self, QMimeData)");

extern "C" {static PyObject *meth_QTextEdit_insertFromMimeData(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_insertFromMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMimeData* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMimeData, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::insertFromMimeData(a0) : sipCpp->insertFromMimeData(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_insertFromMimeData, doc_QTextEdit_insertFromMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_inputMethodEvent, "inputMethodEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QTextEdit_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputMethodEvent* a0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::inputMethodEvent(a0) : sipCpp->inputMethodEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_inputMethodEvent, doc_QTextEdit_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_inputMethodQuery, "inputMethodQuery(self, Qt.InputMethodQuery) -> Any");

extern "C" {static PyObject *meth_QTextEdit_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::InputMethodQuery a0;
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pE", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant((sipSelfWasArg ? sipCpp-> ::QTextEdit::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_inputMethodQuery, doc_QTextEdit_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_scrollContentsBy, "scrollContentsBy(self, int, int)");

extern "C" {static PyObject *meth_QTextEdit_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QTextEdit, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QTextEdit::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_scrollContentsBy, doc_QTextEdit_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_textBackgroundColor, "textBackgroundColor(self) -> QColor");

extern "C" {static PyObject *meth_QTextEdit_textBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
             ::QColor*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QColor(sipCpp->textBackgroundColor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textBackgroundColor, doc_QTextEdit_textBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTextBackgroundColor, "setTextBackgroundColor(self, Union[QColor, Qt.GlobalColor, QGradient])");

extern "C" {static PyObject *meth_QTextEdit_setTextBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QColor* a0;
        int a0State = 0;
         ::QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextBackgroundColor(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextBackgroundColor, doc_QTextEdit_setTextBackgroundColor);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextEdit(void *, const sipTypeDef *);}
static void *cast_QTextEdit(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextEdit *sipCpp = reinterpret_cast< ::QTextEdit *>(sipCppV);

    if (targetType == sipType_QAbstractScrollArea)
        return static_cast< ::QAbstractScrollArea *>(sipCpp);

    if (targetType == sipType_QFrame)
        return static_cast< ::QFrame *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextEdit(void *, int);}
static void release_QTextEdit(void *sipCppV, int)
{
     ::QTextEdit *sipCpp = reinterpret_cast< ::QTextEdit *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTextEdit(sipSimpleWrapper *);}
static void dealloc_QTextEdit(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextEdit *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextEdit(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextEdit(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextEdit(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTextEdit *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextEdit(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextEdit(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextEdit[] = {{21, 255, 1}};


static PyMethodDef methods_QTextEdit[] = {
    {SIP_MLNAME_CAST(sipName_acceptRichText), meth_QTextEdit_acceptRichText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_acceptRichText)},
    {SIP_MLNAME_CAST(sipName_alignment), meth_QTextEdit_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_alignment)},
    {SIP_MLNAME_CAST(sipName_anchorAt), meth_QTextEdit_anchorAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_anchorAt)},
    {SIP_MLNAME_CAST(sipName_append), meth_QTextEdit_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_append)},
    {SIP_MLNAME_CAST(sipName_autoFormatting), meth_QTextEdit_autoFormatting, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_autoFormatting)},
    {SIP_MLNAME_CAST(sipName_canInsertFromMimeData), meth_QTextEdit_canInsertFromMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_canInsertFromMimeData)},
    {SIP_MLNAME_CAST(sipName_canPaste), meth_QTextEdit_canPaste, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_canPaste)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QTextEdit_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_changeEvent)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QTextEdit_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_clear)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QTextEdit_contextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_copy), meth_QTextEdit_copy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_copy)},
    {SIP_MLNAME_CAST(sipName_createMimeDataFromSelection), meth_QTextEdit_createMimeDataFromSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_createMimeDataFromSelection)},
    {SIP_MLNAME_CAST(sipName_createStandardContextMenu), meth_QTextEdit_createStandardContextMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_createStandardContextMenu)},
    {SIP_MLNAME_CAST(sipName_currentCharFormat), meth_QTextEdit_currentCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_currentCharFormat)},
    {SIP_MLNAME_CAST(sipName_currentFont), meth_QTextEdit_currentFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_currentFont)},
    {SIP_MLNAME_CAST(sipName_cursorForPosition), meth_QTextEdit_cursorForPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_cursorForPosition)},
    {SIP_MLNAME_CAST(sipName_cursorRect), meth_QTextEdit_cursorRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_cursorRect)},
    {SIP_MLNAME_CAST(sipName_cursorWidth), meth_QTextEdit_cursorWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_cursorWidth)},
    {SIP_MLNAME_CAST(sipName_cut), meth_QTextEdit_cut, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_cut)},
    {SIP_MLNAME_CAST(sipName_document), meth_QTextEdit_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_document)},
    {SIP_MLNAME_CAST(sipName_documentTitle), meth_QTextEdit_documentTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_documentTitle)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QTextEdit_dragEnterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QTextEdit_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QTextEdit_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QTextEdit_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_dropEvent)},
    {SIP_MLNAME_CAST(sipName_ensureCursorVisible), meth_QTextEdit_ensureCursorVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_ensureCursorVisible)},
    {SIP_MLNAME_CAST(sipName_event), meth_QTextEdit_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_event)},
    {SIP_MLNAME_CAST(sipName_extraSelections), meth_QTextEdit_extraSelections, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_extraSelections)},
    {SIP_MLNAME_CAST(sipName_find), (PyCFunction)meth_QTextEdit_find, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_find)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QTextEdit_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QTextEdit_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QTextEdit_focusOutEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_fontFamily), meth_QTextEdit_fontFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontFamily)},
    {SIP_MLNAME_CAST(sipName_fontItalic), meth_QTextEdit_fontItalic, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontItalic)},
    {SIP_MLNAME_CAST(sipName_fontPointSize), meth_QTextEdit_fontPointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontPointSize)},
    {SIP_MLNAME_CAST(sipName_fontUnderline), meth_QTextEdit_fontUnderline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontUnderline)},
    {SIP_MLNAME_CAST(sipName_fontWeight), meth_QTextEdit_fontWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontWeight)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QTextEdit_inputMethodEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QTextEdit_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_insertFromMimeData), meth_QTextEdit_insertFromMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_insertFromMimeData)},
    {SIP_MLNAME_CAST(sipName_insertHtml), meth_QTextEdit_insertHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_insertHtml)},
    {SIP_MLNAME_CAST(sipName_insertPlainText), meth_QTextEdit_insertPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_insertPlainText)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QTextEdit_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_isUndoRedoEnabled), meth_QTextEdit_isUndoRedoEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_isUndoRedoEnabled)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QTextEdit_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QTextEdit_keyReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_lineWrapColumnOrWidth), meth_QTextEdit_lineWrapColumnOrWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_lineWrapColumnOrWidth)},
    {SIP_MLNAME_CAST(sipName_lineWrapMode), meth_QTextEdit_lineWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_lineWrapMode)},
    {SIP_MLNAME_CAST(sipName_loadResource), meth_QTextEdit_loadResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_loadResource)},
    {SIP_MLNAME_CAST(sipName_mergeCurrentCharFormat), meth_QTextEdit_mergeCurrentCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_mergeCurrentCharFormat)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QTextEdit_mouseDoubleClickEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QTextEdit_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QTextEdit_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QTextEdit_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), (PyCFunction)meth_QTextEdit_moveCursor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_moveCursor)},
    {SIP_MLNAME_CAST(sipName_overwriteMode), meth_QTextEdit_overwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_overwriteMode)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QTextEdit_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_paintEvent)},
    {SIP_MLNAME_CAST(sipName_paste), meth_QTextEdit_paste, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_paste)},
    {SIP_MLNAME_CAST(sipName_print_), meth_QTextEdit_print_, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_print_)},
    {SIP_MLNAME_CAST(sipName_redo), meth_QTextEdit_redo, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_redo)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QTextEdit_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QTextEdit_scrollContentsBy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_scrollToAnchor), meth_QTextEdit_scrollToAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_scrollToAnchor)},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QTextEdit_selectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_selectAll)},
    {SIP_MLNAME_CAST(sipName_setAcceptRichText), meth_QTextEdit_setAcceptRichText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setAcceptRichText)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QTextEdit_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setAutoFormatting), meth_QTextEdit_setAutoFormatting, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setAutoFormatting)},
    {SIP_MLNAME_CAST(sipName_setCurrentCharFormat), meth_QTextEdit_setCurrentCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setCurrentCharFormat)},
    {SIP_MLNAME_CAST(sipName_setCurrentFont), meth_QTextEdit_setCurrentFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setCurrentFont)},
    {SIP_MLNAME_CAST(sipName_setCursorWidth), meth_QTextEdit_setCursorWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setCursorWidth)},
    {SIP_MLNAME_CAST(sipName_setDocument), meth_QTextEdit_setDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setDocument)},
    {SIP_MLNAME_CAST(sipName_setDocumentTitle), meth_QTextEdit_setDocumentTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setDocumentTitle)},
    {SIP_MLNAME_CAST(sipName_setExtraSelections), meth_QTextEdit_setExtraSelections, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setExtraSelections)},
    {SIP_MLNAME_CAST(sipName_setFontFamily), meth_QTextEdit_setFontFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontFamily)},
    {SIP_MLNAME_CAST(sipName_setFontItalic), meth_QTextEdit_setFontItalic, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontItalic)},
    {SIP_MLNAME_CAST(sipName_setFontPointSize), meth_QTextEdit_setFontPointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontPointSize)},
    {SIP_MLNAME_CAST(sipName_setFontUnderline), meth_QTextEdit_setFontUnderline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontUnderline)},
    {SIP_MLNAME_CAST(sipName_setFontWeight), meth_QTextEdit_setFontWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontWeight)},
    {SIP_MLNAME_CAST(sipName_setHtml), meth_QTextEdit_setHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setHtml)},
    {SIP_MLNAME_CAST(sipName_setLineWrapColumnOrWidth), meth_QTextEdit_setLineWrapColumnOrWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setLineWrapColumnOrWidth)},
    {SIP_MLNAME_CAST(sipName_setLineWrapMode), meth_QTextEdit_setLineWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setLineWrapMode)},
    {SIP_MLNAME_CAST(sipName_setOverwriteMode), meth_QTextEdit_setOverwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setOverwriteMode)},
    {SIP_MLNAME_CAST(sipName_setPlainText), meth_QTextEdit_setPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setPlainText)},
    {SIP_MLNAME_CAST(sipName_setReadOnly), meth_QTextEdit_setReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setReadOnly)},
    {SIP_MLNAME_CAST(sipName_setTabChangesFocus), meth_QTextEdit_setTabChangesFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTabChangesFocus)},
    {SIP_MLNAME_CAST(sipName_setTabStopWidth), meth_QTextEdit_setTabStopWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTabStopWidth)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QTextEdit_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setText)},
    {SIP_MLNAME_CAST(sipName_setTextBackgroundColor), meth_QTextEdit_setTextBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTextBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setTextColor), meth_QTextEdit_setTextColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTextColor)},
    {SIP_MLNAME_CAST(sipName_setTextCursor), meth_QTextEdit_setTextCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTextCursor)},
    {SIP_MLNAME_CAST(sipName_setTextInteractionFlags), meth_QTextEdit_setTextInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTextInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_setUndoRedoEnabled), meth_QTextEdit_setUndoRedoEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setUndoRedoEnabled)},
    {SIP_MLNAME_CAST(sipName_setWordWrapMode), meth_QTextEdit_setWordWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setWordWrapMode)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QTextEdit_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_showEvent)},
    {SIP_MLNAME_CAST(sipName_tabChangesFocus), meth_QTextEdit_tabChangesFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_tabChangesFocus)},
    {SIP_MLNAME_CAST(sipName_tabStopWidth), meth_QTextEdit_tabStopWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_tabStopWidth)},
    {SIP_MLNAME_CAST(sipName_textBackgroundColor), meth_QTextEdit_textBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_textBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_textColor), meth_QTextEdit_textColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_textColor)},
    {SIP_MLNAME_CAST(sipName_textCursor), meth_QTextEdit_textCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_textCursor)},
    {SIP_MLNAME_CAST(sipName_textInteractionFlags), meth_QTextEdit_textInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_textInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QTextEdit_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_timerEvent)},
    {SIP_MLNAME_CAST(sipName_toHtml), meth_QTextEdit_toHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_toHtml)},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QTextEdit_toPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_toPlainText)},
    {SIP_MLNAME_CAST(sipName_undo), meth_QTextEdit_undo, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_undo)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QTextEdit_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_wordWrapMode), meth_QTextEdit_wordWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_wordWrapMode)},
    {SIP_MLNAME_CAST(sipName_zoomIn), (PyCFunction)meth_QTextEdit_zoomIn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_zoomIn)},
    {SIP_MLNAME_CAST(sipName_zoomOut), (PyCFunction)meth_QTextEdit_zoomOut, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_zoomOut)}
};

static sipEnumMemberDef enummembers_QTextEdit[] = {
    {sipName_AutoAll, static_cast<int>( ::QTextEdit::AutoAll), 669},
    {sipName_AutoBulletList, static_cast<int>( ::QTextEdit::AutoBulletList), 669},
    {sipName_AutoNone, static_cast<int>( ::QTextEdit::AutoNone), 669},
    {sipName_FixedColumnWidth, static_cast<int>( ::QTextEdit::FixedColumnWidth), 671},
    {sipName_FixedPixelWidth, static_cast<int>( ::QTextEdit::FixedPixelWidth), 671},
    {sipName_NoWrap, static_cast<int>( ::QTextEdit::NoWrap), 671},
    {sipName_WidgetWidth, static_cast<int>( ::QTextEdit::WidgetWidth), 671},
};

PyDoc_STRVAR(doc_QTextEdit, "\1QTextEdit(parent: QWidget = None)\n"
    "QTextEdit(str, parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QTextEdit[] = {
    {"cursorPositionChanged()", "\1cursorPositionChanged(self)", 0, 0},
    {"selectionChanged()", "\1selectionChanged(self)", 0, 0},
    {"copyAvailable(bool)", "\1copyAvailable(self, bool)", 0, 0},
    {"currentCharFormatChanged(QTextCharFormat)", "\1currentCharFormatChanged(self, QTextCharFormat)", 0, 0},
    {"redoAvailable(bool)", "\1redoAvailable(self, bool)", 0, 0},
    {"undoAvailable(bool)", "\1undoAvailable(self, bool)", 0, 0},
    {"textChanged()", "\1textChanged(self)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QTextEdit = {
    & ::QTextEdit::staticMetaObject,
    0,
    signals_QTextEdit
};


sipClassTypeDef sipTypeDef_QtGui_QTextEdit = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTextEdit,
        {0},
        &plugin_QTextEdit
    },
    {
        sipNameNr_QTextEdit,
        {0, 0, 1},
        108, methods_QTextEdit,
        7, enummembers_QTextEdit,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextEdit,
    -1,
    -1,
    supers_QTextEdit,
    0,
    init_type_QTextEdit,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextEdit,
    0,
    0,
    0,
    release_QTextEdit,
    cast_QTextEdit,
    0,
    0,
    0,
    0,
    0,
    0
};

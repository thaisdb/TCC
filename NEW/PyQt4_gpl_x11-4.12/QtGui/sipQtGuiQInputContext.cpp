/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 65 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 647 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 252 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQInputContext.cpp"


class sipQInputContext : public  ::QInputContext
{
public:
    sipQInputContext( ::QObject*);
    virtual ~sipQInputContext();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool filterEvent(const  ::QEvent*);
    QList< ::QAction*> actions();
    void widgetDestroyed( ::QWidget*);
    void setFocusWidget( ::QWidget*);
    bool isComposing() const;
     ::QFont font() const;
    void mouseHandler(int, ::QMouseEvent*);
    void update();
    void reset();
     ::QString language();
     ::QString identifierName();
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQInputContext(const sipQInputContext &);
    sipQInputContext &operator = (const sipQInputContext &);

    char sipPyMethods[18];
};

sipQInputContext::sipQInputContext( ::QObject*a0):  ::QInputContext(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQInputContext::~sipQInputContext()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQInputContext::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QInputContext);
}

int sipQInputContext::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QInputContext::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QInputContext,_c,_id,_a);

    return _id;
}

void *sipQInputContext::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QInputContext, _clname)) ? this :  ::QInputContext::qt_metacast(_clname);
}

bool sipQInputContext::filterEvent(const  ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_filterEvent);

    if (!sipMeth)
        return  ::QInputContext::filterEvent(a0);

    extern bool sipVH_QtGui_199(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QEvent*);

    return sipVH_QtGui_199(sipGILState, 0, sipPySelf, sipMeth, a0);
}

QList< ::QAction*> sipQInputContext::actions()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_actions);

    if (!sipMeth)
        return  ::QInputContext::actions();

    extern QList< ::QAction*> sipVH_QtGui_198(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_198(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQInputContext::widgetDestroyed( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_widgetDestroyed);

    if (!sipMeth)
    {
         ::QInputContext::widgetDestroyed(a0);
        return;
    }

    extern void sipVH_QtGui_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtGui_56(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputContext::setFocusWidget( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setFocusWidget);

    if (!sipMeth)
    {
         ::QInputContext::setFocusWidget(a0);
        return;
    }

    extern void sipVH_QtGui_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtGui_56(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQInputContext::isComposing() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_QInputContext,sipName_isComposing);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtGui_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_67(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QFont sipQInputContext::font() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_font);

    if (!sipMeth)
        return  ::QInputContext::font();

    extern  ::QFont sipVH_QtGui_197(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_197(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQInputContext::mouseHandler(int a0, ::QMouseEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_mouseHandler);

    if (!sipMeth)
    {
         ::QInputContext::mouseHandler(a0,a1);
        return;
    }

    extern void sipVH_QtGui_196(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, ::QMouseEvent*);

    sipVH_QtGui_196(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQInputContext::update()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_update);

    if (!sipMeth)
    {
         ::QInputContext::update();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQInputContext::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QInputContext,sipName_reset);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QString sipQInputContext::language()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_QInputContext,sipName_language);

    if (!sipMeth)
        return  ::QString();

    extern  ::QString sipVH_QtGui_186(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_186(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QString sipQInputContext::identifierName()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_QInputContext,sipName_identifierName);

    if (!sipMeth)
        return  ::QString();

    extern  ::QString sipVH_QtGui_186(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_186(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQInputContext::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QInputContext::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQInputContext::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QInputContext::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQInputContext::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QInputContext::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputContext::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QInputContext::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputContext::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QInputContext::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputContext::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QInputContext::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQInputContext::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QInputContext::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QInputContext_identifierName, "identifierName(self) -> str");

extern "C" {static PyObject *meth_QInputContext_identifierName(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_identifierName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
             ::QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QInputContext, sipName_identifierName);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->identifierName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_identifierName, doc_QInputContext_identifierName);

    return NULL;
}


PyDoc_STRVAR(doc_QInputContext_language, "language(self) -> str");

extern "C" {static PyObject *meth_QInputContext_language(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_language(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
             ::QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QInputContext, sipName_language);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->language());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_language, doc_QInputContext_language);

    return NULL;
}


PyDoc_STRVAR(doc_QInputContext_reset, "reset(self)");

extern "C" {static PyObject *meth_QInputContext_reset(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QInputContext, sipName_reset);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->reset();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_reset, doc_QInputContext_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QInputContext_update, "update(self)");

extern "C" {static PyObject *meth_QInputContext_update(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QInputContext::update() : sipCpp->update());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_update, doc_QInputContext_update);

    return NULL;
}


PyDoc_STRVAR(doc_QInputContext_mouseHandler, "mouseHandler(self, int, QMouseEvent)");

extern "C" {static PyObject *meth_QInputContext_mouseHandler(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_mouseHandler(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QMouseEvent* a1;
         ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ8", &sipSelf, sipType_QInputContext, &sipCpp, &a0, sipType_QMouseEvent, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QInputContext::mouseHandler(a0,a1) : sipCpp->mouseHandler(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_mouseHandler, doc_QInputContext_mouseHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QInputContext_font, "font(self) -> QFont");

extern "C" {static PyObject *meth_QInputContext_font(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
             ::QFont*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QFont((sipSelfWasArg ? sipCpp-> ::QInputContext::font() : sipCpp->font()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_font, doc_QInputContext_font);

    return NULL;
}


PyDoc_STRVAR(doc_QInputContext_isComposing, "isComposing(self) -> bool");

extern "C" {static PyObject *meth_QInputContext_isComposing(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_isComposing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QInputContext, sipName_isComposing);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isComposing();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_isComposing, doc_QInputContext_isComposing);

    return NULL;
}


PyDoc_STRVAR(doc_QInputContext_focusWidget, "focusWidget(self) -> QWidget");

extern "C" {static PyObject *meth_QInputContext_focusWidget(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_focusWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
             ::QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->focusWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_focusWidget, doc_QInputContext_focusWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QInputContext_setFocusWidget, "setFocusWidget(self, QWidget)");

extern "C" {static PyObject *meth_QInputContext_setFocusWidget(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_setFocusWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWidget* a0;
         ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QInputContext, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QInputContext::setFocusWidget(a0) : sipCpp->setFocusWidget(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_setFocusWidget, doc_QInputContext_setFocusWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QInputContext_widgetDestroyed, "widgetDestroyed(self, QWidget)");

extern "C" {static PyObject *meth_QInputContext_widgetDestroyed(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_widgetDestroyed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWidget* a0;
         ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QInputContext, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QInputContext::widgetDestroyed(a0) : sipCpp->widgetDestroyed(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_widgetDestroyed, doc_QInputContext_widgetDestroyed);

    return NULL;
}


PyDoc_STRVAR(doc_QInputContext_actions, "actions(self) -> List[QAction]");

extern "C" {static PyObject *meth_QInputContext_actions(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_actions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QInputContext, &sipCpp))
        {
            QList< ::QAction*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QAction*>((sipSelfWasArg ? sipCpp-> ::QInputContext::actions() : sipCpp->actions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_actions, doc_QInputContext_actions);

    return NULL;
}


PyDoc_STRVAR(doc_QInputContext_filterEvent, "filterEvent(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QInputContext_filterEvent(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_filterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QEvent* a0;
         ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QInputContext, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QInputContext::filterEvent(a0) : sipCpp->filterEvent(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_filterEvent, doc_QInputContext_filterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QInputContext_sendEvent, "sendEvent(self, QInputMethodEvent)");

extern "C" {static PyObject *meth_QInputContext_sendEvent(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_sendEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QInputMethodEvent* a0;
         ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QInputContext, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sendEvent(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_sendEvent, doc_QInputContext_sendEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QInputContext_standardFormat, "standardFormat(self, QInputContext.StandardFormat) -> QTextFormat");

extern "C" {static PyObject *meth_QInputContext_standardFormat(PyObject *, PyObject *);}
static PyObject *meth_QInputContext_standardFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QInputContext::StandardFormat a0;
        const  ::QInputContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QInputContext, &sipCpp, sipType_QInputContext_StandardFormat, &a0))
        {
             ::QTextFormat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTextFormat(sipCpp->standardFormat(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QInputContext, sipName_standardFormat, doc_QInputContext_standardFormat);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QInputContext(void *, const sipTypeDef *);}
static void *cast_QInputContext(void *sipCppV, const sipTypeDef *targetType)
{
     ::QInputContext *sipCpp = reinterpret_cast< ::QInputContext *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QInputContext(void *, int);}
static void release_QInputContext(void *sipCppV, int)
{
     ::QInputContext *sipCpp = reinterpret_cast< ::QInputContext *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QInputContext(sipSimpleWrapper *);}
static void dealloc_QInputContext(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQInputContext *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QInputContext(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QInputContext(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QInputContext(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQInputContext *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQInputContext(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QInputContext[] = {{34, 0, 1}};


static PyMethodDef methods_QInputContext[] = {
    {SIP_MLNAME_CAST(sipName_actions), meth_QInputContext_actions, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_actions)},
    {SIP_MLNAME_CAST(sipName_filterEvent), meth_QInputContext_filterEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_filterEvent)},
    {SIP_MLNAME_CAST(sipName_focusWidget), meth_QInputContext_focusWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_focusWidget)},
    {SIP_MLNAME_CAST(sipName_font), meth_QInputContext_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_font)},
    {SIP_MLNAME_CAST(sipName_identifierName), meth_QInputContext_identifierName, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_identifierName)},
    {SIP_MLNAME_CAST(sipName_isComposing), meth_QInputContext_isComposing, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_isComposing)},
    {SIP_MLNAME_CAST(sipName_language), meth_QInputContext_language, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_language)},
    {SIP_MLNAME_CAST(sipName_mouseHandler), meth_QInputContext_mouseHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_mouseHandler)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QInputContext_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_reset)},
    {SIP_MLNAME_CAST(sipName_sendEvent), meth_QInputContext_sendEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_sendEvent)},
    {SIP_MLNAME_CAST(sipName_setFocusWidget), meth_QInputContext_setFocusWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_setFocusWidget)},
    {SIP_MLNAME_CAST(sipName_standardFormat), meth_QInputContext_standardFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_standardFormat)},
    {SIP_MLNAME_CAST(sipName_update), meth_QInputContext_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_update)},
    {SIP_MLNAME_CAST(sipName_widgetDestroyed), meth_QInputContext_widgetDestroyed, METH_VARARGS, SIP_MLDOC_CAST(doc_QInputContext_widgetDestroyed)}
};

static sipEnumMemberDef enummembers_QInputContext[] = {
    {sipName_PreeditFormat, static_cast<int>( ::QInputContext::PreeditFormat), 246},
    {sipName_SelectionFormat, static_cast<int>( ::QInputContext::SelectionFormat), 246},
};

PyDoc_STRVAR(doc_QInputContext, "\1QInputContext(parent: QObject = None)");


static pyqt4ClassPluginDef plugin_QInputContext = {
    & ::QInputContext::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QInputContext = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QInputContext,
        {0},
        &plugin_QInputContext
    },
    {
        sipNameNr_QInputContext,
        {0, 0, 1},
        14, methods_QInputContext,
        2, enummembers_QInputContext,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QInputContext,
    -1,
    -1,
    supers_QInputContext,
    0,
    init_type_QInputContext,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QInputContext,
    0,
    0,
    0,
    release_QInputContext,
    cast_QInputContext,
    0,
    0,
    0,
    0,
    0,
    0
};

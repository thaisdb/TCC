/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwizard.sip"
#include <qwizard.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 623 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 524 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 561 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstractbutton.sip"
#include <qabstractbutton.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 282 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwizard.sip"
#include <qwizard.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwizard.sip"
#include <qwizard.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 201 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwizard.sip"
#include <qwizard.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 618 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 596 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 574 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 474 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 28 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 114 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 117 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 120 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 123 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 126 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 129 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 132 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 135 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 138 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 141 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 647 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 607 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 739 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 792 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 765 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 781 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 854 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 403 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 548 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 505 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 347 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 252 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 180 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 52 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 183 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 186 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 189 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 192 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 195 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 198 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 201 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 204 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 207 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 210 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 213 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 216 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 219 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 222 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 225 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 228 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 231 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 234 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 237 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"


class sipQWizard : public  ::QWizard
{
public:
    sipQWizard( ::QWidget*, ::Qt::WindowFlags);
    virtual ~sipQWizard();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void cleanupPage(int);
    void initializePage(int);
    int nextId() const;
    bool validateCurrentPage();
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const  ::QFont&);
    void paletteChange(const  ::QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    void inputMethodEvent( ::QInputMethodEvent*);
    void changeEvent( ::QEvent*);
    void hideEvent( ::QHideEvent*);
    void showEvent( ::QShowEvent*);
    void dropEvent( ::QDropEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void actionEvent( ::QActionEvent*);
    void tabletEvent( ::QTabletEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void closeEvent( ::QCloseEvent*);
    void resizeEvent( ::QResizeEvent*);
    void moveEvent( ::QMoveEvent*);
    void paintEvent( ::QPaintEvent*);
    void leaveEvent( ::QEvent*);
    void enterEvent( ::QEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void focusInEvent( ::QFocusEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void wheelEvent( ::QWheelEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mousePressEvent( ::QMouseEvent*);
    int heightForWidth(int) const;
     ::QSize minimumSizeHint() const;
     ::QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
     ::QPaintEngine* paintEngine() const;
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);
    void done(int);
    void accept();
    void reject();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWizard(const sipQWizard &);
    sipQWizard &operator = (const sipQWizard &);

    char sipPyMethods[54];
};

sipQWizard::sipQWizard( ::QWidget*a0, ::Qt::WindowFlags a1):  ::QWizard(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWizard::~sipQWizard()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWizard::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QWizard);
}

int sipQWizard::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QWizard::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QWizard,_c,_id,_a);

    return _id;
}

void *sipQWizard::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QWizard, _clname)) ? this :  ::QWizard::qt_metacast(_clname);
}

void sipQWizard::cleanupPage(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_cleanupPage);

    if (!sipMeth)
    {
         ::QWizard::cleanupPage(a0);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtGui_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::initializePage(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_initializePage);

    if (!sipMeth)
    {
         ::QWizard::initializePage(a0);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtGui_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQWizard::nextId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_nextId);

    if (!sipMeth)
        return  ::QWizard::nextId();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQWizard::validateCurrentPage()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_validateCurrentPage);

    if (!sipMeth)
        return  ::QWizard::validateCurrentPage();

    extern bool sipVH_QtGui_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_67(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQWizard::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
         ::QWizard::languageChange();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQWizard::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
         ::QWizard::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::fontChange(const  ::QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
         ::QWizard::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QFont&);

    sipVH_QtGui_33(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::paletteChange(const  ::QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
         ::QWizard::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPalette&);

    sipVH_QtGui_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
         ::QWizard::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWizard::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QWizard::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_31(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQWizard::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QWizard::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtGui_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtGui_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QWizard::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtGui_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QWizard::changeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QWizard::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QWizard::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QWizard::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QWizard::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QWizard::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QWizard::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QWizard::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QWizard::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QWizard::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QWizard::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QWizard::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QWizard::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QWizard::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QWizard::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QWizard::enterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QWizard::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QWizard::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QWizard::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QWizard::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QWizard::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QWizard::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QWizard::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QWizard::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QWizard::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQWizard::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QWizard::heightForWidth(a0);

    extern int sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSize sipQWizard::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QWizard::minimumSizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQWizard::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QWizard::sizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQWizard::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QWizard::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQWizard::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QWizard::devType();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQWizard::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QWizard::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQWizard::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QWizard::metric(a0);

    extern int sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWizard::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QWizard::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQWizard::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QWizard::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQWizard::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QWizard::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QWizard::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QWizard::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QWizard::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QWizard::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::done(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_done);

    if (!sipMeth)
    {
         ::QWizard::done(a0);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtGui_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQWizard::accept()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_accept);

    if (!sipMeth)
    {
         ::QWizard::accept();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQWizard::reject()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_reject);

    if (!sipMeth)
    {
         ::QWizard::reject();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QWizard_addPage, "addPage(self, QWizardPage) -> int");

extern "C" {static PyObject *meth_QWizard_addPage(PyObject *, PyObject *);}
static PyObject *meth_QWizard_addPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizardPage* a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QWizard, &sipCpp, sipType_QWizardPage, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addPage(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_addPage, doc_QWizard_addPage);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setPage, "setPage(self, int, QWizardPage)");

extern "C" {static PyObject *meth_QWizard_setPage(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QWizardPage* a1;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QWizard, &sipCpp, &a0, sipType_QWizardPage, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPage(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setPage, doc_QWizard_setPage);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_page, "page(self, int) -> QWizardPage");

extern "C" {static PyObject *meth_QWizard_page(PyObject *, PyObject *);}
static PyObject *meth_QWizard_page(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWizard, &sipCpp, &a0))
        {
             ::QWizardPage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->page(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWizardPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_page, doc_QWizard_page);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_hasVisitedPage, "hasVisitedPage(self, int) -> bool");

extern "C" {static PyObject *meth_QWizard_hasVisitedPage(PyObject *, PyObject *);}
static PyObject *meth_QWizard_hasVisitedPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWizard, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasVisitedPage(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_hasVisitedPage, doc_QWizard_hasVisitedPage);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_visitedPages, "visitedPages(self) -> List[int]");

extern "C" {static PyObject *meth_QWizard_visitedPages(PyObject *, PyObject *);}
static PyObject *meth_QWizard_visitedPages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
             ::QList<int>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QList<int>(sipCpp->visitedPages());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_visitedPages, doc_QWizard_visitedPages);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setStartId, "setStartId(self, int)");

extern "C" {static PyObject *meth_QWizard_setStartId(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setStartId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWizard, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStartId(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setStartId, doc_QWizard_setStartId);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_startId, "startId(self) -> int");

extern "C" {static PyObject *meth_QWizard_startId(PyObject *, PyObject *);}
static PyObject *meth_QWizard_startId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->startId();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_startId, doc_QWizard_startId);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_currentPage, "currentPage(self) -> QWizardPage");

extern "C" {static PyObject *meth_QWizard_currentPage(PyObject *, PyObject *);}
static PyObject *meth_QWizard_currentPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
             ::QWizardPage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentPage();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWizardPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_currentPage, doc_QWizard_currentPage);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_currentId, "currentId(self) -> int");

extern "C" {static PyObject *meth_QWizard_currentId(PyObject *, PyObject *);}
static PyObject *meth_QWizard_currentId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentId();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_currentId, doc_QWizard_currentId);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_validateCurrentPage, "validateCurrentPage(self) -> bool");

extern "C" {static PyObject *meth_QWizard_validateCurrentPage(PyObject *, PyObject *);}
static PyObject *meth_QWizard_validateCurrentPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWizard::validateCurrentPage() : sipCpp->validateCurrentPage());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_validateCurrentPage, doc_QWizard_validateCurrentPage);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_nextId, "nextId(self) -> int");

extern "C" {static PyObject *meth_QWizard_nextId(PyObject *, PyObject *);}
static PyObject *meth_QWizard_nextId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWizard::nextId() : sipCpp->nextId());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_nextId, doc_QWizard_nextId);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setField, "setField(self, str, Any)");

extern "C" {static PyObject *meth_QWizard_setField(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setField(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QVariant* a1;
        int a1State = 0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QWizard, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setField(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setField, doc_QWizard_setField);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_field, "field(self, str) -> Any");

extern "C" {static PyObject *meth_QWizard_field(PyObject *, PyObject *);}
static PyObject *meth_QWizard_field(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWizard, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QVariant*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVariant(sipCpp->field(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_field, doc_QWizard_field);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setWizardStyle, "setWizardStyle(self, QWizard.WizardStyle)");

extern "C" {static PyObject *meth_QWizard_setWizardStyle(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setWizardStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizard::WizardStyle a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWizard, &sipCpp, sipType_QWizard_WizardStyle, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWizardStyle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setWizardStyle, doc_QWizard_setWizardStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_wizardStyle, "wizardStyle(self) -> QWizard.WizardStyle");

extern "C" {static PyObject *meth_QWizard_wizardStyle(PyObject *, PyObject *);}
static PyObject *meth_QWizard_wizardStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
             ::QWizard::WizardStyle sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wizardStyle();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QWizard_WizardStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_wizardStyle, doc_QWizard_wizardStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setOption, "setOption(self, QWizard.WizardOption, on: bool = True)");

extern "C" {static PyObject *meth_QWizard_setOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWizard_setOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizard::WizardOption a0;
        bool a1 = 1;
         ::QWizard *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QWizard, &sipCpp, sipType_QWizard_WizardOption, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOption(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setOption, doc_QWizard_setOption);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_testOption, "testOption(self, QWizard.WizardOption) -> bool");

extern "C" {static PyObject *meth_QWizard_testOption(PyObject *, PyObject *);}
static PyObject *meth_QWizard_testOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizard::WizardOption a0;
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWizard, &sipCpp, sipType_QWizard_WizardOption, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->testOption(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_testOption, doc_QWizard_testOption);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setOptions, "setOptions(self, QWizard.WizardOptions)");

extern "C" {static PyObject *meth_QWizard_setOptions(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizard::WizardOptions* a0;
        int a0State = 0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWizard, &sipCpp, sipType_QWizard_WizardOptions, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOptions(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QWizard_WizardOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setOptions, doc_QWizard_setOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_options, "options(self) -> QWizard.WizardOptions");

extern "C" {static PyObject *meth_QWizard_options(PyObject *, PyObject *);}
static PyObject *meth_QWizard_options(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
             ::QWizard::WizardOptions*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QWizard::WizardOptions(sipCpp->options());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWizard_WizardOptions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_options, doc_QWizard_options);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setButtonText, "setButtonText(self, QWizard.WizardButton, str)");

extern "C" {static PyObject *meth_QWizard_setButtonText(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setButtonText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizard::WizardButton a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QWizard, &sipCpp, sipType_QWizard_WizardButton, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setButtonText(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setButtonText, doc_QWizard_setButtonText);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_buttonText, "buttonText(self, QWizard.WizardButton) -> str");

extern "C" {static PyObject *meth_QWizard_buttonText(PyObject *, PyObject *);}
static PyObject *meth_QWizard_buttonText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizard::WizardButton a0;
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWizard, &sipCpp, sipType_QWizard_WizardButton, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->buttonText(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_buttonText, doc_QWizard_buttonText);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setButtonLayout, "setButtonLayout(self, List[QWizard.WizardButton])");

extern "C" {static PyObject *meth_QWizard_setButtonLayout(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setButtonLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QList< ::QWizard::WizardButton>* a0;
        int a0State = 0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWizard, &sipCpp, sipType_QList_0100QWizard_WizardButton,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setButtonLayout(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QList< ::QWizard::WizardButton> *>(a0),sipType_QList_0100QWizard_WizardButton,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setButtonLayout, doc_QWizard_setButtonLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setButton, "setButton(self, QWizard.WizardButton, QAbstractButton)");

extern "C" {static PyObject *meth_QWizard_setButton(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizard::WizardButton a0;
         ::QAbstractButton* a1;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ:", &sipSelf, sipType_QWizard, &sipCpp, sipType_QWizard_WizardButton, &a0, sipType_QAbstractButton, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setButton(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setButton, doc_QWizard_setButton);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_button, "button(self, QWizard.WizardButton) -> QAbstractButton");

extern "C" {static PyObject *meth_QWizard_button(PyObject *, PyObject *);}
static PyObject *meth_QWizard_button(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizard::WizardButton a0;
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWizard, &sipCpp, sipType_QWizard_WizardButton, &a0))
        {
             ::QAbstractButton*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->button(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractButton,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_button, doc_QWizard_button);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setTitleFormat, "setTitleFormat(self, Qt.TextFormat)");

extern "C" {static PyObject *meth_QWizard_setTitleFormat(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setTitleFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::TextFormat a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWizard, &sipCpp, sipType_Qt_TextFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTitleFormat(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setTitleFormat, doc_QWizard_setTitleFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_titleFormat, "titleFormat(self) -> Qt.TextFormat");

extern "C" {static PyObject *meth_QWizard_titleFormat(PyObject *, PyObject *);}
static PyObject *meth_QWizard_titleFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
             ::Qt::TextFormat sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->titleFormat();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_TextFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_titleFormat, doc_QWizard_titleFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setSubTitleFormat, "setSubTitleFormat(self, Qt.TextFormat)");

extern "C" {static PyObject *meth_QWizard_setSubTitleFormat(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setSubTitleFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::TextFormat a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWizard, &sipCpp, sipType_Qt_TextFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSubTitleFormat(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setSubTitleFormat, doc_QWizard_setSubTitleFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_subTitleFormat, "subTitleFormat(self) -> Qt.TextFormat");

extern "C" {static PyObject *meth_QWizard_subTitleFormat(PyObject *, PyObject *);}
static PyObject *meth_QWizard_subTitleFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
             ::Qt::TextFormat sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->subTitleFormat();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_TextFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_subTitleFormat, doc_QWizard_subTitleFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setPixmap, "setPixmap(self, QWizard.WizardPixmap, QPixmap)");

extern "C" {static PyObject *meth_QWizard_setPixmap(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizard::WizardPixmap a0;
        const  ::QPixmap* a1;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_QWizard, &sipCpp, sipType_QWizard_WizardPixmap, &a0, sipType_QPixmap, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPixmap(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setPixmap, doc_QWizard_setPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_pixmap, "pixmap(self, QWizard.WizardPixmap) -> QPixmap");

extern "C" {static PyObject *meth_QWizard_pixmap(PyObject *, PyObject *);}
static PyObject *meth_QWizard_pixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizard::WizardPixmap a0;
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWizard, &sipCpp, sipType_QWizard_WizardPixmap, &a0))
        {
             ::QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPixmap(sipCpp->pixmap(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_pixmap, doc_QWizard_pixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setDefaultProperty, "setDefaultProperty(self, str, str, QT_SIGNAL)");

extern "C" {static PyObject *meth_QWizard_setDefaultProperty(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setDefaultProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        const char* a1;
        PyObject * a2;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BssP0", &sipSelf, sipType_QWizard, &sipCpp, &a0, &a1, &a2))
        {
            sipErrorState sipError = sipErrorNone;

#line 117 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwizard.sip"
        typedef const char *(*pyqt4_get_signal_t)(PyObject *);
        
        static pyqt4_get_signal_t pyqt4_get_signal = 0;
        
        if (!pyqt4_get_signal)
        {
            pyqt4_get_signal = (pyqt4_get_signal_t)sipImportSymbol("pyqt4_get_signal");
            Q_ASSERT(pyqt4_get_signal);
        }
        
        const char *sig = pyqt4_get_signal(a2);
            
        // Finish converting the arguments.
        if (sig)
        {
            sipCpp->setDefaultProperty(a0, a1, sig);
        }
        else
        {
            sipError = sipBadCallableArg(2, a2);
        }
#line 2260 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQWizard.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setDefaultProperty, doc_QWizard_setDefaultProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QWizard_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWizard, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWizard::setVisible(a0) : sipCpp->setVisible(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setVisible, doc_QWizard_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QWizard_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QWizard_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QWizard::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_sizeHint, doc_QWizard_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_back, "back(self)");

extern "C" {static PyObject *meth_QWizard_back(PyObject *, PyObject *);}
static PyObject *meth_QWizard_back(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->back();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_back, doc_QWizard_back);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_next, "next(self)");

extern "C" {static PyObject *meth_QWizard_next(PyObject *, PyObject *);}
static PyObject *meth_QWizard_next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->next();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_next, doc_QWizard_next);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_restart, "restart(self)");

extern "C" {static PyObject *meth_QWizard_restart(PyObject *, PyObject *);}
static PyObject *meth_QWizard_restart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->restart();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_restart, doc_QWizard_restart);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QWizard_event(PyObject *, PyObject *);}
static PyObject *meth_QWizard_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWizard, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QWizard::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_event, doc_QWizard_event);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QWizard_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QWizard_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWizard, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWizard::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_resizeEvent, doc_QWizard_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QWizard_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QWizard_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QWizard, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWizard::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_paintEvent, doc_QWizard_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_done, "done(self, int)");

extern "C" {static PyObject *meth_QWizard_done(PyObject *, PyObject *);}
static PyObject *meth_QWizard_done(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QWizard, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWizard::done(a0) : sipCpp->done(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_done, doc_QWizard_done);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_initializePage, "initializePage(self, int)");

extern "C" {static PyObject *meth_QWizard_initializePage(PyObject *, PyObject *);}
static PyObject *meth_QWizard_initializePage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QWizard, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWizard::initializePage(a0) : sipCpp->initializePage(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_initializePage, doc_QWizard_initializePage);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_cleanupPage, "cleanupPage(self, int)");

extern "C" {static PyObject *meth_QWizard_cleanupPage(PyObject *, PyObject *);}
static PyObject *meth_QWizard_cleanupPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QWizard, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QWizard::cleanupPage(a0) : sipCpp->cleanupPage(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_cleanupPage, doc_QWizard_cleanupPage);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_removePage, "removePage(self, int)");

extern "C" {static PyObject *meth_QWizard_removePage(PyObject *, PyObject *);}
static PyObject *meth_QWizard_removePage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWizard, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removePage(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_removePage, doc_QWizard_removePage);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_pageIds, "pageIds(self) -> List[int]");

extern "C" {static PyObject *meth_QWizard_pageIds(PyObject *, PyObject *);}
static PyObject *meth_QWizard_pageIds(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
             ::QList<int>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QList<int>(sipCpp->pageIds());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_pageIds, doc_QWizard_pageIds);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_setSideWidget, "setSideWidget(self, QWidget)");

extern "C" {static PyObject *meth_QWizard_setSideWidget(PyObject *, PyObject *);}
static PyObject *meth_QWizard_setSideWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
         ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QWizard, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSideWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_setSideWidget, doc_QWizard_setSideWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QWizard_sideWidget, "sideWidget(self) -> QWidget");

extern "C" {static PyObject *meth_QWizard_sideWidget(PyObject *, PyObject *);}
static PyObject *meth_QWizard_sideWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QWizard *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWizard, &sipCpp))
        {
             ::QWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sideWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWizard, sipName_sideWidget, doc_QWizard_sideWidget);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QWizard(void *, const sipTypeDef *);}
static void *cast_QWizard(void *sipCppV, const sipTypeDef *targetType)
{
     ::QWizard *sipCpp = reinterpret_cast< ::QWizard *>(sipCppV);

    if (targetType == sipType_QDialog)
        return static_cast< ::QDialog *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWizard(void *, int);}
static void release_QWizard(void *sipCppV, int)
{
     ::QWizard *sipCpp = reinterpret_cast< ::QWizard *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QWizard(sipSimpleWrapper *);}
static void dealloc_QWizard(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQWizard *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QWizard(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QWizard(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWizard(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWizard *sipCpp = 0;

    {
         ::QWidget* a0 = 0;
         ::Qt::WindowFlags a1def = 0;
         ::Qt::WindowFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQWizard(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWizard[] = {{84, 255, 1}};


static PyMethodDef methods_QWizard[] = {
    {SIP_MLNAME_CAST(sipName_addPage), meth_QWizard_addPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_addPage)},
    {SIP_MLNAME_CAST(sipName_back), meth_QWizard_back, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_back)},
    {SIP_MLNAME_CAST(sipName_button), meth_QWizard_button, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_button)},
    {SIP_MLNAME_CAST(sipName_buttonText), meth_QWizard_buttonText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_buttonText)},
    {SIP_MLNAME_CAST(sipName_cleanupPage), meth_QWizard_cleanupPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_cleanupPage)},
    {SIP_MLNAME_CAST(sipName_currentId), meth_QWizard_currentId, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_currentId)},
    {SIP_MLNAME_CAST(sipName_currentPage), meth_QWizard_currentPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_currentPage)},
    {SIP_MLNAME_CAST(sipName_done), meth_QWizard_done, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_done)},
    {SIP_MLNAME_CAST(sipName_event), meth_QWizard_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_event)},
    {SIP_MLNAME_CAST(sipName_field), meth_QWizard_field, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_field)},
    {SIP_MLNAME_CAST(sipName_hasVisitedPage), meth_QWizard_hasVisitedPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_hasVisitedPage)},
    {SIP_MLNAME_CAST(sipName_initializePage), meth_QWizard_initializePage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_initializePage)},
    {SIP_MLNAME_CAST(sipName_next), meth_QWizard_next, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_next)},
    {SIP_MLNAME_CAST(sipName_nextId), meth_QWizard_nextId, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_nextId)},
    {SIP_MLNAME_CAST(sipName_options), meth_QWizard_options, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_options)},
    {SIP_MLNAME_CAST(sipName_page), meth_QWizard_page, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_page)},
    {SIP_MLNAME_CAST(sipName_pageIds), meth_QWizard_pageIds, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_pageIds)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QWizard_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_paintEvent)},
    {SIP_MLNAME_CAST(sipName_pixmap), meth_QWizard_pixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_pixmap)},
    {SIP_MLNAME_CAST(sipName_removePage), meth_QWizard_removePage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_removePage)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QWizard_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_restart), meth_QWizard_restart, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_restart)},
    {SIP_MLNAME_CAST(sipName_setButton), meth_QWizard_setButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setButton)},
    {SIP_MLNAME_CAST(sipName_setButtonLayout), meth_QWizard_setButtonLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setButtonLayout)},
    {SIP_MLNAME_CAST(sipName_setButtonText), meth_QWizard_setButtonText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setButtonText)},
    {SIP_MLNAME_CAST(sipName_setDefaultProperty), meth_QWizard_setDefaultProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setDefaultProperty)},
    {SIP_MLNAME_CAST(sipName_setField), meth_QWizard_setField, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setField)},
    {SIP_MLNAME_CAST(sipName_setOption), (PyCFunction)meth_QWizard_setOption, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWizard_setOption)},
    {SIP_MLNAME_CAST(sipName_setOptions), meth_QWizard_setOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setOptions)},
    {SIP_MLNAME_CAST(sipName_setPage), meth_QWizard_setPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setPage)},
    {SIP_MLNAME_CAST(sipName_setPixmap), meth_QWizard_setPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setPixmap)},
    {SIP_MLNAME_CAST(sipName_setSideWidget), meth_QWizard_setSideWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setSideWidget)},
    {SIP_MLNAME_CAST(sipName_setStartId), meth_QWizard_setStartId, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setStartId)},
    {SIP_MLNAME_CAST(sipName_setSubTitleFormat), meth_QWizard_setSubTitleFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setSubTitleFormat)},
    {SIP_MLNAME_CAST(sipName_setTitleFormat), meth_QWizard_setTitleFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setTitleFormat)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QWizard_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setVisible)},
    {SIP_MLNAME_CAST(sipName_setWizardStyle), meth_QWizard_setWizardStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_setWizardStyle)},
    {SIP_MLNAME_CAST(sipName_sideWidget), meth_QWizard_sideWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_sideWidget)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QWizard_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_sizeHint)},
    {SIP_MLNAME_CAST(sipName_startId), meth_QWizard_startId, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_startId)},
    {SIP_MLNAME_CAST(sipName_subTitleFormat), meth_QWizard_subTitleFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_subTitleFormat)},
    {SIP_MLNAME_CAST(sipName_testOption), meth_QWizard_testOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_testOption)},
    {SIP_MLNAME_CAST(sipName_titleFormat), meth_QWizard_titleFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_titleFormat)},
    {SIP_MLNAME_CAST(sipName_validateCurrentPage), meth_QWizard_validateCurrentPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_validateCurrentPage)},
    {SIP_MLNAME_CAST(sipName_visitedPages), meth_QWizard_visitedPages, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_visitedPages)},
    {SIP_MLNAME_CAST(sipName_wizardStyle), meth_QWizard_wizardStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QWizard_wizardStyle)}
};

static sipEnumMemberDef enummembers_QWizard[] = {
    {sipName_AeroStyle, static_cast<int>( ::QWizard::AeroStyle), 766},
    {sipName_BackButton, static_cast<int>( ::QWizard::BackButton), 762},
    {sipName_BackgroundPixmap, static_cast<int>( ::QWizard::BackgroundPixmap), 765},
    {sipName_BannerPixmap, static_cast<int>( ::QWizard::BannerPixmap), 765},
    {sipName_CancelButton, static_cast<int>( ::QWizard::CancelButton), 762},
    {sipName_CancelButtonOnLeft, static_cast<int>( ::QWizard::CancelButtonOnLeft), 763},
    {sipName_ClassicStyle, static_cast<int>( ::QWizard::ClassicStyle), 766},
    {sipName_CommitButton, static_cast<int>( ::QWizard::CommitButton), 762},
    {sipName_CustomButton1, static_cast<int>( ::QWizard::CustomButton1), 762},
    {sipName_CustomButton2, static_cast<int>( ::QWizard::CustomButton2), 762},
    {sipName_CustomButton3, static_cast<int>( ::QWizard::CustomButton3), 762},
    {sipName_DisabledBackButtonOnLastPage, static_cast<int>( ::QWizard::DisabledBackButtonOnLastPage), 763},
    {sipName_ExtendedWatermarkPixmap, static_cast<int>( ::QWizard::ExtendedWatermarkPixmap), 763},
    {sipName_FinishButton, static_cast<int>( ::QWizard::FinishButton), 762},
    {sipName_HaveCustomButton1, static_cast<int>( ::QWizard::HaveCustomButton1), 763},
    {sipName_HaveCustomButton2, static_cast<int>( ::QWizard::HaveCustomButton2), 763},
    {sipName_HaveCustomButton3, static_cast<int>( ::QWizard::HaveCustomButton3), 763},
    {sipName_HaveFinishButtonOnEarlyPages, static_cast<int>( ::QWizard::HaveFinishButtonOnEarlyPages), 763},
    {sipName_HaveHelpButton, static_cast<int>( ::QWizard::HaveHelpButton), 763},
    {sipName_HaveNextButtonOnLastPage, static_cast<int>( ::QWizard::HaveNextButtonOnLastPage), 763},
    {sipName_HelpButton, static_cast<int>( ::QWizard::HelpButton), 762},
    {sipName_HelpButtonOnRight, static_cast<int>( ::QWizard::HelpButtonOnRight), 763},
    {sipName_IgnoreSubTitles, static_cast<int>( ::QWizard::IgnoreSubTitles), 763},
    {sipName_IndependentPages, static_cast<int>( ::QWizard::IndependentPages), 763},
    {sipName_LogoPixmap, static_cast<int>( ::QWizard::LogoPixmap), 765},
    {sipName_MacStyle, static_cast<int>( ::QWizard::MacStyle), 766},
    {sipName_ModernStyle, static_cast<int>( ::QWizard::ModernStyle), 766},
    {sipName_NextButton, static_cast<int>( ::QWizard::NextButton), 762},
    {sipName_NoBackButtonOnLastPage, static_cast<int>( ::QWizard::NoBackButtonOnLastPage), 763},
    {sipName_NoBackButtonOnStartPage, static_cast<int>( ::QWizard::NoBackButtonOnStartPage), 763},
    {sipName_NoCancelButton, static_cast<int>( ::QWizard::NoCancelButton), 763},
    {sipName_NoDefaultButton, static_cast<int>( ::QWizard::NoDefaultButton), 763},
    {sipName_Stretch, static_cast<int>( ::QWizard::Stretch), 762},
    {sipName_WatermarkPixmap, static_cast<int>( ::QWizard::WatermarkPixmap), 765},
};

PyDoc_STRVAR(doc_QWizard, "\1QWizard(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QWizard[] = {
    {"pageRemoved(int)", "\1pageRemoved(self, int)", 0, 0},
    {"pageAdded(int)", "\1pageAdded(self, int)", 0, 0},
    {"customButtonClicked(int)", "\1customButtonClicked(self, int)", 0, 0},
    {"helpRequested()", "\1helpRequested(self)", 0, 0},
    {"currentIdChanged(int)", "\1currentIdChanged(self, int)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QWizard = {
    & ::QWizard::staticMetaObject,
    0,
    signals_QWizard
};


sipClassTypeDef sipTypeDef_QtGui_QWizard = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QWizard,
        {0},
        &plugin_QWizard
    },
    {
        sipNameNr_QWizard,
        {0, 0, 1},
        46, methods_QWizard,
        34, enummembers_QWizard,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWizard,
    -1,
    -1,
    supers_QWizard,
    0,
    init_type_QWizard,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWizard,
    0,
    0,
    0,
    release_QWizard,
    cast_QWizard,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qvector2d.sip"
#include <qvector2d.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQVector2D.cpp"

#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQVector2D.cpp"
#line 110 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQVector2D.cpp"
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQVector2D.cpp"
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQVector2D.cpp"


PyDoc_STRVAR(doc_QVector2D_length, "length(self) -> float");

extern "C" {static PyObject *meth_QVector2D_length(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->length();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_length, doc_QVector2D_length);

    return NULL;
}


PyDoc_STRVAR(doc_QVector2D_lengthSquared, "lengthSquared(self) -> float");

extern "C" {static PyObject *meth_QVector2D_lengthSquared(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_lengthSquared(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lengthSquared();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_lengthSquared, doc_QVector2D_lengthSquared);

    return NULL;
}


PyDoc_STRVAR(doc_QVector2D_normalized, "normalized(self) -> QVector2D");

extern "C" {static PyObject *meth_QVector2D_normalized(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::QVector2D*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVector2D(sipCpp->normalized());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector2D,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_normalized, doc_QVector2D_normalized);

    return NULL;
}


PyDoc_STRVAR(doc_QVector2D_normalize, "normalize(self)");

extern "C" {static PyObject *meth_QVector2D_normalize(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_normalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->normalize();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_normalize, doc_QVector2D_normalize);

    return NULL;
}


PyDoc_STRVAR(doc_QVector2D_dotProduct, "dotProduct(QVector2D, QVector2D) -> float");

extern "C" {static PyObject *meth_QVector2D_dotProduct(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_dotProduct(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D* a0;
        const  ::QVector2D* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QVector2D, &a0, sipType_QVector2D, &a1))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QVector2D::dotProduct(*a0,*a1);
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_dotProduct, doc_QVector2D_dotProduct);

    return NULL;
}


PyDoc_STRVAR(doc_QVector2D_toVector3D, "toVector3D(self) -> QVector3D");

extern "C" {static PyObject *meth_QVector2D_toVector3D(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_toVector3D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::QVector3D*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVector3D(sipCpp->toVector3D());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector3D,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_toVector3D, doc_QVector2D_toVector3D);

    return NULL;
}


PyDoc_STRVAR(doc_QVector2D_toVector4D, "toVector4D(self) -> QVector4D");

extern "C" {static PyObject *meth_QVector2D_toVector4D(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_toVector4D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::QVector4D*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVector4D(sipCpp->toVector4D());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector4D,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_toVector4D, doc_QVector2D_toVector4D);

    return NULL;
}


PyDoc_STRVAR(doc_QVector2D_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QVector2D_isNull(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_isNull, doc_QVector2D_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QVector2D_x, "x(self) -> float");

extern "C" {static PyObject *meth_QVector2D_x(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_x, doc_QVector2D_x);

    return NULL;
}


PyDoc_STRVAR(doc_QVector2D_y, "y(self) -> float");

extern "C" {static PyObject *meth_QVector2D_y(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->y();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_y, doc_QVector2D_y);

    return NULL;
}


PyDoc_STRVAR(doc_QVector2D_setX, "setX(self, float)");

extern "C" {static PyObject *meth_QVector2D_setX(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QVector2D, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setX(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_setX, doc_QVector2D_setX);

    return NULL;
}


PyDoc_STRVAR(doc_QVector2D_setY, "setY(self, float)");

extern "C" {static PyObject *meth_QVector2D_setY(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
         ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QVector2D, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setY(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_setY, doc_QVector2D_setY);

    return NULL;
}


PyDoc_STRVAR(doc_QVector2D_toPoint, "toPoint(self) -> QPoint");

extern "C" {static PyObject *meth_QVector2D_toPoint(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_toPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::QPoint*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPoint(sipCpp->toPoint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_toPoint, doc_QVector2D_toPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QVector2D_toPointF, "toPointF(self) -> QPointF");

extern "C" {static PyObject *meth_QVector2D_toPointF(PyObject *, PyObject *);}
static PyObject *meth_QVector2D_toPointF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QVector2D, &sipCpp))
        {
             ::QPointF*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPointF(sipCpp->toPointF());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QVector2D, sipName_toPointF, doc_QVector2D_toPointF);

    return NULL;
}


extern "C" {static PyObject *slot_QVector2D___eq__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector2D, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, eq_slot, sipType_QVector2D, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVector2D___mul__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;
        const  ::QVector2D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "dJ9", &a0, sipType_QVector2D, &a1))
        {
             ::QVector2D*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVector2D((a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector2D,NULL);
        }
    }

    {
        const  ::QVector2D* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QVector2D, &a0, &a1))
        {
             ::QVector2D*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVector2D((*a0 * a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector2D,NULL);
        }
    }

    {
        const  ::QVector2D* a0;
        const  ::QVector2D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector2D, &a0, sipType_QVector2D, &a1))
        {
             ::QVector2D*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVector2D((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector2D,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, mul_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector2D___div__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D* a0;
         ::qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QVector2D, &a0, &a1))
        {
             ::QVector2D*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVector2D((*a0 / a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector2D,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, div_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector2D___add__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D* a0;
        const  ::QVector2D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector2D, &a0, sipType_QVector2D, &a1))
        {
             ::QVector2D*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVector2D((*a0 + *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector2D,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, add_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector2D___sub__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D* a0;
        const  ::QVector2D* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QVector2D, &a0, sipType_QVector2D, &a1))
        {
             ::QVector2D*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVector2D((*a0 - *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector2D,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, sub_slot, NULL, sipArg0, sipArg1);
}


extern "C" {static PyObject *slot_QVector2D___neg__(PyObject *);}
static PyObject *slot_QVector2D___neg__(PyObject *sipSelf)
{
     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return 0;


    {
        {
             ::QVector2D*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QVector2D(-(*sipCpp));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector2D,NULL);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QVector2D___ne__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector2D, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui, ne_slot, sipType_QVector2D, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QVector2D___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector2D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::QVector2D::operator/=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector2D___imul__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector2D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
         ::qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::QVector2D::operator*=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const  ::QVector2D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector2D, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::QVector2D::operator*=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector2D___isub__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector2D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector2D, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::QVector2D::operator-=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector2D___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QVector2D___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QVector2D)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QVector2D* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QVector2D, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp-> ::QVector2D::operator+=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QVector2D___repr__(PyObject *);}
static PyObject *slot_QVector2D___repr__(PyObject *sipSelf)
{
     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QVector2D));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 55 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qvector2d.sip"
        PyObject *x = PyFloat_FromDouble(sipCpp->x());
        PyObject *y = PyFloat_FromDouble(sipCpp->y());
        
        if (x && y)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtGui.QVector2D(%R, %R)", x, y);
        #else
            sipRes = PyString_FromString("PyQt4.QtGui.QVector2D(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(x));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(y));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        Py_XDECREF(x);
        Py_XDECREF(y);
#line 924 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQVector2D.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_QVector2D(void *, int);}
static void release_QVector2D(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QVector2D *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QVector2D(void *);}
static PyObject *pickle_QVector2D(void *sipCppV)
{
     ::QVector2D *sipCpp = reinterpret_cast< ::QVector2D *>(sipCppV);
    PyObject *sipRes;

#line 38 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qvector2d.sip"
    sipRes = Py_BuildValue((char *)"dd", (double)sipCpp->x(), (double)sipCpp->y());
#line 954 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQVector2D.cpp"

    return sipRes;
}


extern "C" {static void assign_QVector2D(void *, SIP_SSIZE_T, const void *);}
static void assign_QVector2D(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::QVector2D *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::QVector2D *>(sipSrc);
}


extern "C" {static void *array_QVector2D(SIP_SSIZE_T);}
static void *array_QVector2D(SIP_SSIZE_T sipNrElem)
{
    return new  ::QVector2D[sipNrElem];
}


extern "C" {static void *copy_QVector2D(const void *, SIP_SSIZE_T);}
static void *copy_QVector2D(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QVector2D(reinterpret_cast<const  ::QVector2D *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QVector2D(sipSimpleWrapper *);}
static void dealloc_QVector2D(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QVector2D(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QVector2D(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QVector2D(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QVector2D *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QVector2D();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
         ::qreal a0;
         ::qreal a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "dd", &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QVector2D(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QPoint* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPoint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QVector2D(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QPointF* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QPointF, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QVector2D(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QPointF *>(a0),sipType_QPointF,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QVector3D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QVector3D, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QVector2D(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QVector4D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QVector4D, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QVector2D(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QVector2D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QVector2D, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QVector2D(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QVector2D[] = {
    {(void *)slot_QVector2D___eq__, eq_slot},
    {(void *)slot_QVector2D___mul__, mul_slot},
    {(void *)slot_QVector2D___div__, div_slot},
    {(void *)slot_QVector2D___add__, add_slot},
    {(void *)slot_QVector2D___sub__, sub_slot},
    {(void *)slot_QVector2D___neg__, neg_slot},
    {(void *)slot_QVector2D___ne__, ne_slot},
    {(void *)slot_QVector2D___idiv__, idiv_slot},
    {(void *)slot_QVector2D___imul__, imul_slot},
    {(void *)slot_QVector2D___isub__, isub_slot},
    {(void *)slot_QVector2D___iadd__, iadd_slot},
    {(void *)slot_QVector2D___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QVector2D[] = {
    {SIP_MLNAME_CAST(sipName_dotProduct), meth_QVector2D_dotProduct, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_dotProduct)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QVector2D_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_isNull)},
    {SIP_MLNAME_CAST(sipName_length), meth_QVector2D_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_length)},
    {SIP_MLNAME_CAST(sipName_lengthSquared), meth_QVector2D_lengthSquared, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_lengthSquared)},
    {SIP_MLNAME_CAST(sipName_normalize), meth_QVector2D_normalize, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_normalize)},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QVector2D_normalized, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_normalized)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QVector2D_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QVector2D_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_setY)},
    {SIP_MLNAME_CAST(sipName_toPoint), meth_QVector2D_toPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_toPoint)},
    {SIP_MLNAME_CAST(sipName_toPointF), meth_QVector2D_toPointF, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_toPointF)},
    {SIP_MLNAME_CAST(sipName_toVector3D), meth_QVector2D_toVector3D, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_toVector3D)},
    {SIP_MLNAME_CAST(sipName_toVector4D), meth_QVector2D_toVector4D, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_toVector4D)},
    {SIP_MLNAME_CAST(sipName_x), meth_QVector2D_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QVector2D_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QVector2D_y)}
};

PyDoc_STRVAR(doc_QVector2D, "\1QVector2D()\n"
    "QVector2D(float, float)\n"
    "QVector2D(QPoint)\n"
    "QVector2D(Union[QPointF, QPoint])\n"
    "QVector2D(QVector3D)\n"
    "QVector2D(QVector4D)\n"
    "QVector2D(QVector2D)");


static pyqt4ClassPluginDef plugin_QVector2D = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QVector2D = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QVector2D,
        {0},
        &plugin_QVector2D
    },
    {
        sipNameNr_QVector2D,
        {0, 0, 1},
        14, methods_QVector2D,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QVector2D,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QVector2D,
    init_type_QVector2D,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QVector2D,
    assign_QVector2D,
    array_QVector2D,
    copy_QVector2D,
    release_QVector2D,
    0,
    0,
    0,
    0,
    pickle_QVector2D,
    0,
    0
};

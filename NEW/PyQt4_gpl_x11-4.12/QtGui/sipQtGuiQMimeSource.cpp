/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qmime.sip"
#include <qmime.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMimeSource.cpp"

#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMimeSource.cpp"


class sipQMimeSource : public  ::QMimeSource
{
public:
    sipQMimeSource();
    sipQMimeSource(const  ::QMimeSource&);
    virtual ~sipQMimeSource();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QByteArray encodedData(const char*) const;
    bool provides(const char*) const;
    const char* format(int) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMimeSource(const sipQMimeSource &);
    sipQMimeSource &operator = (const sipQMimeSource &);

    char sipPyMethods[3];
};

sipQMimeSource::sipQMimeSource():  ::QMimeSource(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMimeSource::sipQMimeSource(const  ::QMimeSource& a0):  ::QMimeSource(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMimeSource::~sipQMimeSource()
{
    sipCommonDtor(sipPySelf);
}

 ::QByteArray sipQMimeSource::encodedData(const char*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QMimeSource,sipName_encodedData);

    if (!sipMeth)
        return  ::QByteArray();

    extern  ::QByteArray sipVH_QtGui_141(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    return sipVH_QtGui_141(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMimeSource::provides(const char*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_provides);

    if (!sipMeth)
        return  ::QMimeSource::provides(a0);

    extern bool sipVH_QtGui_140(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    return sipVH_QtGui_140(sipGILState, 0, sipPySelf, sipMeth, a0);
}

const char* sipQMimeSource::format(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QMimeSource,sipName_format);

    if (!sipMeth)
        return 0;

    extern const char* sipVH_QtGui_139(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int, int);

    return sipVH_QtGui_139(sipGILState, 0, sipPySelf, sipMeth, a0, -79);
}


PyDoc_STRVAR(doc_QMimeSource_format, "format(self, i: int = 0) -> str");

extern "C" {static PyObject *meth_QMimeSource_format(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeSource_format(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0 = 0;
        const  ::QMimeSource *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QMimeSource, &sipCpp, &a0))
        {
            const char*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QMimeSource, sipName_format);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->format(a0);
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeSource, sipName_format, doc_QMimeSource_format);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeSource_provides, "provides(self, str) -> bool");

extern "C" {static PyObject *meth_QMimeSource_provides(PyObject *, PyObject *);}
static PyObject *meth_QMimeSource_provides(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        const  ::QMimeSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMimeSource, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QMimeSource::provides(a0) : sipCpp->provides(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeSource, sipName_provides, doc_QMimeSource_provides);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeSource_encodedData, "encodedData(self, str) -> QByteArray");

extern "C" {static PyObject *meth_QMimeSource_encodedData(PyObject *, PyObject *);}
static PyObject *meth_QMimeSource_encodedData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const char* a0;
        const  ::QMimeSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMimeSource, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QMimeSource, sipName_encodedData);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->encodedData(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeSource, sipName_encodedData, doc_QMimeSource_encodedData);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMimeSource(void *, int);}
static void release_QMimeSource(void *sipCppV, int sipIsDerived)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipIsDerived)
        delete reinterpret_cast<sipQMimeSource *>(sipCppV);
    else
        delete reinterpret_cast< ::QMimeSource *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QMimeSource(sipSimpleWrapper *);}
static void dealloc_QMimeSource(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMimeSource *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMimeSource(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMimeSource(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMimeSource(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQMimeSource *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMimeSource();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QMimeSource* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QMimeSource, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMimeSource(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QMimeSource[] = {
    {SIP_MLNAME_CAST(sipName_encodedData), meth_QMimeSource_encodedData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeSource_encodedData)},
    {SIP_MLNAME_CAST(sipName_format), (PyCFunction)meth_QMimeSource_format, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMimeSource_format)},
    {SIP_MLNAME_CAST(sipName_provides), meth_QMimeSource_provides, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeSource_provides)}
};

PyDoc_STRVAR(doc_QMimeSource, "\1QMimeSource()\n"
    "QMimeSource(QMimeSource)");


static pyqt4ClassPluginDef plugin_QMimeSource = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QMimeSource = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QMimeSource,
        {0},
        &plugin_QMimeSource
    },
    {
        sipNameNr_QMimeSource,
        {0, 0, 1},
        3, methods_QMimeSource,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMimeSource,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QMimeSource,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMimeSource,
    0,
    0,
    0,
    release_QMimeSource,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};

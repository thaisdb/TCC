/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qmessagebox.sip"
#include <qmessagebox.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qmessagebox.sip"
#include <qmessagebox.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstractbutton.sip"
#include <qabstractbutton.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpushbutton.sip"
#include <qpushbutton.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 474 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 574 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 596 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 561 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 618 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 28 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 114 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 117 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 120 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 123 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 126 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 129 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 132 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 135 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 647 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 607 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 739 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 792 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 765 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 781 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 854 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 403 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 548 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 524 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 505 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 347 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 252 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 177 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 52 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 180 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 183 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 186 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 189 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 192 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 195 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 198 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 201 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 204 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 207 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 210 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 213 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 216 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 219 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 222 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 225 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 228 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 231 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 234 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"


class sipQMessageBox : public  ::QMessageBox
{
public:
    sipQMessageBox( ::QWidget*);
    sipQMessageBox( ::QMessageBox::Icon,const  ::QString&,const  ::QString&, ::QMessageBox::StandardButtons, ::QWidget*, ::Qt::WindowFlags);
    sipQMessageBox(const  ::QString&,const  ::QString&, ::QMessageBox::Icon,int,int,int, ::QWidget*, ::Qt::WindowFlags);
    virtual ~sipQMessageBox();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const  ::QFont&);
    void paletteChange(const  ::QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    void inputMethodEvent( ::QInputMethodEvent*);
    void changeEvent( ::QEvent*);
    void hideEvent( ::QHideEvent*);
    void showEvent( ::QShowEvent*);
    void dropEvent( ::QDropEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void actionEvent( ::QActionEvent*);
    void tabletEvent( ::QTabletEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void closeEvent( ::QCloseEvent*);
    void resizeEvent( ::QResizeEvent*);
    void moveEvent( ::QMoveEvent*);
    void paintEvent( ::QPaintEvent*);
    void leaveEvent( ::QEvent*);
    void enterEvent( ::QEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void focusInEvent( ::QFocusEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void wheelEvent( ::QWheelEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mousePressEvent( ::QMouseEvent*);
    int heightForWidth(int) const;
     ::QSize minimumSizeHint() const;
     ::QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
     ::QPaintEngine* paintEngine() const;
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);
    void done(int);
    void accept();
    void reject();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMessageBox(const sipQMessageBox &);
    sipQMessageBox &operator = (const sipQMessageBox &);

    char sipPyMethods[50];
};

sipQMessageBox::sipQMessageBox( ::QWidget*a0):  ::QMessageBox(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMessageBox::sipQMessageBox( ::QMessageBox::Icon a0,const  ::QString& a1,const  ::QString& a2, ::QMessageBox::StandardButtons a3, ::QWidget*a4, ::Qt::WindowFlags a5):  ::QMessageBox(a0,a1,a2,a3,a4,a5), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMessageBox::sipQMessageBox(const  ::QString& a0,const  ::QString& a1, ::QMessageBox::Icon a2,int a3,int a4,int a5, ::QWidget*a6, ::Qt::WindowFlags a7):  ::QMessageBox(a0,a1,a2,a3,a4,a5,a6,a7), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMessageBox::~sipQMessageBox()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMessageBox::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QMessageBox);
}

int sipQMessageBox::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QMessageBox::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QMessageBox,_c,_id,_a);

    return _id;
}

void *sipQMessageBox::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QMessageBox, _clname)) ? this :  ::QMessageBox::qt_metacast(_clname);
}

void sipQMessageBox::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
         ::QMessageBox::languageChange();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQMessageBox::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
         ::QMessageBox::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::fontChange(const  ::QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
         ::QMessageBox::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QFont&);

    sipVH_QtGui_33(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::paletteChange(const  ::QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
         ::QMessageBox::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPalette&);

    sipVH_QtGui_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
         ::QMessageBox::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMessageBox::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QMessageBox::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_31(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQMessageBox::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QMessageBox::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtGui_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtGui_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QMessageBox::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtGui_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QMessageBox::changeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QMessageBox::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QMessageBox::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QMessageBox::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QMessageBox::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QMessageBox::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QMessageBox::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QMessageBox::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QMessageBox::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QMessageBox::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QMessageBox::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QMessageBox::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QMessageBox::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QMessageBox::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QMessageBox::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QMessageBox::enterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QMessageBox::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QMessageBox::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QMessageBox::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QMessageBox::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QMessageBox::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QMessageBox::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QMessageBox::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QMessageBox::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QMessageBox::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQMessageBox::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QMessageBox::heightForWidth(a0);

    extern int sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSize sipQMessageBox::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QMessageBox::minimumSizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQMessageBox::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QMessageBox::sizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQMessageBox::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QMessageBox::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQMessageBox::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QMessageBox::devType();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQMessageBox::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QMessageBox::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQMessageBox::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QMessageBox::metric(a0);

    extern int sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMessageBox::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QMessageBox::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQMessageBox::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QMessageBox::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQMessageBox::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QMessageBox::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QMessageBox::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QMessageBox::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QMessageBox::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QMessageBox::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::done(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_done);

    if (!sipMeth)
    {
         ::QMessageBox::done(a0);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtGui_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQMessageBox::accept()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_accept);

    if (!sipMeth)
    {
         ::QMessageBox::accept();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQMessageBox::reject()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_reject);

    if (!sipMeth)
    {
         ::QMessageBox::reject();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QMessageBox_text, "text(self) -> str");

extern "C" {static PyObject *meth_QMessageBox_text(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->text());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_text, doc_QMessageBox_text);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setText, "setText(self, str)");

extern "C" {static PyObject *meth_QMessageBox_setText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setText, doc_QMessageBox_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_icon, "icon(self) -> QMessageBox.Icon");

extern "C" {static PyObject *meth_QMessageBox_icon(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QMessageBox::Icon sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->icon();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_Icon);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_icon, doc_QMessageBox_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setIcon, "setIcon(self, QMessageBox.Icon)");

extern "C" {static PyObject *meth_QMessageBox_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMessageBox::Icon a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_Icon, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIcon(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setIcon, doc_QMessageBox_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_iconPixmap, "iconPixmap(self) -> QPixmap");

extern "C" {static PyObject *meth_QMessageBox_iconPixmap(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_iconPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPixmap(sipCpp->iconPixmap());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_iconPixmap, doc_QMessageBox_iconPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setIconPixmap, "setIconPixmap(self, QPixmap)");

extern "C" {static PyObject *meth_QMessageBox_setIconPixmap(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setIconPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPixmap* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QPixmap, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIconPixmap(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setIconPixmap, doc_QMessageBox_setIconPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_buttonText, "buttonText(self, int) -> str");

extern "C" {static PyObject *meth_QMessageBox_buttonText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_buttonText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMessageBox, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->buttonText(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_buttonText, doc_QMessageBox_buttonText);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setButtonText, "setButtonText(self, int, str)");

extern "C" {static PyObject *meth_QMessageBox_setButtonText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setButtonText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QMessageBox, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setButtonText(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setButtonText, doc_QMessageBox_setButtonText);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_textFormat, "textFormat(self) -> Qt.TextFormat");

extern "C" {static PyObject *meth_QMessageBox_textFormat(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_textFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::Qt::TextFormat sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textFormat();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_TextFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_textFormat, doc_QMessageBox_textFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setTextFormat, "setTextFormat(self, Qt.TextFormat)");

extern "C" {static PyObject *meth_QMessageBox_setTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::TextFormat a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_Qt_TextFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextFormat(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setTextFormat, doc_QMessageBox_setTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_information, "information(QWidget, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.Ok, defaultButton: QMessageBox.StandardButton = QMessageBox.NoButton) -> QMessageBox.StandardButton\n"
    "information(QWidget, str, str, int, button1: int = 0, button2: int = 0) -> int\n"
    "information(QWidget, str, str, str, button1Text: str = '', button2Text: str = '', defaultButtonNumber: int = 0, escapeButtonNumber: int = -1) -> int");

extern "C" {static PyObject *meth_QMessageBox_information(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_information(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QMessageBox::StandardButtons a3def = QMessageBox::Ok;
         ::QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
         ::QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_buttons,
            sipName_defaultButton,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1|J1E", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QMessageBox_StandardButton, &a4))
        {
             ::QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::information(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        int a3;
        int a4 = 0;
        int a5 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_button1,
            sipName_button2,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1i|ii", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, &a3, &a4, &a5))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::information(a0,*a1,*a2,a3,a4,a5);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString* a3;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
        const  ::QString& a5def = QString();
        const  ::QString* a5 = &a5def;
        int a5State = 0;
        int a6 = 0;
        int a7 = -1;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_button1Text,
            sipName_button2Text,
            sipName_defaultButtonNumber,
            sipName_escapeButtonNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1J1|J1J1ii", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QString,&a5, &a5State, &a6, &a7))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::information(a0,*a1,*a2,*a3,*a4,*a5,a6,a7);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_information, doc_QMessageBox_information);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_question, "question(QWidget, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.Ok, defaultButton: QMessageBox.StandardButton = QMessageBox.NoButton) -> QMessageBox.StandardButton\n"
    "question(QWidget, str, str, int, button1: int = 0, button2: int = 0) -> int\n"
    "question(QWidget, str, str, str, button1Text: str = '', button2Text: str = '', defaultButtonNumber: int = 0, escapeButtonNumber: int = -1) -> int");

extern "C" {static PyObject *meth_QMessageBox_question(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_question(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QMessageBox::StandardButtons a3def = QMessageBox::Ok;
         ::QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
         ::QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_buttons,
            sipName_defaultButton,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1|J1E", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QMessageBox_StandardButton, &a4))
        {
             ::QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::question(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        int a3;
        int a4 = 0;
        int a5 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_button1,
            sipName_button2,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1i|ii", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, &a3, &a4, &a5))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::question(a0,*a1,*a2,a3,a4,a5);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString* a3;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
        const  ::QString& a5def = QString();
        const  ::QString* a5 = &a5def;
        int a5State = 0;
        int a6 = 0;
        int a7 = -1;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_button1Text,
            sipName_button2Text,
            sipName_defaultButtonNumber,
            sipName_escapeButtonNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1J1|J1J1ii", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QString,&a5, &a5State, &a6, &a7))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::question(a0,*a1,*a2,*a3,*a4,*a5,a6,a7);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_question, doc_QMessageBox_question);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_warning, "warning(QWidget, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.Ok, defaultButton: QMessageBox.StandardButton = QMessageBox.NoButton) -> QMessageBox.StandardButton\n"
    "warning(QWidget, str, str, int, int, button2: int = 0) -> int\n"
    "warning(QWidget, str, str, str, button1Text: str = '', button2Text: str = '', defaultButtonNumber: int = 0, escapeButtonNumber: int = -1) -> int");

extern "C" {static PyObject *meth_QMessageBox_warning(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_warning(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QMessageBox::StandardButtons a3def = QMessageBox::Ok;
         ::QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
         ::QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_buttons,
            sipName_defaultButton,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1|J1E", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QMessageBox_StandardButton, &a4))
        {
             ::QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::warning(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        int a3;
        int a4;
        int a5 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_button2,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1ii|i", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, &a3, &a4, &a5))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::warning(a0,*a1,*a2,a3,a4,a5);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString* a3;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
        const  ::QString& a5def = QString();
        const  ::QString* a5 = &a5def;
        int a5State = 0;
        int a6 = 0;
        int a7 = -1;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_button1Text,
            sipName_button2Text,
            sipName_defaultButtonNumber,
            sipName_escapeButtonNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1J1|J1J1ii", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QString,&a5, &a5State, &a6, &a7))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::warning(a0,*a1,*a2,*a3,*a4,*a5,a6,a7);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_warning, doc_QMessageBox_warning);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_critical, "critical(QWidget, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.Ok, defaultButton: QMessageBox.StandardButton = QMessageBox.NoButton) -> QMessageBox.StandardButton\n"
    "critical(QWidget, str, str, int, int, button2: int = 0) -> int\n"
    "critical(QWidget, str, str, str, button1Text: str = '', button2Text: str = '', defaultButtonNumber: int = 0, escapeButtonNumber: int = -1) -> int");

extern "C" {static PyObject *meth_QMessageBox_critical(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_critical(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QMessageBox::StandardButtons a3def = QMessageBox::Ok;
         ::QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
         ::QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_buttons,
            sipName_defaultButton,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1|J1E", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QMessageBox_StandardButton, &a4))
        {
             ::QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::critical(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        int a3;
        int a4;
        int a5 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_button2,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1ii|i", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, &a3, &a4, &a5))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::critical(a0,*a1,*a2,a3,a4,a5);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString* a3;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
        const  ::QString& a5def = QString();
        const  ::QString* a5 = &a5def;
        int a5State = 0;
        int a6 = 0;
        int a7 = -1;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_button1Text,
            sipName_button2Text,
            sipName_defaultButtonNumber,
            sipName_escapeButtonNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1J1|J1J1ii", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QString,&a5, &a5State, &a6, &a7))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::QMessageBox::critical(a0,*a1,*a2,*a3,*a4,*a5,a6,a7);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_critical, doc_QMessageBox_critical);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_about, "about(QWidget, str, str)");

extern "C" {static PyObject *meth_QMessageBox_about(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_about(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QMessageBox::about(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_about, doc_QMessageBox_about);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_aboutQt, "aboutQt(QWidget, title: str = '')");

extern "C" {static PyObject *meth_QMessageBox_aboutQt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_aboutQt(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_title,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8|J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
             ::QMessageBox::aboutQt(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_aboutQt, doc_QMessageBox_aboutQt);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QMessageBox_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QMessageBox::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_sizeHint, doc_QMessageBox_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_standardIcon, "standardIcon(QMessageBox.Icon) -> QPixmap");

extern "C" {static PyObject *meth_QMessageBox_standardIcon(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_standardIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMessageBox::Icon a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QMessageBox_Icon, &a0))
        {
             ::QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPixmap( ::QMessageBox::standardIcon(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_standardIcon, doc_QMessageBox_standardIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QMessageBox_event(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QMessageBox::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_event, doc_QMessageBox_event);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QMessageBox_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QMessageBox::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_resizeEvent, doc_QMessageBox_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_showEvent, "showEvent(self, QShowEvent)");

extern "C" {static PyObject *meth_QMessageBox_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QShowEvent* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QShowEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QMessageBox::showEvent(a0) : sipCpp->showEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_showEvent, doc_QMessageBox_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_closeEvent, "closeEvent(self, QCloseEvent)");

extern "C" {static PyObject *meth_QMessageBox_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QCloseEvent* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QCloseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QMessageBox::closeEvent(a0) : sipCpp->closeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_closeEvent, doc_QMessageBox_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QMessageBox_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QMessageBox::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_keyPressEvent, doc_QMessageBox_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QMessageBox_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QMessageBox::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_changeEvent, doc_QMessageBox_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_addButton, "addButton(self, QAbstractButton, QMessageBox.ButtonRole)\n"
    "addButton(self, str, QMessageBox.ButtonRole) -> QPushButton\n"
    "addButton(self, QMessageBox.StandardButton) -> QPushButton");

extern "C" {static PyObject *meth_QMessageBox_addButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_addButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractButton* a0;
         ::QMessageBox::ButtonRole a1;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:E", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QAbstractButton, &a0, sipType_QMessageBox_ButtonRole, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addButton(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMessageBox::ButtonRole a1;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State, sipType_QMessageBox_ButtonRole, &a1))
        {
             ::QPushButton*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addButton(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QPushButton,sipSelf);
        }
    }

    {
         ::QMessageBox::StandardButton a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButton, &a0))
        {
             ::QPushButton*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addButton(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPushButton,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_addButton, doc_QMessageBox_addButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_removeButton, "removeButton(self, QAbstractButton)");

extern "C" {static PyObject *meth_QMessageBox_removeButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_removeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractButton* a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QAbstractButton, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeButton(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_removeButton, doc_QMessageBox_removeButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setStandardButtons, "setStandardButtons(self, Union[QMessageBox.StandardButtons, QMessageBox.StandardButton])");

extern "C" {static PyObject *meth_QMessageBox_setStandardButtons(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setStandardButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMessageBox::StandardButtons* a0;
        int a0State = 0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButtons, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStandardButtons(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QMessageBox_StandardButtons,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setStandardButtons, doc_QMessageBox_setStandardButtons);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_standardButtons, "standardButtons(self) -> QMessageBox.StandardButtons");

extern "C" {static PyObject *meth_QMessageBox_standardButtons(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_standardButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QMessageBox::StandardButtons*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QMessageBox::StandardButtons(sipCpp->standardButtons());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMessageBox_StandardButtons,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_standardButtons, doc_QMessageBox_standardButtons);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_standardButton, "standardButton(self, QAbstractButton) -> QMessageBox.StandardButton");

extern "C" {static PyObject *meth_QMessageBox_standardButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_standardButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractButton* a0;
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QAbstractButton, &a0))
        {
             ::QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->standardButton(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_standardButton, doc_QMessageBox_standardButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_button, "button(self, QMessageBox.StandardButton) -> QAbstractButton");

extern "C" {static PyObject *meth_QMessageBox_button(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_button(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMessageBox::StandardButton a0;
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButton, &a0))
        {
             ::QAbstractButton*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->button(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_button, doc_QMessageBox_button);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_defaultButton, "defaultButton(self) -> QPushButton");

extern "C" {static PyObject *meth_QMessageBox_defaultButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_defaultButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QPushButton*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->defaultButton();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPushButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_defaultButton, doc_QMessageBox_defaultButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setDefaultButton, "setDefaultButton(self, QPushButton)\n"
    "setDefaultButton(self, QMessageBox.StandardButton)");

extern "C" {static PyObject *meth_QMessageBox_setDefaultButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setDefaultButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QPushButton* a0;
        PyObject *a0Keep;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QMessageBox, &sipCpp, &a0Keep, sipType_QPushButton, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDefaultButton(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -49, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QMessageBox::StandardButton a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButton, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDefaultButton(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setDefaultButton, doc_QMessageBox_setDefaultButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_escapeButton, "escapeButton(self) -> QAbstractButton");

extern "C" {static PyObject *meth_QMessageBox_escapeButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_escapeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QAbstractButton*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->escapeButton();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_escapeButton, doc_QMessageBox_escapeButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setEscapeButton, "setEscapeButton(self, QAbstractButton)\n"
    "setEscapeButton(self, QMessageBox.StandardButton)");

extern "C" {static PyObject *meth_QMessageBox_setEscapeButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setEscapeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractButton* a0;
        PyObject *a0Keep;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QMessageBox, &sipCpp, &a0Keep, sipType_QAbstractButton, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEscapeButton(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -50, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QMessageBox::StandardButton a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButton, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEscapeButton(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setEscapeButton, doc_QMessageBox_setEscapeButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_clickedButton, "clickedButton(self) -> QAbstractButton");

extern "C" {static PyObject *meth_QMessageBox_clickedButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_clickedButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QAbstractButton*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->clickedButton();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_clickedButton, doc_QMessageBox_clickedButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_informativeText, "informativeText(self) -> str");

extern "C" {static PyObject *meth_QMessageBox_informativeText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_informativeText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->informativeText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_informativeText, doc_QMessageBox_informativeText);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setInformativeText, "setInformativeText(self, str)");

extern "C" {static PyObject *meth_QMessageBox_setInformativeText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setInformativeText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setInformativeText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setInformativeText, doc_QMessageBox_setInformativeText);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_detailedText, "detailedText(self) -> str");

extern "C" {static PyObject *meth_QMessageBox_detailedText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_detailedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->detailedText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_detailedText, doc_QMessageBox_detailedText);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setDetailedText, "setDetailedText(self, str)");

extern "C" {static PyObject *meth_QMessageBox_setDetailedText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setDetailedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDetailedText(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setDetailedText, doc_QMessageBox_setDetailedText);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setWindowTitle, "setWindowTitle(self, str)");

extern "C" {static PyObject *meth_QMessageBox_setWindowTitle(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setWindowTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWindowTitle(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setWindowTitle, doc_QMessageBox_setWindowTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setWindowModality, "setWindowModality(self, Qt.WindowModality)");

extern "C" {static PyObject *meth_QMessageBox_setWindowModality(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setWindowModality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::WindowModality a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_Qt_WindowModality, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWindowModality(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setWindowModality, doc_QMessageBox_setWindowModality);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_open, "open(self)\n"
    "open(self, QObject, QT_SLOT)\n"
    "open(self, PYQT_SLOT)");

extern "C" {static PyObject *meth_QMessageBox_open(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QObject* a0;
        PyObject * a1;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8P0", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QObject, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 266 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qmessagebox.sip"
        const char *slot = pyqt4_qtgui_get_slot(a1);
        
        if (slot)
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open(a0, slot);
            Py_END_ALLOW_THREADS
        }
        else
        {
            sipError = sipBadCallableArg(1, a1);
        }
#line 3025 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        PyObject * a0;
         ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QMessageBox, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 284 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qmessagebox.sip"
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt4_qtgui_get_connection_parts(a0, 0, "()", false, &receiver, slot_signature)) == sipErrorNone)
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open(receiver, slot_signature.constData());
            Py_END_ALLOW_THREADS
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 3062 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQMessageBox.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_open, doc_QMessageBox_open);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_buttons, "buttons(self) -> List[QAbstractButton]");

extern "C" {static PyObject *meth_QMessageBox_buttons(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_buttons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QList< ::QAbstractButton*>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QAbstractButton*>(sipCpp->buttons());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_buttons, doc_QMessageBox_buttons);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_buttonRole, "buttonRole(self, QAbstractButton) -> QMessageBox.ButtonRole");

extern "C" {static PyObject *meth_QMessageBox_buttonRole(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_buttonRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractButton* a0;
        const  ::QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QAbstractButton, &a0))
        {
             ::QMessageBox::ButtonRole sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->buttonRole(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_ButtonRole);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_buttonRole, doc_QMessageBox_buttonRole);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QMessageBox(void *, const sipTypeDef *);}
static void *cast_QMessageBox(void *sipCppV, const sipTypeDef *targetType)
{
     ::QMessageBox *sipCpp = reinterpret_cast< ::QMessageBox *>(sipCppV);

    if (targetType == sipType_QDialog)
        return static_cast< ::QDialog *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMessageBox(void *, int);}
static void release_QMessageBox(void *sipCppV, int)
{
     ::QMessageBox *sipCpp = reinterpret_cast< ::QMessageBox *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QMessageBox(sipSimpleWrapper *);}
static void dealloc_QMessageBox(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQMessageBox *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QMessageBox(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QMessageBox(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMessageBox(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMessageBox *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMessageBox(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QMessageBox::Icon a0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
         ::QMessageBox::StandardButtons a3def = QMessageBox::NoButton;
         ::QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
         ::QWidget* a4 = 0;
         ::Qt::WindowFlags a5def = Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint;
         ::Qt::WindowFlags* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_buttons,
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EJ1J1|J1JHJ1", sipType_QMessageBox_Icon, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QWidget, &a4, sipOwner, sipType_Qt_WindowFlags, &a5, &a5State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMessageBox(a0,*a1,*a2,*a3,a4,*a5);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);
            sipReleaseType(a5,sipType_Qt_WindowFlags,a5State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::QMessageBox::Icon a2;
        int a3;
        int a4;
        int a5;
         ::QWidget* a6 = 0;
         ::Qt::WindowFlags a7def = Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint;
         ::Qt::WindowFlags* a7 = &a7def;
        int a7State = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1Eiii|JHJ1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QMessageBox_Icon, &a2, &a3, &a4, &a5, sipType_QWidget, &a6, sipOwner, sipType_Qt_WindowFlags, &a7, &a7State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMessageBox(*a0,*a1,a2,a3,a4,a5,a6,*a7);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a7,sipType_Qt_WindowFlags,a7State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMessageBox[] = {{84, 255, 1}};


static PyMethodDef methods_QMessageBox[] = {
    {SIP_MLNAME_CAST(sipName_about), meth_QMessageBox_about, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_about)},
    {SIP_MLNAME_CAST(sipName_aboutQt), (PyCFunction)meth_QMessageBox_aboutQt, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_aboutQt)},
    {SIP_MLNAME_CAST(sipName_addButton), meth_QMessageBox_addButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_addButton)},
    {SIP_MLNAME_CAST(sipName_button), meth_QMessageBox_button, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_button)},
    {SIP_MLNAME_CAST(sipName_buttonRole), meth_QMessageBox_buttonRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_buttonRole)},
    {SIP_MLNAME_CAST(sipName_buttonText), meth_QMessageBox_buttonText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_buttonText)},
    {SIP_MLNAME_CAST(sipName_buttons), meth_QMessageBox_buttons, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_buttons)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QMessageBox_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_changeEvent)},
    {SIP_MLNAME_CAST(sipName_clickedButton), meth_QMessageBox_clickedButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_clickedButton)},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QMessageBox_closeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_closeEvent)},
    {SIP_MLNAME_CAST(sipName_critical), (PyCFunction)meth_QMessageBox_critical, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_critical)},
    {SIP_MLNAME_CAST(sipName_defaultButton), meth_QMessageBox_defaultButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_defaultButton)},
    {SIP_MLNAME_CAST(sipName_detailedText), meth_QMessageBox_detailedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_detailedText)},
    {SIP_MLNAME_CAST(sipName_escapeButton), meth_QMessageBox_escapeButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_escapeButton)},
    {SIP_MLNAME_CAST(sipName_event), meth_QMessageBox_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_event)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QMessageBox_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_icon)},
    {SIP_MLNAME_CAST(sipName_iconPixmap), meth_QMessageBox_iconPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_iconPixmap)},
    {SIP_MLNAME_CAST(sipName_information), (PyCFunction)meth_QMessageBox_information, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_information)},
    {SIP_MLNAME_CAST(sipName_informativeText), meth_QMessageBox_informativeText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_informativeText)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QMessageBox_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_open), meth_QMessageBox_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_open)},
    {SIP_MLNAME_CAST(sipName_question), (PyCFunction)meth_QMessageBox_question, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_question)},
    {SIP_MLNAME_CAST(sipName_removeButton), meth_QMessageBox_removeButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_removeButton)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QMessageBox_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_setButtonText), meth_QMessageBox_setButtonText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setButtonText)},
    {SIP_MLNAME_CAST(sipName_setDefaultButton), meth_QMessageBox_setDefaultButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setDefaultButton)},
    {SIP_MLNAME_CAST(sipName_setDetailedText), meth_QMessageBox_setDetailedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setDetailedText)},
    {SIP_MLNAME_CAST(sipName_setEscapeButton), meth_QMessageBox_setEscapeButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setEscapeButton)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QMessageBox_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setIcon)},
    {SIP_MLNAME_CAST(sipName_setIconPixmap), meth_QMessageBox_setIconPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setIconPixmap)},
    {SIP_MLNAME_CAST(sipName_setInformativeText), meth_QMessageBox_setInformativeText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setInformativeText)},
    {SIP_MLNAME_CAST(sipName_setStandardButtons), meth_QMessageBox_setStandardButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setStandardButtons)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QMessageBox_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setText)},
    {SIP_MLNAME_CAST(sipName_setTextFormat), meth_QMessageBox_setTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setTextFormat)},
    {SIP_MLNAME_CAST(sipName_setWindowModality), meth_QMessageBox_setWindowModality, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setWindowModality)},
    {SIP_MLNAME_CAST(sipName_setWindowTitle), meth_QMessageBox_setWindowTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setWindowTitle)},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QMessageBox_showEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_showEvent)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QMessageBox_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_sizeHint)},
    {SIP_MLNAME_CAST(sipName_standardButton), meth_QMessageBox_standardButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_standardButton)},
    {SIP_MLNAME_CAST(sipName_standardButtons), meth_QMessageBox_standardButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_standardButtons)},
    {SIP_MLNAME_CAST(sipName_standardIcon), meth_QMessageBox_standardIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_standardIcon)},
    {SIP_MLNAME_CAST(sipName_text), meth_QMessageBox_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_text)},
    {SIP_MLNAME_CAST(sipName_textFormat), meth_QMessageBox_textFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_textFormat)},
    {SIP_MLNAME_CAST(sipName_warning), (PyCFunction)meth_QMessageBox_warning, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_warning)}
};

static sipEnumMemberDef enummembers_QMessageBox[] = {
    {sipName_Abort, static_cast<int>( ::QMessageBox::Abort), 350},
    {sipName_AcceptRole, static_cast<int>( ::QMessageBox::AcceptRole), 348},
    {sipName_ActionRole, static_cast<int>( ::QMessageBox::ActionRole), 348},
    {sipName_Apply, static_cast<int>( ::QMessageBox::Apply), 350},
    {sipName_ApplyRole, static_cast<int>( ::QMessageBox::ApplyRole), 348},
    {sipName_ButtonMask, static_cast<int>( ::QMessageBox::ButtonMask), 350},
    {sipName_Cancel, static_cast<int>( ::QMessageBox::Cancel), 350},
    {sipName_Close, static_cast<int>( ::QMessageBox::Close), 350},
    {sipName_Critical, static_cast<int>( ::QMessageBox::Critical), 349},
    {sipName_Default, static_cast<int>( ::QMessageBox::Default), 350},
    {sipName_DestructiveRole, static_cast<int>( ::QMessageBox::DestructiveRole), 348},
    {sipName_Discard, static_cast<int>( ::QMessageBox::Discard), 350},
    {sipName_Escape, static_cast<int>( ::QMessageBox::Escape), 350},
    {sipName_FirstButton, static_cast<int>( ::QMessageBox::FirstButton), 350},
    {sipName_FlagMask, static_cast<int>( ::QMessageBox::FlagMask), 350},
    {sipName_Help, static_cast<int>( ::QMessageBox::Help), 350},
    {sipName_HelpRole, static_cast<int>( ::QMessageBox::HelpRole), 348},
    {sipName_Ignore, static_cast<int>( ::QMessageBox::Ignore), 350},
    {sipName_Information, static_cast<int>( ::QMessageBox::Information), 349},
    {sipName_InvalidRole, static_cast<int>( ::QMessageBox::InvalidRole), 348},
    {sipName_LastButton, static_cast<int>( ::QMessageBox::LastButton), 350},
    {sipName_No, static_cast<int>( ::QMessageBox::No), 350},
    {sipName_NoAll, static_cast<int>( ::QMessageBox::NoAll), 350},
    {sipName_NoButton, static_cast<int>( ::QMessageBox::NoButton), 350},
    {sipName_NoIcon, static_cast<int>( ::QMessageBox::NoIcon), 349},
    {sipName_NoRole, static_cast<int>( ::QMessageBox::NoRole), 348},
    {sipName_NoToAll, static_cast<int>( ::QMessageBox::NoToAll), 350},
    {sipName_Ok, static_cast<int>( ::QMessageBox::Ok), 350},
    {sipName_Open, static_cast<int>( ::QMessageBox::Open), 350},
    {sipName_Question, static_cast<int>( ::QMessageBox::Question), 349},
    {sipName_RejectRole, static_cast<int>( ::QMessageBox::RejectRole), 348},
    {sipName_Reset, static_cast<int>( ::QMessageBox::Reset), 350},
    {sipName_ResetRole, static_cast<int>( ::QMessageBox::ResetRole), 348},
    {sipName_RestoreDefaults, static_cast<int>( ::QMessageBox::RestoreDefaults), 350},
    {sipName_Retry, static_cast<int>( ::QMessageBox::Retry), 350},
    {sipName_Save, static_cast<int>( ::QMessageBox::Save), 350},
    {sipName_SaveAll, static_cast<int>( ::QMessageBox::SaveAll), 350},
    {sipName_Warning, static_cast<int>( ::QMessageBox::Warning), 349},
    {sipName_Yes, static_cast<int>( ::QMessageBox::Yes), 350},
    {sipName_YesAll, static_cast<int>( ::QMessageBox::YesAll), 350},
    {sipName_YesRole, static_cast<int>( ::QMessageBox::YesRole), 348},
    {sipName_YesToAll, static_cast<int>( ::QMessageBox::YesToAll), 350},
};

PyDoc_STRVAR(doc_QMessageBox, "\1QMessageBox(parent: QWidget = None)\n"
    "QMessageBox(QMessageBox.Icon, str, str, buttons: Union[QMessageBox.StandardButtons, QMessageBox.StandardButton] = QMessageBox.NoButton, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.Dialog|Qt.MSWindowsFixedSizeDialogHint)\n"
    "QMessageBox(str, str, QMessageBox.Icon, int, int, int, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.Dialog|Qt.MSWindowsFixedSizeDialogHint)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QMessageBox[] = {
    {"buttonClicked(QAbstractButton*)", "\1buttonClicked(self, QAbstractButton)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QMessageBox = {
    & ::QMessageBox::staticMetaObject,
    0,
    signals_QMessageBox
};


sipClassTypeDef sipTypeDef_QtGui_QMessageBox = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QMessageBox,
        {0},
        &plugin_QMessageBox
    },
    {
        sipNameNr_QMessageBox,
        {0, 0, 1},
        44, methods_QMessageBox,
        42, enummembers_QMessageBox,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMessageBox,
    -1,
    -1,
    supers_QMessageBox,
    0,
    init_type_QMessageBox,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMessageBox,
    0,
    0,
    0,
    release_QMessageBox,
    cast_QMessageBox,
    0,
    0,
    0,
    0,
    0,
    0
};

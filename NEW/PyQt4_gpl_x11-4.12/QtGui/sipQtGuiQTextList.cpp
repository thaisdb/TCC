/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextlist.sip"
#include <qtextlist.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"

#line 59 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 550 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 129 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"


class sipQTextList : public  ::QTextList
{
public:
    sipQTextList( ::QTextDocument*);
    virtual ~sipQTextList();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);
    void blockInserted(const  ::QTextBlock&);
    void blockRemoved(const  ::QTextBlock&);
    void blockFormatChanged(const  ::QTextBlock&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextList(const sipQTextList &);
    sipQTextList &operator = (const sipQTextList &);

    char sipPyMethods[10];
};

sipQTextList::sipQTextList( ::QTextDocument*a0):  ::QTextList(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextList::~sipQTextList()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTextList::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextList);
}

int sipQTextList::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QTextList::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextList,_c,_id,_a);

    return _id;
}

void *sipQTextList::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTextList, _clname)) ? this :  ::QTextList::qt_metacast(_clname);
}

bool sipQTextList::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QTextList::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQTextList::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QTextList::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQTextList::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QTextList::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextList::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QTextList::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextList::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QTextList::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextList::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QTextList::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextList::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QTextList::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextList::blockInserted(const  ::QTextBlock& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_blockInserted);

    if (!sipMeth)
    {
         ::QTextList::blockInserted(a0);
        return;
    }

    extern void sipVH_QtGui_260(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    sipVH_QtGui_260(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextList::blockRemoved(const  ::QTextBlock& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_blockRemoved);

    if (!sipMeth)
    {
         ::QTextList::blockRemoved(a0);
        return;
    }

    extern void sipVH_QtGui_260(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    sipVH_QtGui_260(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQTextList::blockFormatChanged(const  ::QTextBlock& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_blockFormatChanged);

    if (!sipMeth)
    {
         ::QTextList::blockFormatChanged(a0);
        return;
    }

    extern void sipVH_QtGui_260(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QTextBlock&);

    sipVH_QtGui_260(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QTextList_count, "count(self) -> int");

extern "C" {static PyObject *meth_QTextList_count(PyObject *, PyObject *);}
static PyObject *meth_QTextList_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextList, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_count, doc_QTextList_count);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_isEmpty, "isEmpty(self) -> bool");

extern "C" {static PyObject *meth_QTextList_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QTextList_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextList, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_isEmpty, doc_QTextList_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_item, "item(self, int) -> QTextBlock");

extern "C" {static PyObject *meth_QTextList_item(PyObject *, PyObject *);}
static PyObject *meth_QTextList_item(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextList, &sipCpp, &a0))
        {
             ::QTextBlock*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTextBlock(sipCpp->item(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_item, doc_QTextList_item);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_itemNumber, "itemNumber(self, QTextBlock) -> int");

extern "C" {static PyObject *meth_QTextList_itemNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextList_itemNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextBlock* a0;
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemNumber(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_itemNumber, doc_QTextList_itemNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_itemText, "itemText(self, QTextBlock) -> str");

extern "C" {static PyObject *meth_QTextList_itemText(PyObject *, PyObject *);}
static PyObject *meth_QTextList_itemText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextBlock* a0;
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->itemText(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_itemText, doc_QTextList_itemText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_removeItem, "removeItem(self, int)");

extern "C" {static PyObject *meth_QTextList_removeItem(PyObject *, PyObject *);}
static PyObject *meth_QTextList_removeItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextList, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_removeItem, doc_QTextList_removeItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_remove, "remove(self, QTextBlock)");

extern "C" {static PyObject *meth_QTextList_remove(PyObject *, PyObject *);}
static PyObject *meth_QTextList_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextBlock* a0;
         ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->remove(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_remove, doc_QTextList_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_add, "add(self, QTextBlock)");

extern "C" {static PyObject *meth_QTextList_add(PyObject *, PyObject *);}
static PyObject *meth_QTextList_add(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextBlock* a0;
         ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextBlock, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->add(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_add, doc_QTextList_add);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_format, "format(self) -> QTextListFormat");

extern "C" {static PyObject *meth_QTextList_format(PyObject *, PyObject *);}
static PyObject *meth_QTextList_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextList, &sipCpp))
        {
             ::QTextListFormat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTextListFormat(sipCpp->format());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextListFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_format, doc_QTextList_format);

    return NULL;
}


PyDoc_STRVAR(doc_QTextList_setFormat, "setFormat(self, QTextListFormat)");

extern "C" {static PyObject *meth_QTextList_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextList_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTextListFormat* a0;
         ::QTextList *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextList, &sipCpp, sipType_QTextListFormat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextList, sipName_setFormat, doc_QTextList_setFormat);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QTextList___len__(PyObject *);}
static SIP_SSIZE_T slot_QTextList___len__(PyObject *sipSelf)
{
     ::QTextList *sipCpp = reinterpret_cast< ::QTextList *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextList));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 643 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQTextList.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QTextList(void *, const sipTypeDef *);}
static void *cast_QTextList(void *sipCppV, const sipTypeDef *targetType)
{
     ::QTextList *sipCpp = reinterpret_cast< ::QTextList *>(sipCppV);

    if (targetType == sipType_QTextBlockGroup)
        return static_cast< ::QTextBlockGroup *>(sipCpp);

    if (targetType == sipType_QTextObject)
        return static_cast< ::QTextObject *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextList(void *, int);}
static void release_QTextList(void *sipCppV, int)
{
     ::QTextList *sipCpp = reinterpret_cast< ::QTextList *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTextList(sipSimpleWrapper *);}
static void dealloc_QTextList(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQTextList *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QTextList(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QTextList(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextList(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTextList *sipCpp = 0;

    {
         ::QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTextList(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextList[] = {{649, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextList[] = {
    {(void *)slot_QTextList___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextList[] = {
    {SIP_MLNAME_CAST(sipName_add), meth_QTextList_add, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_add)},
    {SIP_MLNAME_CAST(sipName_count), meth_QTextList_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_count)},
    {SIP_MLNAME_CAST(sipName_format), meth_QTextList_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_format)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QTextList_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_isEmpty)},
    {SIP_MLNAME_CAST(sipName_item), meth_QTextList_item, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_item)},
    {SIP_MLNAME_CAST(sipName_itemNumber), meth_QTextList_itemNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_itemNumber)},
    {SIP_MLNAME_CAST(sipName_itemText), meth_QTextList_itemText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_itemText)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QTextList_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_remove)},
    {SIP_MLNAME_CAST(sipName_removeItem), meth_QTextList_removeItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_removeItem)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QTextList_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextList_setFormat)}
};

PyDoc_STRVAR(doc_QTextList, "\1QTextList(QTextDocument)");


static pyqt4ClassPluginDef plugin_QTextList = {
    & ::QTextList::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QTextList = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTextList,
        {0},
        &plugin_QTextList
    },
    {
        sipNameNr_QTextList,
        {0, 0, 1},
        10, methods_QTextList,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextList,
    -1,
    -1,
    supers_QTextList,
    slots_QTextList,
    init_type_QTextList,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextList,
    0,
    0,
    0,
    release_QTextList,
    cast_QTextList,
    0,
    0,
    0,
    0,
    0,
    0
};

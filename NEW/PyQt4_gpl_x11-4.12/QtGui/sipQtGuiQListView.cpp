/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlistview.sip"
#include <qlistview.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 165 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 85 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 524 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 1126 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 739 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 792 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 765 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 561 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 252 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 647 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 474 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 505 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 781 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 114 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 117 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 120 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 123 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 85 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 126 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 122 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 129 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 132 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 135 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 138 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 618 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 347 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 28 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 147 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 150 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qframe.sip"
#include <qframe.h>
#line 153 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 156 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 159 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 162 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 165 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 168 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 171 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 174 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 177 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 180 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 183 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 186 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 189 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 192 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 607 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 195 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 596 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 198 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 854 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 201 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 403 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 204 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 574 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 207 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 548 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 210 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 213 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 52 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 216 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 219 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 222 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 225 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 228 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 231 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 234 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 237 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 240 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 243 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 246 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 249 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 252 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 255 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 258 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 261 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 264 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 267 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQListView.cpp"


class sipQListView : public  ::QListView
{
public:
    sipQListView( ::QWidget*);
    virtual ~sipQListView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void scrollContentsBy(int,int);
    bool viewportEvent( ::QEvent*);
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const  ::QFont&);
    void paletteChange(const  ::QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    void inputMethodEvent( ::QInputMethodEvent*);
    void changeEvent( ::QEvent*);
    void hideEvent( ::QHideEvent*);
    void showEvent( ::QShowEvent*);
    void dropEvent( ::QDropEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void actionEvent( ::QActionEvent*);
    void tabletEvent( ::QTabletEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void closeEvent( ::QCloseEvent*);
    void resizeEvent( ::QResizeEvent*);
    void moveEvent( ::QMoveEvent*);
    void paintEvent( ::QPaintEvent*);
    void leaveEvent( ::QEvent*);
    void enterEvent( ::QEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void focusInEvent( ::QFocusEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void wheelEvent( ::QWheelEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mousePressEvent( ::QMouseEvent*);
    int heightForWidth(int) const;
     ::QSize minimumSizeHint() const;
     ::QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
     ::QPaintEngine* paintEngine() const;
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);
    void setModel( ::QAbstractItemModel*);
    void setSelectionModel( ::QItemSelectionModel*);
    void keyboardSearch(const  ::QString&);
     ::QRect visualRect(const  ::QModelIndex&) const;
    void scrollTo(const  ::QModelIndex&, ::QAbstractItemView::ScrollHint);
     ::QModelIndex indexAt(const  ::QPoint&) const;
    int sizeHintForRow(int) const;
    int sizeHintForColumn(int) const;
    void reset();
    void setRootIndex(const  ::QModelIndex&);
    void selectAll();
    void dataChanged(const  ::QModelIndex&,const  ::QModelIndex&);
    void rowsInserted(const  ::QModelIndex&,int,int);
    void rowsAboutToBeRemoved(const  ::QModelIndex&,int,int);
    void selectionChanged(const  ::QItemSelection&,const  ::QItemSelection&);
    void currentChanged(const  ::QModelIndex&,const  ::QModelIndex&);
    void updateEditorData();
    void updateEditorGeometries();
    void updateGeometries();
    void verticalScrollbarAction(int);
    void horizontalScrollbarAction(int);
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarValueChanged(int);
    void closeEditor( ::QWidget*, ::QAbstractItemDelegate::EndEditHint);
    void commitData( ::QWidget*);
    void editorDestroyed( ::QObject*);
     ::QModelIndex moveCursor( ::QAbstractItemView::CursorAction, ::Qt::KeyboardModifiers);
    int horizontalOffset() const;
    int verticalOffset() const;
    bool isIndexHidden(const  ::QModelIndex&) const;
    void setSelection(const  ::QRect&, ::QItemSelectionModel::SelectionFlags);
     ::QRegion visualRegionForSelection(const  ::QItemSelection&) const;
     ::QModelIndexList selectedIndexes() const;
    bool edit(const  ::QModelIndex&, ::QAbstractItemView::EditTrigger, ::QEvent*);
     ::QItemSelectionModel::SelectionFlags selectionCommand(const  ::QModelIndex&,const  ::QEvent*) const;
    void startDrag( ::Qt::DropActions);
     ::QStyleOptionViewItem viewOptions() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQListView(const sipQListView &);
    sipQListView &operator = (const sipQListView &);

    char sipPyMethods[86];
};

sipQListView::sipQListView( ::QWidget*a0):  ::QListView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQListView::~sipQListView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQListView::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QListView);
}

int sipQListView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QListView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QListView,_c,_id,_a);

    return _id;
}

void *sipQListView::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QListView, _clname)) ? this :  ::QListView::qt_metacast(_clname);
}

void sipQListView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
         ::QListView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtGui_43(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQListView::viewportEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return  ::QListView::viewportEvent(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
         ::QListView::languageChange();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
         ::QListView::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::fontChange(const  ::QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
         ::QListView::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QFont&);

    sipVH_QtGui_33(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::paletteChange(const  ::QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
         ::QListView::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPalette&);

    sipVH_QtGui_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
         ::QListView::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQListView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QListView::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_31(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQListView::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QListView::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtGui_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtGui_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QListView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtGui_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QListView::changeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QListView::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QListView::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QListView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QListView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QListView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QListView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QListView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QListView::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QListView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QListView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QListView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QListView::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QListView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QListView::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QListView::enterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QListView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QListView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QListView::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QListView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QListView::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QListView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QListView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QListView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QListView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQListView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QListView::heightForWidth(a0);

    extern int sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSize sipQListView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QListView::minimumSizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQListView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QListView::sizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QListView::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQListView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QListView::devType();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQListView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QListView::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQListView::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QListView::metric(a0);

    extern int sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQListView::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QListView::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQListView::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QListView::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQListView::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QListView::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QListView::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QListView::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QListView::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QListView::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::setModel( ::QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_setModel);

    if (!sipMeth)
    {
         ::QListView::setModel(a0);
        return;
    }

    extern void sipVH_QtGui_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractItemModel*);

    sipVH_QtGui_44(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::setSelectionModel( ::QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_setSelectionModel);

    if (!sipMeth)
    {
         ::QListView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QItemSelectionModel*);

    sipVH_QtGui_45(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::keyboardSearch(const  ::QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_keyboardSearch);

    if (!sipMeth)
    {
         ::QListView::keyboardSearch(a0);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    sipVH_QtGui_46(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QRect sipQListView::visualRect(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,NULL,sipName_visualRect);

    if (!sipMeth)
        return  ::QListView::visualRect(a0);

    extern  ::QRect sipVH_QtGui_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_47(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::scrollTo(const  ::QModelIndex& a0, ::QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_scrollTo);

    if (!sipMeth)
    {
         ::QListView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QAbstractItemView::ScrollHint);

    sipVH_QtGui_48(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

 ::QModelIndex sipQListView::indexAt(const  ::QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[54]),sipPySelf,NULL,sipName_indexAt);

    if (!sipMeth)
        return  ::QListView::indexAt(a0);

    extern  ::QModelIndex sipVH_QtGui_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPoint&);

    return sipVH_QtGui_49(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQListView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[55]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!sipMeth)
        return  ::QListView::sizeHintForRow(a0);

    extern int sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQListView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[56]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!sipMeth)
        return  ::QListView::sizeHintForColumn(a0);

    extern int sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
         ::QListView::reset();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::setRootIndex(const  ::QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_setRootIndex);

    if (!sipMeth)
    {
         ::QListView::setRootIndex(a0);
        return;
    }

    extern void sipVH_QtGui_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    sipVH_QtGui_50(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
         ::QListView::selectAll();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::dataChanged(const  ::QModelIndex& a0,const  ::QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_dataChanged);

    if (!sipMeth)
    {
         ::QListView::dataChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QModelIndex&);

    sipVH_QtGui_51(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQListView::rowsInserted(const  ::QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_rowsInserted);

    if (!sipMeth)
    {
         ::QListView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int);

    sipVH_QtGui_52(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQListView::rowsAboutToBeRemoved(const  ::QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!sipMeth)
    {
         ::QListView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,int,int);

    sipVH_QtGui_52(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQListView::selectionChanged(const  ::QItemSelection& a0,const  ::QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_selectionChanged);

    if (!sipMeth)
    {
         ::QListView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&,const  ::QItemSelection&);

    sipVH_QtGui_53(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQListView::currentChanged(const  ::QModelIndex& a0,const  ::QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_currentChanged);

    if (!sipMeth)
    {
         ::QListView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QModelIndex&);

    sipVH_QtGui_51(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQListView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_updateEditorData);

    if (!sipMeth)
    {
         ::QListView::updateEditorData();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!sipMeth)
    {
         ::QListView::updateEditorGeometries();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_updateGeometries);

    if (!sipMeth)
    {
         ::QListView::updateGeometries();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQListView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!sipMeth)
    {
         ::QListView::verticalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtGui_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!sipMeth)
    {
         ::QListView::horizontalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtGui_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!sipMeth)
    {
         ::QListView::verticalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtGui_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!sipMeth)
    {
         ::QListView::horizontalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtGui_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::closeEditor( ::QWidget*a0, ::QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_closeEditor);

    if (!sipMeth)
    {
         ::QListView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtGui_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*, ::QAbstractItemDelegate::EndEditHint);

    sipVH_QtGui_55(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQListView::commitData( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
         ::QListView::commitData(a0);
        return;
    }

    extern void sipVH_QtGui_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtGui_56(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::editorDestroyed( ::QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_editorDestroyed);

    if (!sipMeth)
    {
         ::QListView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtGui_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*);

    sipVH_QtGui_57(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QModelIndex sipQListView::moveCursor( ::QAbstractItemView::CursorAction a0, ::Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_moveCursor);

    if (!sipMeth)
        return  ::QListView::moveCursor(a0,a1);

    extern  ::QModelIndex sipVH_QtGui_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QAbstractItemView::CursorAction, ::Qt::KeyboardModifiers);

    return sipVH_QtGui_58(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

int sipQListView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[76]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!sipMeth)
        return  ::QListView::horizontalOffset();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQListView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[77]),sipPySelf,NULL,sipName_verticalOffset);

    if (!sipMeth)
        return  ::QListView::verticalOffset();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQListView::isIndexHidden(const  ::QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[78]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!sipMeth)
        return  ::QListView::isIndexHidden(a0);

    extern bool sipVH_QtGui_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&);

    return sipVH_QtGui_59(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQListView::setSelection(const  ::QRect& a0, ::QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_setSelection);

    if (!sipMeth)
    {
         ::QListView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtGui_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect&, ::QItemSelectionModel::SelectionFlags);

    sipVH_QtGui_60(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

 ::QRegion sipQListView::visualRegionForSelection(const  ::QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[80]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!sipMeth)
        return  ::QListView::visualRegionForSelection(a0);

    extern  ::QRegion sipVH_QtGui_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QItemSelection&);

    return sipVH_QtGui_61(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QModelIndexList sipQListView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[81]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!sipMeth)
        return  ::QListView::selectedIndexes();

    extern  ::QModelIndexList sipVH_QtGui_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_62(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQListView::edit(const  ::QModelIndex& a0, ::QAbstractItemView::EditTrigger a1, ::QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_edit);

    if (!sipMeth)
        return  ::QListView::edit(a0,a1,a2);

    extern bool sipVH_QtGui_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&, ::QAbstractItemView::EditTrigger, ::QEvent*);

    return sipVH_QtGui_63(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QItemSelectionModel::SelectionFlags sipQListView::selectionCommand(const  ::QModelIndex& a0,const  ::QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[83]),sipPySelf,NULL,sipName_selectionCommand);

    if (!sipMeth)
        return  ::QListView::selectionCommand(a0,a1);

    extern  ::QItemSelectionModel::SelectionFlags sipVH_QtGui_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QModelIndex&,const  ::QEvent*);

    return sipVH_QtGui_64(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQListView::startDrag( ::Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_startDrag);

    if (!sipMeth)
    {
         ::QListView::startDrag(a0);
        return;
    }

    extern void sipVH_QtGui_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::DropActions);

    sipVH_QtGui_65(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QStyleOptionViewItem sipQListView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[85]),sipPySelf,NULL,sipName_viewOptions);

    if (!sipMeth)
        return  ::QListView::viewOptions();

    extern  ::QStyleOptionViewItem sipVH_QtGui_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_66(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QListView_setMovement, "setMovement(self, QListView.Movement)");

extern "C" {static PyObject *meth_QListView_setMovement(PyObject *, PyObject *);}
static PyObject *meth_QListView_setMovement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QListView::Movement a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_Movement, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMovement(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setMovement, doc_QListView_setMovement);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_movement, "movement(self) -> QListView.Movement");

extern "C" {static PyObject *meth_QListView_movement(PyObject *, PyObject *);}
static PyObject *meth_QListView_movement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
             ::QListView::Movement sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->movement();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QListView_Movement);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_movement, doc_QListView_movement);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setFlow, "setFlow(self, QListView.Flow)");

extern "C" {static PyObject *meth_QListView_setFlow(PyObject *, PyObject *);}
static PyObject *meth_QListView_setFlow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QListView::Flow a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_Flow, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFlow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setFlow, doc_QListView_setFlow);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_flow, "flow(self) -> QListView.Flow");

extern "C" {static PyObject *meth_QListView_flow(PyObject *, PyObject *);}
static PyObject *meth_QListView_flow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
             ::QListView::Flow sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->flow();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QListView_Flow);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_flow, doc_QListView_flow);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setWrapping, "setWrapping(self, bool)");

extern "C" {static PyObject *meth_QListView_setWrapping(PyObject *, PyObject *);}
static PyObject *meth_QListView_setWrapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWrapping(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setWrapping, doc_QListView_setWrapping);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_isWrapping, "isWrapping(self) -> bool");

extern "C" {static PyObject *meth_QListView_isWrapping(PyObject *, PyObject *);}
static PyObject *meth_QListView_isWrapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isWrapping();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_isWrapping, doc_QListView_isWrapping);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setResizeMode, "setResizeMode(self, QListView.ResizeMode)");

extern "C" {static PyObject *meth_QListView_setResizeMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_setResizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QListView::ResizeMode a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_ResizeMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setResizeMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setResizeMode, doc_QListView_setResizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_resizeMode, "resizeMode(self) -> QListView.ResizeMode");

extern "C" {static PyObject *meth_QListView_resizeMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_resizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
             ::QListView::ResizeMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resizeMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QListView_ResizeMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_resizeMode, doc_QListView_resizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setLayoutMode, "setLayoutMode(self, QListView.LayoutMode)");

extern "C" {static PyObject *meth_QListView_setLayoutMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_setLayoutMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QListView::LayoutMode a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_LayoutMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLayoutMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setLayoutMode, doc_QListView_setLayoutMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_layoutMode, "layoutMode(self) -> QListView.LayoutMode");

extern "C" {static PyObject *meth_QListView_layoutMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_layoutMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
             ::QListView::LayoutMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->layoutMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QListView_LayoutMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_layoutMode, doc_QListView_layoutMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setSpacing, "setSpacing(self, int)");

extern "C" {static PyObject *meth_QListView_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QListView_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setSpacing, doc_QListView_setSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_spacing, "spacing(self) -> int");

extern "C" {static PyObject *meth_QListView_spacing(PyObject *, PyObject *);}
static PyObject *meth_QListView_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->spacing();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_spacing, doc_QListView_spacing);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setGridSize, "setGridSize(self, QSize)");

extern "C" {static PyObject *meth_QListView_setGridSize(PyObject *, PyObject *);}
static PyObject *meth_QListView_setGridSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSize* a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGridSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setGridSize, doc_QListView_setGridSize);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_gridSize, "gridSize(self) -> QSize");

extern "C" {static PyObject *meth_QListView_gridSize(PyObject *, PyObject *);}
static PyObject *meth_QListView_gridSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize(sipCpp->gridSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_gridSize, doc_QListView_gridSize);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setViewMode, "setViewMode(self, QListView.ViewMode)");

extern "C" {static PyObject *meth_QListView_setViewMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_setViewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QListView::ViewMode a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_ViewMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setViewMode, doc_QListView_setViewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_viewMode, "viewMode(self) -> QListView.ViewMode");

extern "C" {static PyObject *meth_QListView_viewMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_viewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
             ::QListView::ViewMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->viewMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QListView_ViewMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_viewMode, doc_QListView_viewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_clearPropertyFlags, "clearPropertyFlags(self)");

extern "C" {static PyObject *meth_QListView_clearPropertyFlags(PyObject *, PyObject *);}
static PyObject *meth_QListView_clearPropertyFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearPropertyFlags();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_clearPropertyFlags, doc_QListView_clearPropertyFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_isRowHidden, "isRowHidden(self, int) -> bool");

extern "C" {static PyObject *meth_QListView_isRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QListView_isRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRowHidden(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_isRowHidden, doc_QListView_isRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setRowHidden, "setRowHidden(self, int, bool)");

extern "C" {static PyObject *meth_QListView_setRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QListView_setRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QListView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRowHidden(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setRowHidden, doc_QListView_setRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setModelColumn, "setModelColumn(self, int)");

extern "C" {static PyObject *meth_QListView_setModelColumn(PyObject *, PyObject *);}
static PyObject *meth_QListView_setModelColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setModelColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setModelColumn, doc_QListView_setModelColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_modelColumn, "modelColumn(self) -> int");

extern "C" {static PyObject *meth_QListView_modelColumn(PyObject *, PyObject *);}
static PyObject *meth_QListView_modelColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->modelColumn();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_modelColumn, doc_QListView_modelColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setUniformItemSizes, "setUniformItemSizes(self, bool)");

extern "C" {static PyObject *meth_QListView_setUniformItemSizes(PyObject *, PyObject *);}
static PyObject *meth_QListView_setUniformItemSizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformItemSizes(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setUniformItemSizes, doc_QListView_setUniformItemSizes);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_uniformItemSizes, "uniformItemSizes(self) -> bool");

extern "C" {static PyObject *meth_QListView_uniformItemSizes(PyObject *, PyObject *);}
static PyObject *meth_QListView_uniformItemSizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->uniformItemSizes();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_uniformItemSizes, doc_QListView_uniformItemSizes);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_visualRect, "visualRect(self, QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QListView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QListView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect((sipSelfWasArg ? sipCpp-> ::QListView::visualRect(*a0) : sipCpp->visualRect(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_visualRect, doc_QListView_visualRect);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_scrollTo, "scrollTo(self, QModelIndex, hint: QAbstractItemView.ScrollHint = QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QListView_scrollTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_scrollTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
         ::QListView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::scrollTo(*a0,a1) : sipCpp->scrollTo(*a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_scrollTo, doc_QListView_scrollTo);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_indexAt, "indexAt(self, QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QListView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QListView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QPoint* a0;
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QPoint, &a0))
        {
             ::QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QListView::indexAt(*a0) : sipCpp->indexAt(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_indexAt, doc_QListView_indexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_reset, "reset(self)");

extern "C" {static PyObject *meth_QListView_reset(PyObject *, PyObject *);}
static PyObject *meth_QListView_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::reset() : sipCpp->reset());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_reset, doc_QListView_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setRootIndex, "setRootIndex(self, QModelIndex)");

extern "C" {static PyObject *meth_QListView_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QListView_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::setRootIndex(*a0) : sipCpp->setRootIndex(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setRootIndex, doc_QListView_setRootIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_scrollContentsBy, "scrollContentsBy(self, int, int)");

extern "C" {static PyObject *meth_QListView_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QListView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pii", &sipSelf, sipType_QListView, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::scrollContentsBy(a0,a1) : sipCpp->scrollContentsBy(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_scrollContentsBy, doc_QListView_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dataChanged, "dataChanged(self, QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QListView_dataChanged(PyObject *, PyObject *);}
static PyObject *meth_QListView_dataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::dataChanged(*a0,*a1) : sipCpp->dataChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dataChanged, doc_QListView_dataChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_rowsInserted, "rowsInserted(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QListView_rowsInserted(PyObject *, PyObject *);}
static PyObject *meth_QListView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::rowsInserted(*a0,a1,a2) : sipCpp->rowsInserted(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_rowsInserted, doc_QListView_rowsInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_rowsAboutToBeRemoved, "rowsAboutToBeRemoved(self, QModelIndex, int, int)");

extern "C" {static PyObject *meth_QListView_rowsAboutToBeRemoved(PyObject *, PyObject *);}
static PyObject *meth_QListView_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        int a1;
        int a2;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9ii", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::rowsAboutToBeRemoved(*a0,a1,a2) : sipCpp->rowsAboutToBeRemoved(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_rowsAboutToBeRemoved, doc_QListView_rowsAboutToBeRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QListView_event(PyObject *, PyObject *);}
static PyObject *meth_QListView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QListView::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_event, doc_QListView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_mouseMoveEvent, "mouseMoveEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QListView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::mouseMoveEvent(a0) : sipCpp->mouseMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_mouseMoveEvent, doc_QListView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_mouseReleaseEvent, "mouseReleaseEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QListView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::mouseReleaseEvent(a0) : sipCpp->mouseReleaseEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_mouseReleaseEvent, doc_QListView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_timerEvent, "timerEvent(self, QTimerEvent)");

extern "C" {static PyObject *meth_QListView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::timerEvent(a0) : sipCpp->timerEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_timerEvent, doc_QListView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_resizeEvent, "resizeEvent(self, QResizeEvent)");

extern "C" {static PyObject *meth_QListView_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QResizeEvent* a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::resizeEvent(a0) : sipCpp->resizeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_resizeEvent, doc_QListView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dragMoveEvent, "dragMoveEvent(self, QDragMoveEvent)");

extern "C" {static PyObject *meth_QListView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragMoveEvent* a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::dragMoveEvent(a0) : sipCpp->dragMoveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dragMoveEvent, doc_QListView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dragLeaveEvent, "dragLeaveEvent(self, QDragLeaveEvent)");

extern "C" {static PyObject *meth_QListView_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDragLeaveEvent* a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::dragLeaveEvent(a0) : sipCpp->dragLeaveEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dragLeaveEvent, doc_QListView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dropEvent, "dropEvent(self, QDropEvent)");

extern "C" {static PyObject *meth_QListView_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDropEvent* a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QDropEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::dropEvent(a0) : sipCpp->dropEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dropEvent, doc_QListView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_startDrag, "startDrag(self, Union[Qt.DropActions, Qt.DropAction])");

extern "C" {static PyObject *meth_QListView_startDrag(PyObject *, PyObject *);}
static PyObject *meth_QListView_startDrag(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::Qt::DropActions* a0;
        int a0State = 0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QListView, &sipCpp, sipType_Qt_DropActions, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::startDrag(*a0) : sipCpp->startDrag(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_startDrag, doc_QListView_startDrag);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_viewOptions, "viewOptions(self) -> QStyleOptionViewItem");

extern "C" {static PyObject *meth_QListView_viewOptions(PyObject *, PyObject *);}
static PyObject *meth_QListView_viewOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QListView, &sipCpp))
        {
             ::QStyleOptionViewItem*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStyleOptionViewItem((sipSelfWasArg ? sipCpp-> ::QListView::viewOptions() : sipCpp->viewOptions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_viewOptions, doc_QListView_viewOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QListView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QListView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_paintEvent, doc_QListView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_horizontalOffset, "horizontalOffset(self) -> int");

extern "C" {static PyObject *meth_QListView_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QListView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QListView::horizontalOffset() : sipCpp->horizontalOffset());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_horizontalOffset, doc_QListView_horizontalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_verticalOffset, "verticalOffset(self) -> int");

extern "C" {static PyObject *meth_QListView_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QListView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QListView::verticalOffset() : sipCpp->verticalOffset());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_verticalOffset, doc_QListView_verticalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_moveCursor, "moveCursor(self, QAbstractItemView.CursorAction, Union[Qt.KeyboardModifiers, Qt.KeyboardModifier]) -> QModelIndex");

extern "C" {static PyObject *meth_QListView_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QListView_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QAbstractItemView::CursorAction a0;
         ::Qt::KeyboardModifiers* a1;
        int a1State = 0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pEJ1", &sipSelf, sipType_QListView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
             ::QModelIndex*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QModelIndex((sipSelfWasArg ? sipCpp-> ::QListView::moveCursor(a0,*a1) : sipCpp->moveCursor(a0,*a1)));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_moveCursor, doc_QListView_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_rectForIndex, "rectForIndex(self, QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QListView_rectForIndex(PyObject *, PyObject *);}
static PyObject *meth_QListView_rectForIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QModelIndex* a0;
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect(sipCpp->rectForIndex(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_rectForIndex, doc_QListView_rectForIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setPositionForIndex, "setPositionForIndex(self, QPoint, QModelIndex)");

extern "C" {static PyObject *meth_QListView_setPositionForIndex(PyObject *, PyObject *);}
static PyObject *meth_QListView_setPositionForIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QPoint* a0;
        const  ::QModelIndex* a1;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QListView, &sipCpp, sipType_QPoint, &a0, sipType_QModelIndex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPositionForIndex(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setPositionForIndex, doc_QListView_setPositionForIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setSelection, "setSelection(self, QRect, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QListView_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QListView_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QRect* a0;
         ::QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J1", &sipSelf, sipType_QListView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::setSelection(*a0,*a1) : sipCpp->setSelection(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setSelection, doc_QListView_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_visualRegionForSelection, "visualRegionForSelection(self, QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QListView_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QListView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QItemSelection, &a0))
        {
             ::QRegion*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRegion((sipSelfWasArg ? sipCpp-> ::QListView::visualRegionForSelection(*a0) : sipCpp->visualRegionForSelection(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_visualRegionForSelection, doc_QListView_visualRegionForSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_selectedIndexes, "selectedIndexes(self) -> object");

extern "C" {static PyObject *meth_QListView_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QListView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QListView, &sipCpp))
        {
             ::QModelIndexList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QModelIndexList((sipSelfWasArg ? sipCpp-> ::QListView::selectedIndexes() : sipCpp->selectedIndexes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_selectedIndexes, doc_QListView_selectedIndexes);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_updateGeometries, "updateGeometries(self)");

extern "C" {static PyObject *meth_QListView_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QListView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QListView, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::updateGeometries() : sipCpp->updateGeometries());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_updateGeometries, doc_QListView_updateGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_isIndexHidden, "isIndexHidden(self, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QListView_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QListView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QListView::isIndexHidden(*a0) : sipCpp->isIndexHidden(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_isIndexHidden, doc_QListView_isIndexHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setBatchSize, "setBatchSize(self, int)");

extern "C" {static PyObject *meth_QListView_setBatchSize(PyObject *, PyObject *);}
static PyObject *meth_QListView_setBatchSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBatchSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setBatchSize, doc_QListView_setBatchSize);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_batchSize, "batchSize(self) -> int");

extern "C" {static PyObject *meth_QListView_batchSize(PyObject *, PyObject *);}
static PyObject *meth_QListView_batchSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->batchSize();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_batchSize, doc_QListView_batchSize);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setWordWrap, "setWordWrap(self, bool)");

extern "C" {static PyObject *meth_QListView_setWordWrap(PyObject *, PyObject *);}
static PyObject *meth_QListView_setWordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWordWrap(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setWordWrap, doc_QListView_setWordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_wordWrap, "wordWrap(self) -> bool");

extern "C" {static PyObject *meth_QListView_wordWrap(PyObject *, PyObject *);}
static PyObject *meth_QListView_wordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wordWrap();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_wordWrap, doc_QListView_wordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setSelectionRectVisible, "setSelectionRectVisible(self, bool)");

extern "C" {static PyObject *meth_QListView_setSelectionRectVisible(PyObject *, PyObject *);}
static PyObject *meth_QListView_setSelectionRectVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSelectionRectVisible(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setSelectionRectVisible, doc_QListView_setSelectionRectVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_isSelectionRectVisible, "isSelectionRectVisible(self) -> bool");

extern "C" {static PyObject *meth_QListView_isSelectionRectVisible(PyObject *, PyObject *);}
static PyObject *meth_QListView_isSelectionRectVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSelectionRectVisible();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_isSelectionRectVisible, doc_QListView_isSelectionRectVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_selectionChanged, "selectionChanged(self, QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QListView_selectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QListView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QItemSelection* a0;
        const  ::QItemSelection* a1;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QListView, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::selectionChanged(*a0,*a1) : sipCpp->selectionChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_selectionChanged, doc_QListView_selectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_currentChanged, "currentChanged(self, QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QListView_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QListView_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QModelIndex* a0;
        const  ::QModelIndex* a1;
         ::QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9J9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QListView::currentChanged(*a0,*a1) : sipCpp->currentChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_currentChanged, doc_QListView_currentChanged);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QListView(void *, const sipTypeDef *);}
static void *cast_QListView(void *sipCppV, const sipTypeDef *targetType)
{
     ::QListView *sipCpp = reinterpret_cast< ::QListView *>(sipCppV);

    if (targetType == sipType_QAbstractItemView)
        return static_cast< ::QAbstractItemView *>(sipCpp);

    if (targetType == sipType_QAbstractScrollArea)
        return static_cast< ::QAbstractScrollArea *>(sipCpp);

    if (targetType == sipType_QFrame)
        return static_cast< ::QFrame *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QListView(void *, int);}
static void release_QListView(void *sipCppV, int)
{
     ::QListView *sipCpp = reinterpret_cast< ::QListView *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QListView(sipSimpleWrapper *);}
static void dealloc_QListView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQListView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QListView(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QListView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QListView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQListView *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQListView(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QListView[] = {{5, 255, 1}};


static PyMethodDef methods_QListView[] = {
    {SIP_MLNAME_CAST(sipName_batchSize), meth_QListView_batchSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_batchSize)},
    {SIP_MLNAME_CAST(sipName_clearPropertyFlags), meth_QListView_clearPropertyFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_clearPropertyFlags)},
    {SIP_MLNAME_CAST(sipName_currentChanged), meth_QListView_currentChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_currentChanged)},
    {SIP_MLNAME_CAST(sipName_dataChanged), meth_QListView_dataChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_dataChanged)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QListView_dragLeaveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QListView_dragMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QListView_dropEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_dropEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QListView_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_event)},
    {SIP_MLNAME_CAST(sipName_flow), meth_QListView_flow, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_flow)},
    {SIP_MLNAME_CAST(sipName_gridSize), meth_QListView_gridSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_gridSize)},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), meth_QListView_horizontalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_horizontalOffset)},
    {SIP_MLNAME_CAST(sipName_indexAt), meth_QListView_indexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_indexAt)},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), meth_QListView_isIndexHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_isIndexHidden)},
    {SIP_MLNAME_CAST(sipName_isRowHidden), meth_QListView_isRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_isRowHidden)},
    {SIP_MLNAME_CAST(sipName_isSelectionRectVisible), meth_QListView_isSelectionRectVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_isSelectionRectVisible)},
    {SIP_MLNAME_CAST(sipName_isWrapping), meth_QListView_isWrapping, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_isWrapping)},
    {SIP_MLNAME_CAST(sipName_layoutMode), meth_QListView_layoutMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_layoutMode)},
    {SIP_MLNAME_CAST(sipName_modelColumn), meth_QListView_modelColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_modelColumn)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QListView_mouseMoveEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QListView_mouseReleaseEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), meth_QListView_moveCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_moveCursor)},
    {SIP_MLNAME_CAST(sipName_movement), meth_QListView_movement, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_movement)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QListView_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_rectForIndex), meth_QListView_rectForIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_rectForIndex)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QListView_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_reset)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QListView_resizeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_resizeMode), meth_QListView_resizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_resizeMode)},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), meth_QListView_rowsAboutToBeRemoved, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_rowsAboutToBeRemoved)},
    {SIP_MLNAME_CAST(sipName_rowsInserted), meth_QListView_rowsInserted, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_rowsInserted)},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QListView_scrollContentsBy, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_scrollTo), (PyCFunction)meth_QListView_scrollTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_scrollTo)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QListView_selectedIndexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_selectedIndexes)},
    {SIP_MLNAME_CAST(sipName_selectionChanged), meth_QListView_selectionChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_selectionChanged)},
    {SIP_MLNAME_CAST(sipName_setBatchSize), meth_QListView_setBatchSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setBatchSize)},
    {SIP_MLNAME_CAST(sipName_setFlow), meth_QListView_setFlow, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setFlow)},
    {SIP_MLNAME_CAST(sipName_setGridSize), meth_QListView_setGridSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setGridSize)},
    {SIP_MLNAME_CAST(sipName_setLayoutMode), meth_QListView_setLayoutMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setLayoutMode)},
    {SIP_MLNAME_CAST(sipName_setModelColumn), meth_QListView_setModelColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setModelColumn)},
    {SIP_MLNAME_CAST(sipName_setMovement), meth_QListView_setMovement, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setMovement)},
    {SIP_MLNAME_CAST(sipName_setPositionForIndex), meth_QListView_setPositionForIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setPositionForIndex)},
    {SIP_MLNAME_CAST(sipName_setResizeMode), meth_QListView_setResizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setResizeMode)},
    {SIP_MLNAME_CAST(sipName_setRootIndex), meth_QListView_setRootIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setRootIndex)},
    {SIP_MLNAME_CAST(sipName_setRowHidden), meth_QListView_setRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setRowHidden)},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QListView_setSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setSelection)},
    {SIP_MLNAME_CAST(sipName_setSelectionRectVisible), meth_QListView_setSelectionRectVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setSelectionRectVisible)},
    {SIP_MLNAME_CAST(sipName_setSpacing), meth_QListView_setSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setSpacing)},
    {SIP_MLNAME_CAST(sipName_setUniformItemSizes), meth_QListView_setUniformItemSizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setUniformItemSizes)},
    {SIP_MLNAME_CAST(sipName_setViewMode), meth_QListView_setViewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setViewMode)},
    {SIP_MLNAME_CAST(sipName_setWordWrap), meth_QListView_setWordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setWordWrap)},
    {SIP_MLNAME_CAST(sipName_setWrapping), meth_QListView_setWrapping, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setWrapping)},
    {SIP_MLNAME_CAST(sipName_spacing), meth_QListView_spacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_spacing)},
    {SIP_MLNAME_CAST(sipName_startDrag), meth_QListView_startDrag, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_startDrag)},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QListView_timerEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_timerEvent)},
    {SIP_MLNAME_CAST(sipName_uniformItemSizes), meth_QListView_uniformItemSizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_uniformItemSizes)},
    {SIP_MLNAME_CAST(sipName_updateGeometries), meth_QListView_updateGeometries, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_updateGeometries)},
    {SIP_MLNAME_CAST(sipName_verticalOffset), meth_QListView_verticalOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_verticalOffset)},
    {SIP_MLNAME_CAST(sipName_viewMode), meth_QListView_viewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_viewMode)},
    {SIP_MLNAME_CAST(sipName_viewOptions), meth_QListView_viewOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_viewOptions)},
    {SIP_MLNAME_CAST(sipName_visualRect), meth_QListView_visualRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_visualRect)},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), meth_QListView_visualRegionForSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_visualRegionForSelection)},
    {SIP_MLNAME_CAST(sipName_wordWrap), meth_QListView_wordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_wordWrap)}
};

static sipEnumMemberDef enummembers_QListView[] = {
    {sipName_Adjust, static_cast<int>( ::QListView::Adjust), 318},
    {sipName_Batched, static_cast<int>( ::QListView::Batched), 316},
    {sipName_Fixed, static_cast<int>( ::QListView::Fixed), 318},
    {sipName_Free, static_cast<int>( ::QListView::Free), 317},
    {sipName_IconMode, static_cast<int>( ::QListView::IconMode), 319},
    {sipName_LeftToRight, static_cast<int>( ::QListView::LeftToRight), 315},
    {sipName_ListMode, static_cast<int>( ::QListView::ListMode), 319},
    {sipName_SinglePass, static_cast<int>( ::QListView::SinglePass), 316},
    {sipName_Snap, static_cast<int>( ::QListView::Snap), 317},
    {sipName_Static, static_cast<int>( ::QListView::Static), 317},
    {sipName_TopToBottom, static_cast<int>( ::QListView::TopToBottom), 315},
};

PyDoc_STRVAR(doc_QListView, "\1QListView(parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QListView[] = {
    {"indexesMoved(QModelIndexList)", "\1indexesMoved(self, object)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QListView = {
    & ::QListView::staticMetaObject,
    0,
    signals_QListView
};


sipClassTypeDef sipTypeDef_QtGui_QListView = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QListView,
        {0},
        &plugin_QListView
    },
    {
        sipNameNr_QListView,
        {0, 0, 1},
        61, methods_QListView,
        11, enummembers_QListView,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QListView,
    -1,
    -1,
    supers_QListView,
    0,
    init_type_QListView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QListView,
    0,
    0,
    0,
    release_QListView,
    cast_QListView,
    0,
    0,
    0,
    0,
    0,
    0
};

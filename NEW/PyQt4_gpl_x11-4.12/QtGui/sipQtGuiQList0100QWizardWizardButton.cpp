/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 282 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwizard.sip"
#include <qwizard.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQList0100QWizardWizardButton.cpp"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwizard.sip"
#include <qwizard.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQList0100QWizardWizardButton.cpp"


extern "C" {static void assign_QList_0100QWizard_WizardButton(void *, SIP_SSIZE_T, const void *);}
static void assign_QList_0100QWizard_WizardButton(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::QList< ::QWizard::WizardButton> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::QList< ::QWizard::WizardButton> *>(sipSrc);
}


extern "C" {static void *array_QList_0100QWizard_WizardButton(SIP_SSIZE_T);}
static void *array_QList_0100QWizard_WizardButton(SIP_SSIZE_T sipNrElem)
{
    return new  ::QList< ::QWizard::WizardButton>[sipNrElem];
}


extern "C" {static void *copy_QList_0100QWizard_WizardButton(const void *, SIP_SSIZE_T);}
static void *copy_QList_0100QWizard_WizardButton(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QList< ::QWizard::WizardButton>(reinterpret_cast<const  ::QList< ::QWizard::WizardButton> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QList_0100QWizard_WizardButton(void *, int);}
static void release_QList_0100QWizard_WizardButton(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast< ::QList< ::QWizard::WizardButton> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QList_0100QWizard_WizardButton(PyObject *, void **, int *, PyObject *);}
static int convertTo_QList_0100QWizard_WizardButton(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::QList< ::QWizard::WizardButton> **sipCppPtr = reinterpret_cast< ::QList< ::QWizard::WizardButton> **>(sipCppPtrV);

#line 312 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwizard.sip"
    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
    {
        if (!PyList_Check(sipPy))
            return 0;

        for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i)
            if (!sipCanConvertToEnum(PyList_GET_ITEM(sipPy, i), sipType_QWizard_WizardButton))
                return 0;

        return 1;
    }

    QList<QWizard::WizardButton> *ql = new QList<QWizard::WizardButton>;
 
    for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i)
    {
        long l = SIPLong_AsLong(PyList_GET_ITEM(sipPy, i));
        ql->append(static_cast<QWizard::WizardButton>(l));
    }
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
#line 98 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQList0100QWizardWizardButton.cpp"
}


extern "C" {static PyObject *convertFrom_QList_0100QWizard_WizardButton(void *, PyObject *);}
static PyObject *convertFrom_QList_0100QWizard_WizardButton(void *sipCppV, PyObject *)
{
    ::QList< ::QWizard::WizardButton> *sipCpp = reinterpret_cast< ::QList< ::QWizard::WizardButton> *>(sipCppV);

#line 286 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwizard.sip"
    // Create the list.
    PyObject *l;

    if ((l = PyList_New(sipCpp->size())) == NULL)
        return NULL;

    // Set the list elements.
    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QWizard::WizardButton e = sipCpp->at(i);
        PyObject *eobj;

        if ((eobj = sipConvertFromEnum(e, sipType_QWizard_WizardButton)) == NULL)
        {
            Py_DECREF(l);

            return NULL;
        }

        PyList_SET_ITEM(l, i, eobj);
    }

    return l;
#line 131 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQList0100QWizardWizardButton.cpp"
}


sipMappedTypeDef sipTypeDef_QtGui_QList_0100QWizard_WizardButton = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_9794,     /* QList<QWizard::WizardButton> */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QList_0100QWizard_WizardButton,
    array_QList_0100QWizard_WizardButton,
    copy_QList_0100QWizard_WizardButton,
    release_QList_0100QWizard_WizardButton,
    convertTo_QList_0100QWizard_WizardButton,
    convertFrom_QList_0100QWizard_WizardButton
};

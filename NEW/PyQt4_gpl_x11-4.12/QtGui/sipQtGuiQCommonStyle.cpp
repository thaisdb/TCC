/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qcommonstyle.sip"
#include <qcommonstyle.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 1677 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 1361 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 475 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qapplication.sip"
#include <qapplication.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 114 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 117 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 120 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQCommonStyle.cpp"


class sipQCommonStyle : public  ::QCommonStyle
{
public:
    sipQCommonStyle();
    virtual ~sipQCommonStyle();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);
    void polish( ::QWidget*);
    void unpolish( ::QWidget*);
    void polish( ::QApplication*);
    void unpolish( ::QApplication*);
    void polish( ::QPalette&);
     ::QRect itemTextRect(const  ::QFontMetrics&,const  ::QRect&,int,bool,const  ::QString&) const;
     ::QRect itemPixmapRect(const  ::QRect&,int,const  ::QPixmap&) const;
    void drawItemText( ::QPainter*,const  ::QRect&,int,const  ::QPalette&,bool,const  ::QString&, ::QPalette::ColorRole) const;
    void drawItemPixmap( ::QPainter*,const  ::QRect&,int,const  ::QPixmap&) const;
     ::QPalette standardPalette() const;
    void drawPrimitive( ::QStyle::PrimitiveElement,const  ::QStyleOption*, ::QPainter*,const  ::QWidget*) const;
    void drawControl( ::QStyle::ControlElement,const  ::QStyleOption*, ::QPainter*,const  ::QWidget*) const;
     ::QRect subElementRect( ::QStyle::SubElement,const  ::QStyleOption*,const  ::QWidget*) const;
    void drawComplexControl( ::QStyle::ComplexControl,const  ::QStyleOptionComplex*, ::QPainter*,const  ::QWidget*) const;
     ::QStyle::SubControl hitTestComplexControl( ::QStyle::ComplexControl,const  ::QStyleOptionComplex*,const  ::QPoint&,const  ::QWidget*) const;
     ::QRect subControlRect( ::QStyle::ComplexControl,const  ::QStyleOptionComplex*, ::QStyle::SubControl,const  ::QWidget*) const;
    int pixelMetric( ::QStyle::PixelMetric,const  ::QStyleOption*,const  ::QWidget*) const;
     ::QSize sizeFromContents( ::QStyle::ContentsType,const  ::QStyleOption*,const  ::QSize&,const  ::QWidget*) const;
    int styleHint( ::QStyle::StyleHint,const  ::QStyleOption*,const  ::QWidget*, ::QStyleHintReturn*) const;
     ::QPixmap standardPixmap( ::QStyle::StandardPixmap,const  ::QStyleOption*,const  ::QWidget*) const;
     ::QPixmap generatedIconPixmap( ::QIcon::Mode,const  ::QPixmap&,const  ::QStyleOption*) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCommonStyle(const sipQCommonStyle &);
    sipQCommonStyle &operator = (const sipQCommonStyle &);

    char sipPyMethods[28];
};

sipQCommonStyle::sipQCommonStyle():  ::QCommonStyle(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCommonStyle::~sipQCommonStyle()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQCommonStyle::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QCommonStyle);
}

int sipQCommonStyle::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QCommonStyle::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QCommonStyle,_c,_id,_a);

    return _id;
}

void *sipQCommonStyle::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QCommonStyle, _clname)) ? this :  ::QCommonStyle::qt_metacast(_clname);
}

void sipQCommonStyle::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QCommonStyle::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QCommonStyle::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QCommonStyle::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QCommonStyle::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QCommonStyle::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQCommonStyle::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QCommonStyle::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipQCommonStyle::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QCommonStyle::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::polish( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_polish);

    if (!sipMeth)
    {
         ::QCommonStyle::polish(a0);
        return;
    }

    extern void sipVH_QtGui_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtGui_56(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::unpolish( ::QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_unpolish);

    if (!sipMeth)
    {
         ::QCommonStyle::unpolish(a0);
        return;
    }

    extern void sipVH_QtGui_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    sipVH_QtGui_56(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::polish( ::QApplication*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_polish);

    if (!sipMeth)
    {
         ::QCommonStyle::polish(a0);
        return;
    }

    extern void sipVH_QtGui_117(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QApplication*);

    sipVH_QtGui_117(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::unpolish( ::QApplication*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_unpolish);

    if (!sipMeth)
    {
         ::QCommonStyle::unpolish(a0);
        return;
    }

    extern void sipVH_QtGui_117(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QApplication*);

    sipVH_QtGui_117(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::polish( ::QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_polish);

    if (!sipMeth)
    {
         ::QCommonStyle::polish(a0);
        return;
    }

    extern void sipVH_QtGui_118(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPalette&);

    sipVH_QtGui_118(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QRect sipQCommonStyle::itemTextRect(const  ::QFontMetrics& a0,const  ::QRect& a1,int a2,bool a3,const  ::QString& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_itemTextRect);

    if (!sipMeth)
        return  ::QCommonStyle::itemTextRect(a0,a1,a2,a3,a4);

    extern  ::QRect sipVH_QtGui_119(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QFontMetrics&,const  ::QRect&,int,bool,const  ::QString&);

    return sipVH_QtGui_119(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

 ::QRect sipQCommonStyle::itemPixmapRect(const  ::QRect& a0,int a1,const  ::QPixmap& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_itemPixmapRect);

    if (!sipMeth)
        return  ::QCommonStyle::itemPixmapRect(a0,a1,a2);

    extern  ::QRect sipVH_QtGui_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect&,int,const  ::QPixmap&);

    return sipVH_QtGui_120(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQCommonStyle::drawItemText( ::QPainter*a0,const  ::QRect& a1,int a2,const  ::QPalette& a3,bool a4,const  ::QString& a5, ::QPalette::ColorRole a6) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_drawItemText);

    if (!sipMeth)
    {
         ::QCommonStyle::drawItemText(a0,a1,a2,a3,a4,a5,a6);
        return;
    }

    extern void sipVH_QtGui_121(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRect&,int,const  ::QPalette&,bool,const  ::QString&, ::QPalette::ColorRole);

    sipVH_QtGui_121(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3, a4, a5, a6);
}

void sipQCommonStyle::drawItemPixmap( ::QPainter*a0,const  ::QRect& a1,int a2,const  ::QPixmap& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_drawItemPixmap);

    if (!sipMeth)
    {
         ::QCommonStyle::drawItemPixmap(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_122(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPainter*,const  ::QRect&,int,const  ::QPixmap&);

    sipVH_QtGui_122(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QPalette sipQCommonStyle::standardPalette() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_standardPalette);

    if (!sipMeth)
        return  ::QCommonStyle::standardPalette();

    extern  ::QPalette sipVH_QtGui_123(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_123(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQCommonStyle::drawPrimitive( ::QStyle::PrimitiveElement a0,const  ::QStyleOption*a1, ::QPainter*a2,const  ::QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_drawPrimitive);

    if (!sipMeth)
    {
         ::QCommonStyle::drawPrimitive(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_124(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::PrimitiveElement,const  ::QStyleOption*, ::QPainter*,const  ::QWidget*);

    sipVH_QtGui_124(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQCommonStyle::drawControl( ::QStyle::ControlElement a0,const  ::QStyleOption*a1, ::QPainter*a2,const  ::QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_drawControl);

    if (!sipMeth)
    {
         ::QCommonStyle::drawControl(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_125(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::ControlElement,const  ::QStyleOption*, ::QPainter*,const  ::QWidget*);

    sipVH_QtGui_125(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QRect sipQCommonStyle::subElementRect( ::QStyle::SubElement a0,const  ::QStyleOption*a1,const  ::QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_subElementRect);

    if (!sipMeth)
        return  ::QCommonStyle::subElementRect(a0,a1,a2);

    extern  ::QRect sipVH_QtGui_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::SubElement,const  ::QStyleOption*,const  ::QWidget*);

    return sipVH_QtGui_126(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQCommonStyle::drawComplexControl( ::QStyle::ComplexControl a0,const  ::QStyleOptionComplex*a1, ::QPainter*a2,const  ::QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_drawComplexControl);

    if (!sipMeth)
    {
         ::QCommonStyle::drawComplexControl(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_127(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::ComplexControl,const  ::QStyleOptionComplex*, ::QPainter*,const  ::QWidget*);

    sipVH_QtGui_127(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QStyle::SubControl sipQCommonStyle::hitTestComplexControl( ::QStyle::ComplexControl a0,const  ::QStyleOptionComplex*a1,const  ::QPoint& a2,const  ::QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_hitTestComplexControl);

    if (!sipMeth)
        return  ::QCommonStyle::hitTestComplexControl(a0,a1,a2,a3);

    extern  ::QStyle::SubControl sipVH_QtGui_128(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::ComplexControl,const  ::QStyleOptionComplex*,const  ::QPoint&,const  ::QWidget*);

    return sipVH_QtGui_128(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QRect sipQCommonStyle::subControlRect( ::QStyle::ComplexControl a0,const  ::QStyleOptionComplex*a1, ::QStyle::SubControl a2,const  ::QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_subControlRect);

    if (!sipMeth)
        return  ::QCommonStyle::subControlRect(a0,a1,a2,a3);

    extern  ::QRect sipVH_QtGui_129(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::ComplexControl,const  ::QStyleOptionComplex*, ::QStyle::SubControl,const  ::QWidget*);

    return sipVH_QtGui_129(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

int sipQCommonStyle::pixelMetric( ::QStyle::PixelMetric a0,const  ::QStyleOption*a1,const  ::QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_pixelMetric);

    if (!sipMeth)
        return  ::QCommonStyle::pixelMetric(a0,a1,a2);

    extern int sipVH_QtGui_130(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::PixelMetric,const  ::QStyleOption*,const  ::QWidget*);

    return sipVH_QtGui_130(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QSize sipQCommonStyle::sizeFromContents( ::QStyle::ContentsType a0,const  ::QStyleOption*a1,const  ::QSize& a2,const  ::QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_sizeFromContents);

    if (!sipMeth)
        return  ::QCommonStyle::sizeFromContents(a0,a1,a2,a3);

    extern  ::QSize sipVH_QtGui_131(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::ContentsType,const  ::QStyleOption*,const  ::QSize&,const  ::QWidget*);

    return sipVH_QtGui_131(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

int sipQCommonStyle::styleHint( ::QStyle::StyleHint a0,const  ::QStyleOption*a1,const  ::QWidget*a2, ::QStyleHintReturn*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_styleHint);

    if (!sipMeth)
        return  ::QCommonStyle::styleHint(a0,a1,a2,a3);

    extern int sipVH_QtGui_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::StyleHint,const  ::QStyleOption*,const  ::QWidget*, ::QStyleHintReturn*);

    return sipVH_QtGui_132(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2, a3);
}

 ::QPixmap sipQCommonStyle::standardPixmap( ::QStyle::StandardPixmap a0,const  ::QStyleOption*a1,const  ::QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_standardPixmap);

    if (!sipMeth)
        return  ::QCommonStyle::standardPixmap(a0,a1,a2);

    extern  ::QPixmap sipVH_QtGui_133(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QStyle::StandardPixmap,const  ::QStyleOption*,const  ::QWidget*);

    return sipVH_QtGui_133(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}

 ::QPixmap sipQCommonStyle::generatedIconPixmap( ::QIcon::Mode a0,const  ::QPixmap& a1,const  ::QStyleOption*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_generatedIconPixmap);

    if (!sipMeth)
        return  ::QCommonStyle::generatedIconPixmap(a0,a1,a2);

    extern  ::QPixmap sipVH_QtGui_134(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QIcon::Mode,const  ::QPixmap&,const  ::QStyleOption*);

    return sipVH_QtGui_134(sipGILState, 0, sipPySelf, sipMeth, a0, a1, a2);
}


PyDoc_STRVAR(doc_QCommonStyle_polish, "polish(self, QWidget)\n"
    "polish(self, QApplication)\n"
    "polish(self, QPalette) -> QPalette");

extern "C" {static PyObject *meth_QCommonStyle_polish(PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_polish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWidget* a0;
         ::QCommonStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QCommonStyle::polish(a0) : sipCpp->polish(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QApplication* a0;
         ::QCommonStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QApplication, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QCommonStyle::polish(a0) : sipCpp->polish(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QPalette* a0;
         ::QCommonStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QPalette, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QCommonStyle::polish(*a0) : sipCpp->polish(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(a0,sipType_QPalette,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_polish, doc_QCommonStyle_polish);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_unpolish, "unpolish(self, QWidget)\n"
    "unpolish(self, QApplication)");

extern "C" {static PyObject *meth_QCommonStyle_unpolish(PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_unpolish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWidget* a0;
         ::QCommonStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QCommonStyle::unpolish(a0) : sipCpp->unpolish(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QApplication* a0;
         ::QCommonStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QApplication, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QCommonStyle::unpolish(a0) : sipCpp->unpolish(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_unpolish, doc_QCommonStyle_unpolish);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_drawPrimitive, "drawPrimitive(self, QStyle.PrimitiveElement, QStyleOption, QPainter, widget: QWidget = None)");

extern "C" {static PyObject *meth_QCommonStyle_drawPrimitive(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_drawPrimitive(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::PrimitiveElement a0;
        const  ::QStyleOption* a1;
         ::QPainter* a2;
        const  ::QWidget* a3 = 0;
        const  ::QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J8|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_PrimitiveElement, &a0, sipType_QStyleOption, &a1, sipType_QPainter, &a2, sipType_QWidget, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QCommonStyle::drawPrimitive(a0,a1,a2,a3) : sipCpp->drawPrimitive(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_drawPrimitive, doc_QCommonStyle_drawPrimitive);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_drawControl, "drawControl(self, QStyle.ControlElement, QStyleOption, QPainter, widget: QWidget = None)");

extern "C" {static PyObject *meth_QCommonStyle_drawControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_drawControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::ControlElement a0;
        const  ::QStyleOption* a1;
         ::QPainter* a2;
        const  ::QWidget* a3 = 0;
        const  ::QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J8|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_ControlElement, &a0, sipType_QStyleOption, &a1, sipType_QPainter, &a2, sipType_QWidget, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QCommonStyle::drawControl(a0,a1,a2,a3) : sipCpp->drawControl(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_drawControl, doc_QCommonStyle_drawControl);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_subElementRect, "subElementRect(self, QStyle.SubElement, QStyleOption, widget: QWidget = None) -> QRect");

extern "C" {static PyObject *meth_QCommonStyle_subElementRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_subElementRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::SubElement a0;
        const  ::QStyleOption* a1;
        const  ::QWidget* a2 = 0;
        const  ::QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_SubElement, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect((sipSelfWasArg ? sipCpp-> ::QCommonStyle::subElementRect(a0,a1,a2) : sipCpp->subElementRect(a0,a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_subElementRect, doc_QCommonStyle_subElementRect);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_drawComplexControl, "drawComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex, QPainter, widget: QWidget = None)");

extern "C" {static PyObject *meth_QCommonStyle_drawComplexControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_drawComplexControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::ComplexControl a0;
        const  ::QStyleOptionComplex* a1;
         ::QPainter* a2;
        const  ::QWidget* a3 = 0;
        const  ::QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J8|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1, sipType_QPainter, &a2, sipType_QWidget, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QCommonStyle::drawComplexControl(a0,a1,a2,a3) : sipCpp->drawComplexControl(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_drawComplexControl, doc_QCommonStyle_drawComplexControl);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_hitTestComplexControl, "hitTestComplexControl(self, QStyle.ComplexControl, QStyleOptionComplex, QPoint, widget: QWidget = None) -> QStyle.SubControl");

extern "C" {static PyObject *meth_QCommonStyle_hitTestComplexControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_hitTestComplexControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::ComplexControl a0;
        const  ::QStyleOptionComplex* a1;
        const  ::QPoint* a2;
        const  ::QWidget* a3 = 0;
        const  ::QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J9|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1, sipType_QPoint, &a2, sipType_QWidget, &a3))
        {
             ::QStyle::SubControl sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QCommonStyle::hitTestComplexControl(a0,a1,*a2,a3) : sipCpp->hitTestComplexControl(a0,a1,*a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QStyle_SubControl);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_hitTestComplexControl, doc_QCommonStyle_hitTestComplexControl);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_subControlRect, "subControlRect(self, QStyle.ComplexControl, QStyleOptionComplex, QStyle.SubControl, widget: QWidget = None) -> QRect");

extern "C" {static PyObject *meth_QCommonStyle_subControlRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_subControlRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::ComplexControl a0;
        const  ::QStyleOptionComplex* a1;
         ::QStyle::SubControl a2;
        const  ::QWidget* a3 = 0;
        const  ::QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8E|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1, sipType_QStyle_SubControl, &a2, sipType_QWidget, &a3))
        {
             ::QRect*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QRect((sipSelfWasArg ? sipCpp-> ::QCommonStyle::subControlRect(a0,a1,a2,a3) : sipCpp->subControlRect(a0,a1,a2,a3)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_subControlRect, doc_QCommonStyle_subControlRect);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_sizeFromContents, "sizeFromContents(self, QStyle.ContentsType, QStyleOption, QSize, widget: QWidget = None) -> QSize");

extern "C" {static PyObject *meth_QCommonStyle_sizeFromContents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_sizeFromContents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::ContentsType a0;
        const  ::QStyleOption* a1;
        const  ::QSize* a2;
        const  ::QWidget* a3 = 0;
        const  ::QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J9|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_ContentsType, &a0, sipType_QStyleOption, &a1, sipType_QSize, &a2, sipType_QWidget, &a3))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QCommonStyle::sizeFromContents(a0,a1,*a2,a3) : sipCpp->sizeFromContents(a0,a1,*a2,a3)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_sizeFromContents, doc_QCommonStyle_sizeFromContents);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_pixelMetric, "pixelMetric(self, QStyle.PixelMetric, option: QStyleOption = None, widget: QWidget = None) -> int");

extern "C" {static PyObject *meth_QCommonStyle_pixelMetric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_pixelMetric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::PixelMetric a0;
        const  ::QStyleOption* a1 = 0;
        const  ::QWidget* a2 = 0;
        const  ::QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_PixelMetric, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QCommonStyle::pixelMetric(a0,a1,a2) : sipCpp->pixelMetric(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_pixelMetric, doc_QCommonStyle_pixelMetric);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_styleHint, "styleHint(self, QStyle.StyleHint, option: QStyleOption = None, widget: QWidget = None, returnData: QStyleHintReturn = None) -> int");

extern "C" {static PyObject *meth_QCommonStyle_styleHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_styleHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::StyleHint a0;
        const  ::QStyleOption* a1 = 0;
        const  ::QWidget* a2 = 0;
         ::QStyleHintReturn* a3 = 0;
        const  ::QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_widget,
            sipName_returnData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_StyleHint, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2, sipType_QStyleHintReturn, &a3))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QCommonStyle::styleHint(a0,a1,a2,a3) : sipCpp->styleHint(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_styleHint, doc_QCommonStyle_styleHint);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_standardPixmap, "standardPixmap(self, QStyle.StandardPixmap, option: QStyleOption = None, widget: QWidget = None) -> QPixmap");

extern "C" {static PyObject *meth_QCommonStyle_standardPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_standardPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QStyle::StandardPixmap a0;
        const  ::QStyleOption* a1 = 0;
        const  ::QWidget* a2 = 0;
        const  ::QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_StandardPixmap, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
             ::QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPixmap((sipSelfWasArg ? sipCpp-> ::QCommonStyle::standardPixmap(a0,a1,a2) : sipCpp->standardPixmap(a0,a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_standardPixmap, doc_QCommonStyle_standardPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_generatedIconPixmap, "generatedIconPixmap(self, QIcon.Mode, QPixmap, QStyleOption) -> QPixmap");

extern "C" {static PyObject *meth_QCommonStyle_generatedIconPixmap(PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_generatedIconPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QIcon::Mode a0;
        const  ::QPixmap* a1;
        const  ::QStyleOption* a2;
        const  ::QCommonStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QIcon_Mode, &a0, sipType_QPixmap, &a1, sipType_QStyleOption, &a2))
        {
             ::QPixmap*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QPixmap((sipSelfWasArg ? sipCpp-> ::QCommonStyle::generatedIconPixmap(a0,*a1,a2) : sipCpp->generatedIconPixmap(a0,*a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_generatedIconPixmap, doc_QCommonStyle_generatedIconPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_standardIconImplementation, "standardIconImplementation(self, QStyle.StandardPixmap, option: QStyleOption = None, widget: QWidget = None) -> QIcon");

extern "C" {static PyObject *meth_QCommonStyle_standardIconImplementation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_standardIconImplementation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QStyle::StandardPixmap a0;
        const  ::QStyleOption* a1 = 0;
        const  ::QWidget* a2 = 0;
        const  ::QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "pE|J8J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_StandardPixmap, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
             ::QIcon*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QIcon(sipCpp->standardIconImplementation(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_standardIconImplementation, doc_QCommonStyle_standardIconImplementation);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QCommonStyle(void *, const sipTypeDef *);}
static void *cast_QCommonStyle(void *sipCppV, const sipTypeDef *targetType)
{
     ::QCommonStyle *sipCpp = reinterpret_cast< ::QCommonStyle *>(sipCppV);

    if (targetType == sipType_QStyle)
        return static_cast< ::QStyle *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCommonStyle(void *, int);}
static void release_QCommonStyle(void *sipCppV, int)
{
     ::QCommonStyle *sipCpp = reinterpret_cast< ::QCommonStyle *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QCommonStyle(sipSimpleWrapper *);}
static void dealloc_QCommonStyle(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQCommonStyle *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QCommonStyle(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QCommonStyle(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCommonStyle(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQCommonStyle *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQCommonStyle();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCommonStyle[] = {{473, 255, 1}};


static PyMethodDef methods_QCommonStyle[] = {
    {SIP_MLNAME_CAST(sipName_drawComplexControl), (PyCFunction)meth_QCommonStyle_drawComplexControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_drawComplexControl)},
    {SIP_MLNAME_CAST(sipName_drawControl), (PyCFunction)meth_QCommonStyle_drawControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_drawControl)},
    {SIP_MLNAME_CAST(sipName_drawPrimitive), (PyCFunction)meth_QCommonStyle_drawPrimitive, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_drawPrimitive)},
    {SIP_MLNAME_CAST(sipName_generatedIconPixmap), meth_QCommonStyle_generatedIconPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommonStyle_generatedIconPixmap)},
    {SIP_MLNAME_CAST(sipName_hitTestComplexControl), (PyCFunction)meth_QCommonStyle_hitTestComplexControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_hitTestComplexControl)},
    {SIP_MLNAME_CAST(sipName_pixelMetric), (PyCFunction)meth_QCommonStyle_pixelMetric, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_pixelMetric)},
    {SIP_MLNAME_CAST(sipName_polish), meth_QCommonStyle_polish, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommonStyle_polish)},
    {SIP_MLNAME_CAST(sipName_sizeFromContents), (PyCFunction)meth_QCommonStyle_sizeFromContents, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_sizeFromContents)},
    {SIP_MLNAME_CAST(sipName_standardIconImplementation), (PyCFunction)meth_QCommonStyle_standardIconImplementation, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_standardIconImplementation)},
    {SIP_MLNAME_CAST(sipName_standardPixmap), (PyCFunction)meth_QCommonStyle_standardPixmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_standardPixmap)},
    {SIP_MLNAME_CAST(sipName_styleHint), (PyCFunction)meth_QCommonStyle_styleHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_styleHint)},
    {SIP_MLNAME_CAST(sipName_subControlRect), (PyCFunction)meth_QCommonStyle_subControlRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_subControlRect)},
    {SIP_MLNAME_CAST(sipName_subElementRect), (PyCFunction)meth_QCommonStyle_subElementRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_subElementRect)},
    {SIP_MLNAME_CAST(sipName_unpolish), meth_QCommonStyle_unpolish, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommonStyle_unpolish)}
};

PyDoc_STRVAR(doc_QCommonStyle, "\1QCommonStyle()");


static pyqt4ClassPluginDef plugin_QCommonStyle = {
    & ::QCommonStyle::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QCommonStyle = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QCommonStyle,
        {0},
        &plugin_QCommonStyle
    },
    {
        sipNameNr_QCommonStyle,
        {0, 0, 1},
        14, methods_QCommonStyle,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QCommonStyle,
    -1,
    -1,
    supers_QCommonStyle,
    0,
    init_type_QCommonStyle,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCommonStyle,
    0,
    0,
    0,
    release_QCommonStyle,
    cast_QCommonStyle,
    0,
    0,
    0,
    0,
    0,
    0
};

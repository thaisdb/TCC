/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfiledialog.sip"
#include <qfiledialog.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfiledialog.sip"
#include <qfiledialog.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qdir.sip"
#include <qdir.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 27 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstractproxymodel.sip"
#include <qabstractproxymodel.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 98 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfileiconprovider.sip"
#include <qfileiconprovider.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qdir.sip"
#include <qdir.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 618 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 561 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 596 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 574 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 474 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 28 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 114 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 117 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 120 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 123 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 126 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 129 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 132 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 135 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 138 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 141 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 144 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 147 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 647 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 607 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 739 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 792 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 765 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 781 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 854 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 403 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 548 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 524 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 505 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 347 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 252 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 189 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 52 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 192 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 195 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 198 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 201 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 204 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 207 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 210 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 213 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 216 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 219 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 222 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 225 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 228 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 231 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 234 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 237 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 240 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 243 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 246 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"


class sipQFileDialog : public  ::QFileDialog
{
public:
    sipQFileDialog( ::QWidget*, ::Qt::WindowFlags);
    sipQFileDialog( ::QWidget*,const  ::QString&,const  ::QString&,const  ::QString&);
    virtual ~sipQFileDialog();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const  ::QFont&);
    void paletteChange(const  ::QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    void inputMethodEvent( ::QInputMethodEvent*);
    void changeEvent( ::QEvent*);
    void hideEvent( ::QHideEvent*);
    void showEvent( ::QShowEvent*);
    void dropEvent( ::QDropEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void actionEvent( ::QActionEvent*);
    void tabletEvent( ::QTabletEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void closeEvent( ::QCloseEvent*);
    void resizeEvent( ::QResizeEvent*);
    void moveEvent( ::QMoveEvent*);
    void paintEvent( ::QPaintEvent*);
    void leaveEvent( ::QEvent*);
    void enterEvent( ::QEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void focusInEvent( ::QFocusEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void wheelEvent( ::QWheelEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mousePressEvent( ::QMouseEvent*);
    int heightForWidth(int) const;
     ::QSize minimumSizeHint() const;
     ::QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
     ::QPaintEngine* paintEngine() const;
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);
    void done(int);
    void accept();
    void reject();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFileDialog(const sipQFileDialog &);
    sipQFileDialog &operator = (const sipQFileDialog &);

    char sipPyMethods[50];
};

sipQFileDialog::sipQFileDialog( ::QWidget*a0, ::Qt::WindowFlags a1):  ::QFileDialog(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFileDialog::sipQFileDialog( ::QWidget*a0,const  ::QString& a1,const  ::QString& a2,const  ::QString& a3):  ::QFileDialog(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFileDialog::~sipQFileDialog()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQFileDialog::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QFileDialog);
}

int sipQFileDialog::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QFileDialog::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QFileDialog,_c,_id,_a);

    return _id;
}

void *sipQFileDialog::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QFileDialog, _clname)) ? this :  ::QFileDialog::qt_metacast(_clname);
}

void sipQFileDialog::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
         ::QFileDialog::languageChange();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQFileDialog::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
         ::QFileDialog::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::fontChange(const  ::QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
         ::QFileDialog::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QFont&);

    sipVH_QtGui_33(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::paletteChange(const  ::QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
         ::QFileDialog::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPalette&);

    sipVH_QtGui_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
         ::QFileDialog::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQFileDialog::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QFileDialog::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_31(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQFileDialog::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QFileDialog::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtGui_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtGui_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QFileDialog::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtGui_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QFileDialog::changeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QFileDialog::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QFileDialog::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QFileDialog::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QFileDialog::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QFileDialog::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QFileDialog::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QFileDialog::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QFileDialog::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QFileDialog::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QFileDialog::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QFileDialog::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QFileDialog::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QFileDialog::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QFileDialog::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QFileDialog::enterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QFileDialog::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QFileDialog::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QFileDialog::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QFileDialog::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QFileDialog::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QFileDialog::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QFileDialog::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QFileDialog::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QFileDialog::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQFileDialog::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QFileDialog::heightForWidth(a0);

    extern int sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSize sipQFileDialog::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QFileDialog::minimumSizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQFileDialog::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QFileDialog::sizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQFileDialog::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QFileDialog::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQFileDialog::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QFileDialog::devType();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQFileDialog::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QFileDialog::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQFileDialog::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QFileDialog::metric(a0);

    extern int sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQFileDialog::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QFileDialog::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQFileDialog::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QFileDialog::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQFileDialog::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QFileDialog::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QFileDialog::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QFileDialog::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QFileDialog::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QFileDialog::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::done(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_done);

    if (!sipMeth)
    {
         ::QFileDialog::done(a0);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtGui_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQFileDialog::accept()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_accept);

    if (!sipMeth)
    {
         ::QFileDialog::accept();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQFileDialog::reject()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_reject);

    if (!sipMeth)
    {
         ::QFileDialog::reject();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QFileDialog_setDirectory, "setDirectory(self, str)\n"
    "setDirectory(self, QDir)");

extern "C" {static PyObject *meth_QFileDialog_setDirectory(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDirectory(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::QDir* a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QDir, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDirectory(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setDirectory, doc_QFileDialog_setDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_directory, "directory(self) -> QDir");

extern "C" {static PyObject *meth_QFileDialog_directory(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_directory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QDir*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDir(sipCpp->directory());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_directory, doc_QFileDialog_directory);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_selectFile, "selectFile(self, str)");

extern "C" {static PyObject *meth_QFileDialog_selectFile(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->selectFile(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectFile, doc_QFileDialog_selectFile);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_selectedFiles, "selectedFiles(self) -> List[str]");

extern "C" {static PyObject *meth_QFileDialog_selectedFiles(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectedFiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->selectedFiles());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectedFiles, doc_QFileDialog_selectedFiles);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setFilter, "setFilter(self, str)\n"
    "setFilter(self, QDir.Filters)");

extern "C" {static PyObject *meth_QFileDialog_setFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFilter(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QDir::Filters* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QDir_Filters, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFilter(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QDir_Filters,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setFilter, doc_QFileDialog_setFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setFilters, "setFilters(self, Sequence[str])");

extern "C" {static PyObject *meth_QFileDialog_setFilters(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFilters(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setFilters, doc_QFileDialog_setFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_filters, "filters(self) -> List[str]");

extern "C" {static PyObject *meth_QFileDialog_filters(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_filters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->filters());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_filters, doc_QFileDialog_filters);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_selectFilter, "selectFilter(self, str)");

extern "C" {static PyObject *meth_QFileDialog_selectFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->selectFilter(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectFilter, doc_QFileDialog_selectFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_selectedFilter, "selectedFilter(self) -> str");

extern "C" {static PyObject *meth_QFileDialog_selectedFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectedFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->selectedFilter());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectedFilter, doc_QFileDialog_selectedFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setViewMode, "setViewMode(self, QFileDialog.ViewMode)");

extern "C" {static PyObject *meth_QFileDialog_setViewMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setViewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QFileDialog::ViewMode a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_ViewMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setViewMode, doc_QFileDialog_setViewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_viewMode, "viewMode(self) -> QFileDialog.ViewMode");

extern "C" {static PyObject *meth_QFileDialog_viewMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_viewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QFileDialog::ViewMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->viewMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFileDialog_ViewMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_viewMode, doc_QFileDialog_viewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setFileMode, "setFileMode(self, QFileDialog.FileMode)");

extern "C" {static PyObject *meth_QFileDialog_setFileMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setFileMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QFileDialog::FileMode a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_FileMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFileMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setFileMode, doc_QFileDialog_setFileMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_fileMode, "fileMode(self) -> QFileDialog.FileMode");

extern "C" {static PyObject *meth_QFileDialog_fileMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_fileMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QFileDialog::FileMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fileMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFileDialog_FileMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_fileMode, doc_QFileDialog_fileMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setAcceptMode, "setAcceptMode(self, QFileDialog.AcceptMode)");

extern "C" {static PyObject *meth_QFileDialog_setAcceptMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setAcceptMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QFileDialog::AcceptMode a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_AcceptMode, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAcceptMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setAcceptMode, doc_QFileDialog_setAcceptMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_acceptMode, "acceptMode(self) -> QFileDialog.AcceptMode");

extern "C" {static PyObject *meth_QFileDialog_acceptMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_acceptMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QFileDialog::AcceptMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->acceptMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFileDialog_AcceptMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_acceptMode, doc_QFileDialog_acceptMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setReadOnly, "setReadOnly(self, bool)");

extern "C" {static PyObject *meth_QFileDialog_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setReadOnly(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setReadOnly, doc_QFileDialog_setReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_isReadOnly, "isReadOnly(self) -> bool");

extern "C" {static PyObject *meth_QFileDialog_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isReadOnly();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_isReadOnly, doc_QFileDialog_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setResolveSymlinks, "setResolveSymlinks(self, bool)");

extern "C" {static PyObject *meth_QFileDialog_setResolveSymlinks(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setResolveSymlinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setResolveSymlinks(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setResolveSymlinks, doc_QFileDialog_setResolveSymlinks);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_resolveSymlinks, "resolveSymlinks(self) -> bool");

extern "C" {static PyObject *meth_QFileDialog_resolveSymlinks(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_resolveSymlinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resolveSymlinks();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_resolveSymlinks, doc_QFileDialog_resolveSymlinks);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setConfirmOverwrite, "setConfirmOverwrite(self, bool)");

extern "C" {static PyObject *meth_QFileDialog_setConfirmOverwrite(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setConfirmOverwrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setConfirmOverwrite(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setConfirmOverwrite, doc_QFileDialog_setConfirmOverwrite);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_confirmOverwrite, "confirmOverwrite(self) -> bool");

extern "C" {static PyObject *meth_QFileDialog_confirmOverwrite(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_confirmOverwrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->confirmOverwrite();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_confirmOverwrite, doc_QFileDialog_confirmOverwrite);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setDefaultSuffix, "setDefaultSuffix(self, str)");

extern "C" {static PyObject *meth_QFileDialog_setDefaultSuffix(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setDefaultSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDefaultSuffix(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setDefaultSuffix, doc_QFileDialog_setDefaultSuffix);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_defaultSuffix, "defaultSuffix(self) -> str");

extern "C" {static PyObject *meth_QFileDialog_defaultSuffix(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_defaultSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->defaultSuffix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_defaultSuffix, doc_QFileDialog_defaultSuffix);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setHistory, "setHistory(self, Sequence[str])");

extern "C" {static PyObject *meth_QFileDialog_setHistory(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setHistory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHistory(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setHistory, doc_QFileDialog_setHistory);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_history, "history(self) -> List[str]");

extern "C" {static PyObject *meth_QFileDialog_history(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->history());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_history, doc_QFileDialog_history);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setItemDelegate, "setItemDelegate(self, QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QFileDialog_setItemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setItemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractItemDelegate* a0;
        PyObject *a0Keep;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QFileDialog, &sipCpp, &a0Keep, sipType_QAbstractItemDelegate, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemDelegate(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -22, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setItemDelegate, doc_QFileDialog_setItemDelegate);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_itemDelegate, "itemDelegate(self) -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QFileDialog_itemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_itemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QAbstractItemDelegate*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemDelegate();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_itemDelegate, doc_QFileDialog_itemDelegate);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setIconProvider, "setIconProvider(self, QFileIconProvider)");

extern "C" {static PyObject *meth_QFileDialog_setIconProvider(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setIconProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QFileIconProvider* a0;
        PyObject *a0Keep;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QFileDialog, &sipCpp, &a0Keep, sipType_QFileIconProvider, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIconProvider(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -23, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setIconProvider, doc_QFileDialog_setIconProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_iconProvider, "iconProvider(self) -> QFileIconProvider");

extern "C" {static PyObject *meth_QFileDialog_iconProvider(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_iconProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QFileIconProvider*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->iconProvider();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QFileIconProvider,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_iconProvider, doc_QFileDialog_iconProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setLabelText, "setLabelText(self, QFileDialog.DialogLabel, str)");

extern "C" {static PyObject *meth_QFileDialog_setLabelText(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setLabelText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QFileDialog::DialogLabel a0;
        const  ::QString* a1;
        int a1State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_DialogLabel, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLabelText(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setLabelText, doc_QFileDialog_setLabelText);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_labelText, "labelText(self, QFileDialog.DialogLabel) -> str");

extern "C" {static PyObject *meth_QFileDialog_labelText(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_labelText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QFileDialog::DialogLabel a0;
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_DialogLabel, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->labelText(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_labelText, doc_QFileDialog_labelText);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getExistingDirectory, "getExistingDirectory(parent: QWidget = None, caption: str = '', directory: str = '', options: QFileDialog.Options = QFileDialog.ShowDirsOnly) -> str");

extern "C" {static PyObject *meth_QFileDialog_getExistingDirectory(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getExistingDirectory(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::QFileDialog::Options a3def =  ::QFileDialog::ShowDirsOnly;
         ::QFileDialog::Options* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QFileDialog_Options, &a3, &a3State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QFileDialog::getExistingDirectory(a0,*a1,*a2,*a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QFileDialog_Options,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getExistingDirectory, doc_QFileDialog_getExistingDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getOpenFileName, "getOpenFileName(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '', selectedFilter: str = '', options: QFileDialog.Options = 0) -> str");

extern "C" {static PyObject *meth_QFileDialog_getOpenFileName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getOpenFileName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
         ::QFileDialog::Options a4def = 0;
         ::QFileDialog::Options* a4 = &a4def;
        int a4State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QFileDialog_Options, &a4, &a4State))
        {
             ::QString*sipRes = 0;

#line 147 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfiledialog.sip"
        Py_BEGIN_ALLOW_THREADS
        
        // Pass a 0 filter return.
        sipRes = new QString(QFileDialog::getOpenFileName(a0, *a1, *a2, *a3, 0, *a4));
        
        Py_END_ALLOW_THREADS
#line 2314 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(a4,sipType_QFileDialog_Options,a4State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
         ::QString* a4 = 0;
        int a4State = 0;
         ::QFileDialog::Options a5def = 0;
         ::QFileDialog::Options* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_selectedFilter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J0J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QFileDialog::getOpenFileName(a0,*a1,*a2,*a3,a4,*a5));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(a4,sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getOpenFileName, doc_QFileDialog_getOpenFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getOpenFileNameAndFilter, "getOpenFileNameAndFilter(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0) -> Tuple[QString, QString]");

extern "C" {static PyObject *meth_QFileDialog_getOpenFileNameAndFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getOpenFileNameAndFilter(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
         ::QFileDialog::Options a5def = 0;
         ::QFileDialog::Options* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State))
        {
            PyObject * sipRes = 0;

#line 158 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfiledialog.sip"
        QString *name;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        name = new QString(QFileDialog::getOpenFileName(a0, *a1, *a2, *a3, filter, *a5));
        
        Py_END_ALLOW_THREADS
        
        PyObject *name_obj = sipConvertFromNewType(name, sipType_QString, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (name_obj && filter_obj)
        {
        #if PY_VERSION_HEX >= 0x02040000
            sipRes = PyTuple_Pack(2, name_obj, filter_obj);
        #else
            sipRes = Py_BuildValue("(OO)", name_obj, filter_obj);
        #endif
        }
        
        Py_XDECREF(name_obj);
        Py_XDECREF(filter_obj);
#line 2438 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getOpenFileNameAndFilter, doc_QFileDialog_getOpenFileNameAndFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getOpenFileNames, "getOpenFileNames(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '', selectedFilter: str = '', options: QFileDialog.Options = 0) -> List[str]");

extern "C" {static PyObject *meth_QFileDialog_getOpenFileNames(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getOpenFileNames(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
         ::QFileDialog::Options a4def = 0;
         ::QFileDialog::Options* a4 = &a4def;
        int a4State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QFileDialog_Options, &a4, &a4State))
        {
             ::QStringList*sipRes = 0;

#line 185 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfiledialog.sip"
        Py_BEGIN_ALLOW_THREADS
        
        // Pass a 0 filter return.
        sipRes = new QStringList(QFileDialog::getOpenFileNames(a0, *a1, *a2, *a3, 0, *a4));
        
        Py_END_ALLOW_THREADS
#line 2499 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(a4,sipType_QFileDialog_Options,a4State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
         ::QString* a4 = 0;
        int a4State = 0;
         ::QFileDialog::Options a5def = 0;
         ::QFileDialog::Options* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_selectedFilter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J0J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList( ::QFileDialog::getOpenFileNames(a0,*a1,*a2,*a3,a4,*a5));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(a4,sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getOpenFileNames, doc_QFileDialog_getOpenFileNames);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getOpenFileNamesAndFilter, "getOpenFileNamesAndFilter(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0) -> Tuple[QString, QString]");

extern "C" {static PyObject *meth_QFileDialog_getOpenFileNamesAndFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getOpenFileNamesAndFilter(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
         ::QFileDialog::Options a5def = 0;
         ::QFileDialog::Options* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State))
        {
            PyObject * sipRes = 0;

#line 196 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfiledialog.sip"
        QStringList *names;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        names = new QStringList(QFileDialog::getOpenFileNames(a0, *a1, *a2, *a3, filter, *a5));
        
        Py_END_ALLOW_THREADS
        
        PyObject *names_obj = sipConvertFromNewType(names, sipType_QStringList, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (names_obj && filter_obj)
        {
        #if PY_VERSION_HEX >= 0x02040000
            sipRes = PyTuple_Pack(2, names_obj, filter_obj);
        #else
            sipRes = Py_BuildValue("(OO)", names_obj, filter_obj);
        #endif
        }
        
        Py_XDECREF(names_obj);
        Py_XDECREF(filter_obj);
#line 2623 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getOpenFileNamesAndFilter, doc_QFileDialog_getOpenFileNamesAndFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getSaveFileName, "getSaveFileName(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '', selectedFilter: str = '', options: QFileDialog.Options = 0) -> str");

extern "C" {static PyObject *meth_QFileDialog_getSaveFileName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getSaveFileName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
         ::QFileDialog::Options a4def = 0;
         ::QFileDialog::Options* a4 = &a4def;
        int a4State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QFileDialog_Options, &a4, &a4State))
        {
             ::QString*sipRes = 0;

#line 223 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfiledialog.sip"
        Py_BEGIN_ALLOW_THREADS
        
        // Pass a 0 filter return.
        sipRes = new QString(QFileDialog::getSaveFileName(a0, *a1, *a2, *a3, 0, *a4));
        
        Py_END_ALLOW_THREADS
#line 2684 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(a4,sipType_QFileDialog_Options,a4State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
         ::QString* a4 = 0;
        int a4State = 0;
         ::QFileDialog::Options a5def = 0;
         ::QFileDialog::Options* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_selectedFilter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J0J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString( ::QFileDialog::getSaveFileName(a0,*a1,*a2,*a3,a4,*a5));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(a4,sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getSaveFileName, doc_QFileDialog_getSaveFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getSaveFileNameAndFilter, "getSaveFileNameAndFilter(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '', initialFilter: str = '', options: Union[QFileDialog.Options, QFileDialog.Option] = 0) -> Tuple[QString, QString]");

extern "C" {static PyObject *meth_QFileDialog_getSaveFileNameAndFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getSaveFileNameAndFilter(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
         ::QFileDialog::Options a5def = 0;
         ::QFileDialog::Options* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State))
        {
            PyObject * sipRes = 0;

#line 234 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfiledialog.sip"
        QString *name;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        name = new QString(QFileDialog::getSaveFileName(a0, *a1, *a2, *a3, filter, *a5));
        
        Py_END_ALLOW_THREADS
        
        PyObject *name_obj = sipConvertFromNewType(name, sipType_QString, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (name_obj && filter_obj)
        {
        #if PY_VERSION_HEX >= 0x02040000
            sipRes = PyTuple_Pack(2, name_obj, filter_obj);
        #else
            sipRes = Py_BuildValue("(OO)", name_obj, filter_obj);
        #endif
        }
        
        Py_XDECREF(name_obj);
        Py_XDECREF(filter_obj);
#line 2808 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getSaveFileNameAndFilter, doc_QFileDialog_getSaveFileNameAndFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_done, "done(self, int)");

extern "C" {static PyObject *meth_QFileDialog_done(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_done(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pi", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QFileDialog::done(a0) : sipCpp->done(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_done, doc_QFileDialog_done);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_accept, "accept(self)");

extern "C" {static PyObject *meth_QFileDialog_accept(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_accept(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QFileDialog::accept() : sipCpp->accept());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_accept, doc_QFileDialog_accept);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_changeEvent, "changeEvent(self, QEvent)");

extern "C" {static PyObject *meth_QFileDialog_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QFileDialog::changeEvent(a0) : sipCpp->changeEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_changeEvent, doc_QFileDialog_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setSidebarUrls, "setSidebarUrls(self, Sequence[QUrl])");

extern "C" {static PyObject *meth_QFileDialog_setSidebarUrls(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setSidebarUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList< ::QUrl>* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QList_0100QUrl,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSidebarUrls(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QList< ::QUrl> *>(a0),sipType_QList_0100QUrl,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setSidebarUrls, doc_QFileDialog_setSidebarUrls);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_sidebarUrls, "sidebarUrls(self) -> List[QUrl]");

extern "C" {static PyObject *meth_QFileDialog_sidebarUrls(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_sidebarUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QList< ::QUrl>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QUrl>(sipCpp->sidebarUrls());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_sidebarUrls, doc_QFileDialog_sidebarUrls);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_saveState, "saveState(self) -> QByteArray");

extern "C" {static PyObject *meth_QFileDialog_saveState(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_saveState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->saveState());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_saveState, doc_QFileDialog_saveState);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_restoreState, "restoreState(self, Union[QByteArray, bytes, bytearray]) -> bool");

extern "C" {static PyObject *meth_QFileDialog_restoreState(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_restoreState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->restoreState(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_restoreState, doc_QFileDialog_restoreState);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setProxyModel, "setProxyModel(self, QAbstractProxyModel)");

extern "C" {static PyObject *meth_QFileDialog_setProxyModel(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setProxyModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QAbstractProxyModel* a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QAbstractProxyModel, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProxyModel(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setProxyModel, doc_QFileDialog_setProxyModel);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_proxyModel, "proxyModel(self) -> QAbstractProxyModel");

extern "C" {static PyObject *meth_QFileDialog_proxyModel(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_proxyModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QAbstractProxyModel*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->proxyModel();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractProxyModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_proxyModel, doc_QFileDialog_proxyModel);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setNameFilterDetailsVisible, "setNameFilterDetailsVisible(self, bool)");

extern "C" {static PyObject *meth_QFileDialog_setNameFilterDetailsVisible(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setNameFilterDetailsVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNameFilterDetailsVisible(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setNameFilterDetailsVisible, doc_QFileDialog_setNameFilterDetailsVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_isNameFilterDetailsVisible, "isNameFilterDetailsVisible(self) -> bool");

extern "C" {static PyObject *meth_QFileDialog_isNameFilterDetailsVisible(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_isNameFilterDetailsVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNameFilterDetailsVisible();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_isNameFilterDetailsVisible, doc_QFileDialog_isNameFilterDetailsVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setNameFilter, "setNameFilter(self, str)");

extern "C" {static PyObject *meth_QFileDialog_setNameFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setNameFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNameFilter(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setNameFilter, doc_QFileDialog_setNameFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setNameFilters, "setNameFilters(self, Sequence[str])");

extern "C" {static PyObject *meth_QFileDialog_setNameFilters(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setNameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNameFilters(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setNameFilters, doc_QFileDialog_setNameFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_nameFilters, "nameFilters(self) -> List[str]");

extern "C" {static PyObject *meth_QFileDialog_nameFilters(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_nameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->nameFilters());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_nameFilters, doc_QFileDialog_nameFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_selectNameFilter, "selectNameFilter(self, str)");

extern "C" {static PyObject *meth_QFileDialog_selectNameFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectNameFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->selectNameFilter(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectNameFilter, doc_QFileDialog_selectNameFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_selectedNameFilter, "selectedNameFilter(self) -> str");

extern "C" {static PyObject *meth_QFileDialog_selectedNameFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectedNameFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->selectedNameFilter());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectedNameFilter, doc_QFileDialog_selectedNameFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_filter, "filter(self) -> QDir.Filters");

extern "C" {static PyObject *meth_QFileDialog_filter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_filter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QDir::Filters*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDir::Filters(sipCpp->filter());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_filter, doc_QFileDialog_filter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setOption, "setOption(self, QFileDialog.Option, on: bool = True)");

extern "C" {static PyObject *meth_QFileDialog_setOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QFileDialog::Option a0;
        bool a1 = 1;
         ::QFileDialog *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_Option, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOption(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setOption, doc_QFileDialog_setOption);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_testOption, "testOption(self, QFileDialog.Option) -> bool");

extern "C" {static PyObject *meth_QFileDialog_testOption(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_testOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QFileDialog::Option a0;
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_Option, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->testOption(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_testOption, doc_QFileDialog_testOption);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setOptions, "setOptions(self, QFileDialog.Options)");

extern "C" {static PyObject *meth_QFileDialog_setOptions(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QFileDialog::Options* a0;
        int a0State = 0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_Options, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOptions(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QFileDialog_Options,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setOptions, doc_QFileDialog_setOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_options, "options(self) -> QFileDialog.Options");

extern "C" {static PyObject *meth_QFileDialog_options(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_options(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
             ::QFileDialog::Options*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QFileDialog::Options(sipCpp->options());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFileDialog_Options,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_options, doc_QFileDialog_options);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_open, "open(self)\n"
    "open(self, QObject, QT_SLOT)\n"
    "open(self, PYQT_SLOT)");

extern "C" {static PyObject *meth_QFileDialog_open(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::QObject* a0;
        PyObject * a1;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8P0", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QObject, &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 333 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfiledialog.sip"
        const char *slot = pyqt4_qtgui_get_slot(a1);
        
        if (slot)
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open(a0, slot);
            Py_END_ALLOW_THREADS
        }
        else
        {
            sipError = sipBadCallableArg(1, a1);
        }
#line 3526 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        PyObject * a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 351 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfiledialog.sip"
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt4_qtgui_get_connection_parts(a0, 0, "()", false, &receiver, slot_signature)) == sipErrorNone)
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open(receiver, slot_signature.constData());
            Py_END_ALLOW_THREADS
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 3563 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQFileDialog.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_open, doc_QFileDialog_open);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setVisible, "setVisible(self, bool)");

extern "C" {static PyObject *meth_QFileDialog_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QFileDialog::setVisible(a0) : sipCpp->setVisible(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setVisible, doc_QFileDialog_setVisible);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QFileDialog(void *, const sipTypeDef *);}
static void *cast_QFileDialog(void *sipCppV, const sipTypeDef *targetType)
{
     ::QFileDialog *sipCpp = reinterpret_cast< ::QFileDialog *>(sipCppV);

    if (targetType == sipType_QDialog)
        return static_cast< ::QDialog *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileDialog(void *, int);}
static void release_QFileDialog(void *sipCppV, int)
{
     ::QFileDialog *sipCpp = reinterpret_cast< ::QFileDialog *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QFileDialog(sipSimpleWrapper *);}
static void dealloc_QFileDialog(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQFileDialog *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QFileDialog(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QFileDialog(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFileDialog(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQFileDialog *sipCpp = 0;

    {
         ::QWidget* a0;
         ::Qt::WindowFlags* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQFileDialog(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QWidget* a0 = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1J1J1", sipType_QWidget, &a0, sipOwner, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQFileDialog(a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFileDialog[] = {{84, 255, 1}};


static PyMethodDef methods_QFileDialog[] = {
    {SIP_MLNAME_CAST(sipName_accept), meth_QFileDialog_accept, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_accept)},
    {SIP_MLNAME_CAST(sipName_acceptMode), meth_QFileDialog_acceptMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_acceptMode)},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QFileDialog_changeEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_changeEvent)},
    {SIP_MLNAME_CAST(sipName_confirmOverwrite), meth_QFileDialog_confirmOverwrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_confirmOverwrite)},
    {SIP_MLNAME_CAST(sipName_defaultSuffix), meth_QFileDialog_defaultSuffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_defaultSuffix)},
    {SIP_MLNAME_CAST(sipName_directory), meth_QFileDialog_directory, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_directory)},
    {SIP_MLNAME_CAST(sipName_done), meth_QFileDialog_done, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_done)},
    {SIP_MLNAME_CAST(sipName_fileMode), meth_QFileDialog_fileMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_fileMode)},
    {SIP_MLNAME_CAST(sipName_filter), meth_QFileDialog_filter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_filter)},
    {SIP_MLNAME_CAST(sipName_filters), meth_QFileDialog_filters, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_filters)},
    {SIP_MLNAME_CAST(sipName_getExistingDirectory), (PyCFunction)meth_QFileDialog_getExistingDirectory, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getExistingDirectory)},
    {SIP_MLNAME_CAST(sipName_getOpenFileName), (PyCFunction)meth_QFileDialog_getOpenFileName, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getOpenFileName)},
    {SIP_MLNAME_CAST(sipName_getOpenFileNameAndFilter), (PyCFunction)meth_QFileDialog_getOpenFileNameAndFilter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getOpenFileNameAndFilter)},
    {SIP_MLNAME_CAST(sipName_getOpenFileNames), (PyCFunction)meth_QFileDialog_getOpenFileNames, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getOpenFileNames)},
    {SIP_MLNAME_CAST(sipName_getOpenFileNamesAndFilter), (PyCFunction)meth_QFileDialog_getOpenFileNamesAndFilter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getOpenFileNamesAndFilter)},
    {SIP_MLNAME_CAST(sipName_getSaveFileName), (PyCFunction)meth_QFileDialog_getSaveFileName, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getSaveFileName)},
    {SIP_MLNAME_CAST(sipName_getSaveFileNameAndFilter), (PyCFunction)meth_QFileDialog_getSaveFileNameAndFilter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getSaveFileNameAndFilter)},
    {SIP_MLNAME_CAST(sipName_history), meth_QFileDialog_history, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_history)},
    {SIP_MLNAME_CAST(sipName_iconProvider), meth_QFileDialog_iconProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_iconProvider)},
    {SIP_MLNAME_CAST(sipName_isNameFilterDetailsVisible), meth_QFileDialog_isNameFilterDetailsVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_isNameFilterDetailsVisible)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QFileDialog_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_itemDelegate), meth_QFileDialog_itemDelegate, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_itemDelegate)},
    {SIP_MLNAME_CAST(sipName_labelText), meth_QFileDialog_labelText, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_labelText)},
    {SIP_MLNAME_CAST(sipName_nameFilters), meth_QFileDialog_nameFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_nameFilters)},
    {SIP_MLNAME_CAST(sipName_open), meth_QFileDialog_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_open)},
    {SIP_MLNAME_CAST(sipName_options), meth_QFileDialog_options, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_options)},
    {SIP_MLNAME_CAST(sipName_proxyModel), meth_QFileDialog_proxyModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_proxyModel)},
    {SIP_MLNAME_CAST(sipName_resolveSymlinks), meth_QFileDialog_resolveSymlinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_resolveSymlinks)},
    {SIP_MLNAME_CAST(sipName_restoreState), meth_QFileDialog_restoreState, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_restoreState)},
    {SIP_MLNAME_CAST(sipName_saveState), meth_QFileDialog_saveState, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_saveState)},
    {SIP_MLNAME_CAST(sipName_selectFile), meth_QFileDialog_selectFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_selectFile)},
    {SIP_MLNAME_CAST(sipName_selectFilter), meth_QFileDialog_selectFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_selectFilter)},
    {SIP_MLNAME_CAST(sipName_selectNameFilter), meth_QFileDialog_selectNameFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_selectNameFilter)},
    {SIP_MLNAME_CAST(sipName_selectedFiles), meth_QFileDialog_selectedFiles, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_selectedFiles)},
    {SIP_MLNAME_CAST(sipName_selectedFilter), meth_QFileDialog_selectedFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_selectedFilter)},
    {SIP_MLNAME_CAST(sipName_selectedNameFilter), meth_QFileDialog_selectedNameFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_selectedNameFilter)},
    {SIP_MLNAME_CAST(sipName_setAcceptMode), meth_QFileDialog_setAcceptMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setAcceptMode)},
    {SIP_MLNAME_CAST(sipName_setConfirmOverwrite), meth_QFileDialog_setConfirmOverwrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setConfirmOverwrite)},
    {SIP_MLNAME_CAST(sipName_setDefaultSuffix), meth_QFileDialog_setDefaultSuffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setDefaultSuffix)},
    {SIP_MLNAME_CAST(sipName_setDirectory), meth_QFileDialog_setDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setDirectory)},
    {SIP_MLNAME_CAST(sipName_setFileMode), meth_QFileDialog_setFileMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setFileMode)},
    {SIP_MLNAME_CAST(sipName_setFilter), meth_QFileDialog_setFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setFilter)},
    {SIP_MLNAME_CAST(sipName_setFilters), meth_QFileDialog_setFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setFilters)},
    {SIP_MLNAME_CAST(sipName_setHistory), meth_QFileDialog_setHistory, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setHistory)},
    {SIP_MLNAME_CAST(sipName_setIconProvider), meth_QFileDialog_setIconProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setIconProvider)},
    {SIP_MLNAME_CAST(sipName_setItemDelegate), meth_QFileDialog_setItemDelegate, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setItemDelegate)},
    {SIP_MLNAME_CAST(sipName_setLabelText), meth_QFileDialog_setLabelText, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setLabelText)},
    {SIP_MLNAME_CAST(sipName_setNameFilter), meth_QFileDialog_setNameFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setNameFilter)},
    {SIP_MLNAME_CAST(sipName_setNameFilterDetailsVisible), meth_QFileDialog_setNameFilterDetailsVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setNameFilterDetailsVisible)},
    {SIP_MLNAME_CAST(sipName_setNameFilters), meth_QFileDialog_setNameFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setNameFilters)},
    {SIP_MLNAME_CAST(sipName_setOption), (PyCFunction)meth_QFileDialog_setOption, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_setOption)},
    {SIP_MLNAME_CAST(sipName_setOptions), meth_QFileDialog_setOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setOptions)},
    {SIP_MLNAME_CAST(sipName_setProxyModel), meth_QFileDialog_setProxyModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setProxyModel)},
    {SIP_MLNAME_CAST(sipName_setReadOnly), meth_QFileDialog_setReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setReadOnly)},
    {SIP_MLNAME_CAST(sipName_setResolveSymlinks), meth_QFileDialog_setResolveSymlinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setResolveSymlinks)},
    {SIP_MLNAME_CAST(sipName_setSidebarUrls), meth_QFileDialog_setSidebarUrls, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setSidebarUrls)},
    {SIP_MLNAME_CAST(sipName_setViewMode), meth_QFileDialog_setViewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setViewMode)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QFileDialog_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setVisible)},
    {SIP_MLNAME_CAST(sipName_sidebarUrls), meth_QFileDialog_sidebarUrls, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_sidebarUrls)},
    {SIP_MLNAME_CAST(sipName_testOption), meth_QFileDialog_testOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_testOption)},
    {SIP_MLNAME_CAST(sipName_viewMode), meth_QFileDialog_viewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_viewMode)}
};

static sipEnumMemberDef enummembers_QFileDialog[] = {
    {sipName_Accept, static_cast<int>( ::QFileDialog::Accept), 107},
    {sipName_AcceptOpen, static_cast<int>( ::QFileDialog::AcceptOpen), 106},
    {sipName_AcceptSave, static_cast<int>( ::QFileDialog::AcceptSave), 106},
    {sipName_AnyFile, static_cast<int>( ::QFileDialog::AnyFile), 108},
    {sipName_Detail, static_cast<int>( ::QFileDialog::Detail), 111},
    {sipName_Directory, static_cast<int>( ::QFileDialog::Directory), 108},
    {sipName_DirectoryOnly, static_cast<int>( ::QFileDialog::DirectoryOnly), 108},
    {sipName_DontConfirmOverwrite, static_cast<int>( ::QFileDialog::DontConfirmOverwrite), 109},
    {sipName_DontResolveSymlinks, static_cast<int>( ::QFileDialog::DontResolveSymlinks), 109},
    {sipName_DontUseCustomDirectoryIcons, static_cast<int>( ::QFileDialog::DontUseCustomDirectoryIcons), 109},
    {sipName_DontUseNativeDialog, static_cast<int>( ::QFileDialog::DontUseNativeDialog), 109},
    {sipName_DontUseSheet, static_cast<int>( ::QFileDialog::DontUseSheet), 109},
    {sipName_ExistingFile, static_cast<int>( ::QFileDialog::ExistingFile), 108},
    {sipName_ExistingFiles, static_cast<int>( ::QFileDialog::ExistingFiles), 108},
    {sipName_FileName, static_cast<int>( ::QFileDialog::FileName), 107},
    {sipName_FileType, static_cast<int>( ::QFileDialog::FileType), 107},
    {sipName_HideNameFilterDetails, static_cast<int>( ::QFileDialog::HideNameFilterDetails), 109},
    {sipName_List, static_cast<int>( ::QFileDialog::List), 111},
    {sipName_LookIn, static_cast<int>( ::QFileDialog::LookIn), 107},
    {sipName_ReadOnly, static_cast<int>( ::QFileDialog::ReadOnly), 109},
    {sipName_Reject, static_cast<int>( ::QFileDialog::Reject), 107},
    {sipName_ShowDirsOnly, static_cast<int>( ::QFileDialog::ShowDirsOnly), 109},
};

PyDoc_STRVAR(doc_QFileDialog, "\1QFileDialog(QWidget, Union[Qt.WindowFlags, Qt.WindowType])\n"
    "QFileDialog(parent: QWidget = None, caption: str = '', directory: str = '', filter: str = '')");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QFileDialog[] = {
    {"fileSelected(QString)", "\1fileSelected(self, str)", 0, 0},
    {"filterSelected(QString)", "\1filterSelected(self, str)", 0, 0},
    {"filesSelected(QStringList)", "\1filesSelected(self, Sequence[str])", 0, 0},
    {"directoryEntered(QString)", "\1directoryEntered(self, str)", 0, 0},
    {"currentChanged(QString)", "\1currentChanged(self, str)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QFileDialog = {
    & ::QFileDialog::staticMetaObject,
    0,
    signals_QFileDialog
};


sipClassTypeDef sipTypeDef_QtGui_QFileDialog = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QFileDialog,
        {0},
        &plugin_QFileDialog
    },
    {
        sipNameNr_QFileDialog,
        {0, 0, 1},
        61, methods_QFileDialog,
        22, enummembers_QFileDialog,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QFileDialog,
    -1,
    -1,
    supers_QFileDialog,
    0,
    init_type_QFileDialog,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QFileDialog,
    0,
    0,
    0,
    release_QFileDialog,
    cast_QFileDialog,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 148 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qboxlayout.sip"
#include <qboxlayout.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 76 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qboxlayout.sip"
#include <qboxlayout.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 28 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQHBoxLayout.cpp"


class sipQHBoxLayout : public  ::QHBoxLayout
{
public:
    sipQHBoxLayout();
    sipQHBoxLayout( ::QWidget*);
    virtual ~sipQHBoxLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int count() const;
    int indexOf( ::QWidget*) const;
     ::QLayoutItem* takeAt(int);
     ::QLayoutItem* itemAt(int) const;
    void addItem( ::QLayoutItem*);
     ::QSize sizeHint() const;
     ::QSize minimumSize() const;
     ::QSize maximumSize() const;
     ::Qt::Orientations expandingDirections() const;
    void setGeometry(const  ::QRect&);
     ::QRect geometry() const;
    bool isEmpty() const;
    bool hasHeightForWidth() const;
    int heightForWidth(int) const;
    int minimumHeightForWidth(int) const;
    void invalidate();
     ::QWidget* widget();
     ::QLayout* layout();
     ::QSpacerItem* spacerItem();
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHBoxLayout(const sipQHBoxLayout &);
    sipQHBoxLayout &operator = (const sipQHBoxLayout &);

    char sipPyMethods[26];
};

sipQHBoxLayout::sipQHBoxLayout():  ::QHBoxLayout(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHBoxLayout::sipQHBoxLayout( ::QWidget*a0):  ::QHBoxLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHBoxLayout::~sipQHBoxLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQHBoxLayout::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QHBoxLayout);
}

int sipQHBoxLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QHBoxLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QHBoxLayout,_c,_id,_a);

    return _id;
}

void *sipQHBoxLayout::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QHBoxLayout, _clname)) ? this :  ::QHBoxLayout::qt_metacast(_clname);
}

int sipQHBoxLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_count);

    if (!sipMeth)
        return  ::QHBoxLayout::count();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQHBoxLayout::indexOf( ::QWidget*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_indexOf);

    if (!sipMeth)
        return  ::QHBoxLayout::indexOf(a0);

    extern int sipVH_QtGui_114(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWidget*);

    return sipVH_QtGui_114(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QLayoutItem* sipQHBoxLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_takeAt);

    if (!sipMeth)
        return  ::QHBoxLayout::takeAt(a0);

    extern  ::QLayoutItem* sipVH_QtGui_113(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_113(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QLayoutItem* sipQHBoxLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_itemAt);

    if (!sipMeth)
        return  ::QHBoxLayout::itemAt(a0);

    extern  ::QLayoutItem* sipVH_QtGui_113(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_113(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHBoxLayout::addItem( ::QLayoutItem*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_addItem);

    if (!sipMeth)
    {
         ::QHBoxLayout::addItem(a0);
        return;
    }

    extern void sipVH_QtGui_111(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QLayoutItem*);

    sipVH_QtGui_111(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSize sipQHBoxLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QHBoxLayout::sizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQHBoxLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_minimumSize);

    if (!sipMeth)
        return  ::QHBoxLayout::minimumSize();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQHBoxLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_maximumSize);

    if (!sipMeth)
        return  ::QHBoxLayout::maximumSize();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::Qt::Orientations sipQHBoxLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_expandingDirections);

    if (!sipMeth)
        return  ::QHBoxLayout::expandingDirections();

    extern  ::Qt::Orientations sipVH_QtGui_105(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_105(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQHBoxLayout::setGeometry(const  ::QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setGeometry);

    if (!sipMeth)
    {
         ::QHBoxLayout::setGeometry(a0);
        return;
    }

    extern void sipVH_QtGui_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QRect&);

    sipVH_QtGui_106(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QRect sipQHBoxLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_geometry);

    if (!sipMeth)
        return  ::QHBoxLayout::geometry();

    extern  ::QRect sipVH_QtGui_107(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_107(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQHBoxLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_isEmpty);

    if (!sipMeth)
        return  ::QHBoxLayout::isEmpty();

    extern bool sipVH_QtGui_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_67(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQHBoxLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return  ::QHBoxLayout::hasHeightForWidth();

    extern bool sipVH_QtGui_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_67(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQHBoxLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QHBoxLayout::heightForWidth(a0);

    extern int sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQHBoxLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_minimumHeightForWidth);

    if (!sipMeth)
        return  ::QHBoxLayout::minimumHeightForWidth(a0);

    extern int sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHBoxLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_invalidate);

    if (!sipMeth)
    {
         ::QHBoxLayout::invalidate();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QWidget* sipQHBoxLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_widget);

    if (!sipMeth)
        return  ::QHBoxLayout::widget();

    extern  ::QWidget* sipVH_QtGui_108(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_108(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QLayout* sipQHBoxLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_layout);

    if (!sipMeth)
        return  ::QHBoxLayout::layout();

    extern  ::QLayout* sipVH_QtGui_109(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_109(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSpacerItem* sipQHBoxLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_spacerItem);

    if (!sipMeth)
        return  ::QHBoxLayout::spacerItem();

    extern  ::QSpacerItem* sipVH_QtGui_110(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_110(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipQHBoxLayout::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QHBoxLayout::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQHBoxLayout::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QHBoxLayout::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQHBoxLayout::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QHBoxLayout::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHBoxLayout::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QHBoxLayout::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHBoxLayout::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QHBoxLayout::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHBoxLayout::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QHBoxLayout::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHBoxLayout::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QHBoxLayout::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QHBoxLayout(void *, const sipTypeDef *);}
static void *cast_QHBoxLayout(void *sipCppV, const sipTypeDef *targetType)
{
     ::QHBoxLayout *sipCpp = reinterpret_cast< ::QHBoxLayout *>(sipCppV);

    if (targetType == sipType_QBoxLayout)
        return static_cast< ::QBoxLayout *>(sipCpp);

    if (targetType == sipType_QLayout)
        return static_cast< ::QLayout *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QLayoutItem)
        return static_cast< ::QLayoutItem *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHBoxLayout(void *, int);}
static void release_QHBoxLayout(void *sipCppV, int)
{
     ::QHBoxLayout *sipCpp = reinterpret_cast< ::QHBoxLayout *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QHBoxLayout(sipSimpleWrapper *);}
static void dealloc_QHBoxLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQHBoxLayout *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHBoxLayout(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QHBoxLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHBoxLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQHBoxLayout *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQHBoxLayout();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::QWidget* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQHBoxLayout(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHBoxLayout[] = {{44, 255, 1}};

PyDoc_STRVAR(doc_QHBoxLayout, "\1QHBoxLayout()\n"
    "QHBoxLayout(QWidget)");


static pyqt4ClassPluginDef plugin_QHBoxLayout = {
    & ::QHBoxLayout::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtGui_QHBoxLayout = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QHBoxLayout,
        {0},
        &plugin_QHBoxLayout
    },
    {
        sipNameNr_QHBoxLayout,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QHBoxLayout,
    -1,
    -1,
    supers_QHBoxLayout,
    0,
    init_type_QHBoxLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHBoxLayout,
    0,
    0,
    0,
    release_QHBoxLayout,
    cast_QHBoxLayout,
    0,
    0,
    0,
    0,
    0,
    0
};

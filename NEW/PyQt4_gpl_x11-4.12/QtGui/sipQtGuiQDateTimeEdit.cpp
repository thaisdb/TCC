/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qdatetimeedit.sip"
#include <qdatetimeedit.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"

#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 397 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 241 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qcalendarwidget.sip"
#include <qcalendarwidget.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstractspinbox.sip"
#include <qabstractspinbox.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 524 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 252 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 505 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 347 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 474 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 1461 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qdatetimeedit.sip"
#include <qdatetimeedit.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qabstractspinbox.sip"
#include <qabstractspinbox.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlineedit.sip"
#include <qlineedit.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 596 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 96 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 99 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 607 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 102 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 574 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 105 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 618 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 561 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 114 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 117 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 28 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 120 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 123 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 126 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 129 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 132 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 135 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 138 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qregion.sip"
#include <qregion.h>
#line 141 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 144 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 147 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 150 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 153 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 156 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 159 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qfont.sip"
#include <qfont.h>
#line 162 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 165 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 168 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 647 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 739 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 792 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 765 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 781 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 854 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 403 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 189 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 548 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qevent.sip"
#include <qevent.h>
#line 192 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 195 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 52 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 198 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 34 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 201 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 204 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qaction.sip"
#include <qaction.h>
#line 207 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 210 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 213 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 216 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 219 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 222 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qicon.sip"
#include <qicon.h>
#line 225 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 228 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 231 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 234 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 237 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 240 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 243 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 246 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 249 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 252 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtGui/sipQtGuiQDateTimeEdit.cpp"


class sipQDateTimeEdit : public  ::QDateTimeEdit
{
public:
    sipQDateTimeEdit( ::QWidget*);
    sipQDateTimeEdit(const  ::QDateTime&, ::QWidget*);
    sipQDateTimeEdit(const  ::QDate&, ::QWidget*);
    sipQDateTimeEdit(const  ::QTime&, ::QWidget*);
    virtual ~sipQDateTimeEdit();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::QString textFromDateTime(const  ::QDateTime&) const;
     ::QDateTime dateTimeFromText(const  ::QString&) const;
    void languageChange();
    void windowActivationChange(bool);
    void fontChange(const  ::QFont&);
    void paletteChange(const  ::QPalette&);
    void enabledChange(bool);
    bool focusNextPrevChild(bool);
     ::QVariant inputMethodQuery( ::Qt::InputMethodQuery) const;
    void inputMethodEvent( ::QInputMethodEvent*);
    void changeEvent( ::QEvent*);
    void hideEvent( ::QHideEvent*);
    void showEvent( ::QShowEvent*);
    void dropEvent( ::QDropEvent*);
    void dragLeaveEvent( ::QDragLeaveEvent*);
    void dragMoveEvent( ::QDragMoveEvent*);
    void dragEnterEvent( ::QDragEnterEvent*);
    void actionEvent( ::QActionEvent*);
    void tabletEvent( ::QTabletEvent*);
    void contextMenuEvent( ::QContextMenuEvent*);
    void closeEvent( ::QCloseEvent*);
    void resizeEvent( ::QResizeEvent*);
    void moveEvent( ::QMoveEvent*);
    void paintEvent( ::QPaintEvent*);
    void leaveEvent( ::QEvent*);
    void enterEvent( ::QEvent*);
    void focusOutEvent( ::QFocusEvent*);
    void focusInEvent( ::QFocusEvent*);
    void keyReleaseEvent( ::QKeyEvent*);
    void keyPressEvent( ::QKeyEvent*);
    void wheelEvent( ::QWheelEvent*);
    void mouseMoveEvent( ::QMouseEvent*);
    void mouseDoubleClickEvent( ::QMouseEvent*);
    void mouseReleaseEvent( ::QMouseEvent*);
    void mousePressEvent( ::QMouseEvent*);
    int heightForWidth(int) const;
     ::QSize minimumSizeHint() const;
     ::QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
     ::QPaintEngine* paintEngine() const;
    int metric( ::QPaintDevice::PaintDeviceMetric) const;
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);
     ::QValidator::State validate( ::QString&,int&) const;
    void fixup( ::QString&) const;
    void stepBy(int);
    void clear();
     ::QAbstractSpinBox::StepEnabled stepEnabled() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDateTimeEdit(const sipQDateTimeEdit &);
    sipQDateTimeEdit &operator = (const sipQDateTimeEdit &);

    char sipPyMethods[56];
};

sipQDateTimeEdit::sipQDateTimeEdit( ::QWidget*a0):  ::QDateTimeEdit(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDateTimeEdit::sipQDateTimeEdit(const  ::QDateTime& a0, ::QWidget*a1):  ::QDateTimeEdit(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDateTimeEdit::sipQDateTimeEdit(const  ::QDate& a0, ::QWidget*a1):  ::QDateTimeEdit(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDateTimeEdit::sipQDateTimeEdit(const  ::QTime& a0, ::QWidget*a1):  ::QDateTimeEdit(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDateTimeEdit::~sipQDateTimeEdit()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDateTimeEdit::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QDateTimeEdit);
}

int sipQDateTimeEdit::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QDateTimeEdit::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QDateTimeEdit,_c,_id,_a);

    return _id;
}

void *sipQDateTimeEdit::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QDateTimeEdit, _clname)) ? this :  ::QDateTimeEdit::qt_metacast(_clname);
}

 ::QString sipQDateTimeEdit::textFromDateTime(const  ::QDateTime& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_textFromDateTime);

    if (!sipMeth)
        return  ::QDateTimeEdit::textFromDateTime(a0);

    extern  ::QString sipVH_QtGui_138(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QDateTime&);

    return sipVH_QtGui_138(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QDateTime sipQDateTimeEdit::dateTimeFromText(const  ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_dateTimeFromText);

    if (!sipMeth)
        return  ::QDateTimeEdit::dateTimeFromText(a0);

    extern  ::QDateTime sipVH_QtGui_137(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QString&);

    return sipVH_QtGui_137(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_languageChange);

    if (!sipMeth)
    {
         ::QDateTimeEdit::languageChange();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQDateTimeEdit::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_windowActivationChange);

    if (!sipMeth)
    {
         ::QDateTimeEdit::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::fontChange(const  ::QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_fontChange);

    if (!sipMeth)
    {
         ::QDateTimeEdit::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QFont&);

    sipVH_QtGui_33(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::paletteChange(const  ::QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_paletteChange);

    if (!sipMeth)
    {
         ::QDateTimeEdit::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::QPalette&);

    sipVH_QtGui_32(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_enabledChange);

    if (!sipMeth)
    {
         ::QDateTimeEdit::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDateTimeEdit::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return  ::QDateTimeEdit::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtGui_31(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QVariant sipQDateTimeEdit::inputMethodQuery( ::Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return  ::QDateTimeEdit::inputMethodQuery(a0);

    extern  ::QVariant sipVH_QtGui_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::Qt::InputMethodQuery);

    return sipVH_QtGui_30(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::inputMethodEvent( ::QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QInputMethodEvent*);

    sipVH_QtGui_29(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::changeEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::changeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::hideEvent( ::QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QHideEvent*);

    sipVH_QtGui_28(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::showEvent( ::QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QShowEvent*);

    sipVH_QtGui_27(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::dropEvent( ::QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDropEvent*);

    sipVH_QtGui_26(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::dragLeaveEvent( ::QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragLeaveEvent*);

    sipVH_QtGui_25(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::dragMoveEvent( ::QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragMoveEvent*);

    sipVH_QtGui_24(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::dragEnterEvent( ::QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QDragEnterEvent*);

    sipVH_QtGui_23(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::actionEvent( ::QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QActionEvent*);

    sipVH_QtGui_22(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::tabletEvent( ::QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTabletEvent*);

    sipVH_QtGui_21(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::contextMenuEvent( ::QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QContextMenuEvent*);

    sipVH_QtGui_20(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::closeEvent( ::QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QCloseEvent*);

    sipVH_QtGui_19(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::resizeEvent( ::QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QResizeEvent*);

    sipVH_QtGui_18(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::moveEvent( ::QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMoveEvent*);

    sipVH_QtGui_17(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::paintEvent( ::QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintEvent*);

    sipVH_QtGui_16(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::leaveEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::leaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::enterEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::enterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::focusOutEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::focusInEvent( ::QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QFocusEvent*);

    sipVH_QtGui_15(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::keyReleaseEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::keyPressEvent( ::QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QKeyEvent*);

    sipVH_QtGui_14(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::wheelEvent( ::QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QWheelEvent*);

    sipVH_QtGui_13(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::mouseMoveEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::mouseDoubleClickEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::mouseReleaseEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::mousePressEvent( ::QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QMouseEvent*);

    sipVH_QtGui_12(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQDateTimeEdit::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return  ::QDateTimeEdit::heightForWidth(a0);

    extern int sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_11(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QSize sipQDateTimeEdit::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return  ::QDateTimeEdit::minimumSizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QSize sipQDateTimeEdit::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return  ::QDateTimeEdit::sizeHint();

    extern  ::QSize sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_10(sipGILState, 0, sipPySelf, sipMeth);
}

void sipQDateTimeEdit::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
         ::QDateTimeEdit::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtGui_9(sipGILState, 0, sipPySelf, sipMeth, a0);
}

int sipQDateTimeEdit::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return  ::QDateTimeEdit::devType();

    extern int sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QPaintEngine* sipQDateTimeEdit::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return  ::QDateTimeEdit::paintEngine();

    extern  ::QPaintEngine* sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_0(sipGILState, 0, sipPySelf, sipMeth);
}

int sipQDateTimeEdit::metric( ::QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return  ::QDateTimeEdit::metric(a0);

    extern int sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDateTimeEdit::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QDateTimeEdit::event(a0);

    extern bool sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtGui_7(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQDateTimeEdit::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QDateTimeEdit::eventFilter(a0,a1);

    extern bool sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtGui_6(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQDateTimeEdit::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::timerEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtGui_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::childEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtGui_4(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QDateTimeEdit::customEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtGui_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QDateTimeEdit::connectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QDateTimeEdit::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtGui_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QValidator::State sipQDateTimeEdit::validate( ::QString& a0,int& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,NULL,sipName_validate);

    if (!sipMeth)
        return  ::QDateTimeEdit::validate(a0,a1);

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        extern  ::QValidator::State sipVH_QtGui_88(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&,int&);

        return sipVH_QtGui_88(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        extern  ::QValidator::State sipVH_QtGui_89(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&,int&);

        return sipVH_QtGui_89(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
    }

    return  ::QDateTimeEdit::validate(a0,a1);
}

void sipQDateTimeEdit::fixup( ::QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_fixup);

    if (!sipMeth)
    {
         ::QDateTimeEdit::fixup(a0);
        return;
    }

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        extern void sipVH_QtGui_90(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&);

        sipVH_QtGui_90(sipGILState, 0, sipPySelf, sipMeth, a0);
        return;
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        extern void sipVH_QtGui_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QString&);

        sipVH_QtGui_91(sipGILState, 0, sipPySelf, sipMeth, a0);
        return;
    }

     ::QDateTimeEdit::fixup(a0);
}

void sipQDateTimeEdit::stepBy(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_stepBy);

    if (!sipMeth)
    {
         ::QDateTimeEdit::stepBy(a0);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH_QtGui_54(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQDateTimeEdit::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_clear);

    if (!sipMeth)
    {
         ::QDateTimeEdit::clear();
        return;
    }

    extern void sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH_QtGui_34(sipGILState, 0, sipPySelf, sipMeth);
}

 ::QAbstractSpinBox::StepEnabled sipQDateTimeEdit::stepEnabled() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[53]),sipPySelf,NULL,sipName_stepEnabled);

    if (!sipMeth)
        return  ::QDateTimeEdit::stepEnabled();

    extern  ::QAbstractSpinBox::StepEnabled sipVH_QtGui_92(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_92(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QDateTimeEdit_dateTime, "dateTime(self) -> QDateTime");

extern "C" {static PyObject *meth_QDateTimeEdit_dateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_dateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDateTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDateTime(sipCpp->dateTime());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_dateTime, doc_QDateTimeEdit_dateTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_date, "date(self) -> QDate");

extern "C" {static PyObject *meth_QDateTimeEdit_date(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_date(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDate*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDate(sipCpp->date());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_date, doc_QDateTimeEdit_date);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_time, "time(self) -> QTime");

extern "C" {static PyObject *meth_QDateTimeEdit_time(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_time(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTime(sipCpp->time());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_time, doc_QDateTimeEdit_time);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_minimumDate, "minimumDate(self) -> QDate");

extern "C" {static PyObject *meth_QDateTimeEdit_minimumDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_minimumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDate*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDate(sipCpp->minimumDate());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_minimumDate, doc_QDateTimeEdit_minimumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setMinimumDate, "setMinimumDate(self, Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QDateTimeEdit_setMinimumDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setMinimumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDate* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMinimumDate(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setMinimumDate, doc_QDateTimeEdit_setMinimumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clearMinimumDate, "clearMinimumDate(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clearMinimumDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clearMinimumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearMinimumDate();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clearMinimumDate, doc_QDateTimeEdit_clearMinimumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_maximumDate, "maximumDate(self) -> QDate");

extern "C" {static PyObject *meth_QDateTimeEdit_maximumDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_maximumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDate*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDate(sipCpp->maximumDate());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_maximumDate, doc_QDateTimeEdit_maximumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setMaximumDate, "setMaximumDate(self, Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QDateTimeEdit_setMaximumDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setMaximumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDate* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaximumDate(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setMaximumDate, doc_QDateTimeEdit_setMaximumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clearMaximumDate, "clearMaximumDate(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clearMaximumDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clearMaximumDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearMaximumDate();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clearMaximumDate, doc_QDateTimeEdit_clearMaximumDate);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setDateRange, "setDateRange(self, Union[QDate, datetime.date], Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QDateTimeEdit_setDateRange(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setDateRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDate* a0;
        int a0State = 0;
        const  ::QDate* a1;
        int a1State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDate, &a0, &a0State, sipType_QDate, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDateRange(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);
            sipReleaseType(const_cast< ::QDate *>(a1),sipType_QDate,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setDateRange, doc_QDateTimeEdit_setDateRange);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_minimumTime, "minimumTime(self) -> QTime");

extern "C" {static PyObject *meth_QDateTimeEdit_minimumTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_minimumTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTime(sipCpp->minimumTime());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_minimumTime, doc_QDateTimeEdit_minimumTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setMinimumTime, "setMinimumTime(self, Union[QTime, datetime.time])");

extern "C" {static PyObject *meth_QDateTimeEdit_setMinimumTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setMinimumTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTime* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QTime, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMinimumTime(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setMinimumTime, doc_QDateTimeEdit_setMinimumTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clearMinimumTime, "clearMinimumTime(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clearMinimumTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clearMinimumTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearMinimumTime();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clearMinimumTime, doc_QDateTimeEdit_clearMinimumTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_maximumTime, "maximumTime(self) -> QTime");

extern "C" {static PyObject *meth_QDateTimeEdit_maximumTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_maximumTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QTime(sipCpp->maximumTime());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_maximumTime, doc_QDateTimeEdit_maximumTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setMaximumTime, "setMaximumTime(self, Union[QTime, datetime.time])");

extern "C" {static PyObject *meth_QDateTimeEdit_setMaximumTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setMaximumTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTime* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QTime, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaximumTime(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setMaximumTime, doc_QDateTimeEdit_setMaximumTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clearMaximumTime, "clearMaximumTime(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clearMaximumTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clearMaximumTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearMaximumTime();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clearMaximumTime, doc_QDateTimeEdit_clearMaximumTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setTimeRange, "setTimeRange(self, Union[QTime, datetime.time], Union[QTime, datetime.time])");

extern "C" {static PyObject *meth_QDateTimeEdit_setTimeRange(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setTimeRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTime* a0;
        int a0State = 0;
        const  ::QTime* a1;
        int a1State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QTime, &a0, &a0State, sipType_QTime, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTimeRange(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);
            sipReleaseType(const_cast< ::QTime *>(a1),sipType_QTime,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setTimeRange, doc_QDateTimeEdit_setTimeRange);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_displayedSections, "displayedSections(self) -> QDateTimeEdit.Sections");

extern "C" {static PyObject *meth_QDateTimeEdit_displayedSections(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_displayedSections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDateTimeEdit::Sections*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDateTimeEdit::Sections(sipCpp->displayedSections());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTimeEdit_Sections,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_displayedSections, doc_QDateTimeEdit_displayedSections);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_currentSection, "currentSection(self) -> QDateTimeEdit.Section");

extern "C" {static PyObject *meth_QDateTimeEdit_currentSection(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_currentSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDateTimeEdit::Section sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentSection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDateTimeEdit_Section);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_currentSection, doc_QDateTimeEdit_currentSection);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setCurrentSection, "setCurrentSection(self, QDateTimeEdit.Section)");

extern "C" {static PyObject *meth_QDateTimeEdit_setCurrentSection(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setCurrentSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDateTimeEdit::Section a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTimeEdit_Section, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentSection(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setCurrentSection, doc_QDateTimeEdit_setCurrentSection);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_sectionText, "sectionText(self, QDateTimeEdit.Section) -> str");

extern "C" {static PyObject *meth_QDateTimeEdit_sectionText(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_sectionText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDateTimeEdit::Section a0;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTimeEdit_Section, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->sectionText(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_sectionText, doc_QDateTimeEdit_sectionText);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_displayFormat, "displayFormat(self) -> str");

extern "C" {static PyObject *meth_QDateTimeEdit_displayFormat(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_displayFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->displayFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_displayFormat, doc_QDateTimeEdit_displayFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setDisplayFormat, "setDisplayFormat(self, str)");

extern "C" {static PyObject *meth_QDateTimeEdit_setDisplayFormat(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setDisplayFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDisplayFormat(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setDisplayFormat, doc_QDateTimeEdit_setDisplayFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_calendarPopup, "calendarPopup(self) -> bool");

extern "C" {static PyObject *meth_QDateTimeEdit_calendarPopup(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_calendarPopup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->calendarPopup();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_calendarPopup, doc_QDateTimeEdit_calendarPopup);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setCalendarPopup, "setCalendarPopup(self, bool)");

extern "C" {static PyObject *meth_QDateTimeEdit_setCalendarPopup(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setCalendarPopup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDateTimeEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCalendarPopup(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setCalendarPopup, doc_QDateTimeEdit_setCalendarPopup);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setSelectedSection, "setSelectedSection(self, QDateTimeEdit.Section)");

extern "C" {static PyObject *meth_QDateTimeEdit_setSelectedSection(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setSelectedSection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDateTimeEdit::Section a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTimeEdit_Section, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSelectedSection(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setSelectedSection, doc_QDateTimeEdit_setSelectedSection);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_sizeHint, "sizeHint(self) -> QSize");

extern "C" {static PyObject *meth_QDateTimeEdit_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QSize*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSize((sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_sizeHint, doc_QDateTimeEdit_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clear, "clear(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clear(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::clear() : sipCpp->clear());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clear, doc_QDateTimeEdit_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_stepBy, "stepBy(self, int)");

extern "C" {static PyObject *meth_QDateTimeEdit_stepBy(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_stepBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDateTimeEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::stepBy(a0) : sipCpp->stepBy(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_stepBy, doc_QDateTimeEdit_stepBy);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_event, "event(self, QEvent) -> bool");

extern "C" {static PyObject *meth_QDateTimeEdit_event(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_event, doc_QDateTimeEdit_event);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_sectionAt, "sectionAt(self, int) -> QDateTimeEdit.Section");

extern "C" {static PyObject *meth_QDateTimeEdit_sectionAt(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_sectionAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDateTimeEdit, &sipCpp, &a0))
        {
             ::QDateTimeEdit::Section sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sectionAt(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDateTimeEdit_Section);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_sectionAt, doc_QDateTimeEdit_sectionAt);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_currentSectionIndex, "currentSectionIndex(self) -> int");

extern "C" {static PyObject *meth_QDateTimeEdit_currentSectionIndex(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_currentSectionIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentSectionIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_currentSectionIndex, doc_QDateTimeEdit_currentSectionIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setCurrentSectionIndex, "setCurrentSectionIndex(self, int)");

extern "C" {static PyObject *meth_QDateTimeEdit_setCurrentSectionIndex(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setCurrentSectionIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDateTimeEdit, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentSectionIndex(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setCurrentSectionIndex, doc_QDateTimeEdit_setCurrentSectionIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_sectionCount, "sectionCount(self) -> int");

extern "C" {static PyObject *meth_QDateTimeEdit_sectionCount(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_sectionCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sectionCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_sectionCount, doc_QDateTimeEdit_sectionCount);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setDateTime, "setDateTime(self, Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QDateTimeEdit_setDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDateTime(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setDateTime, doc_QDateTimeEdit_setDateTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setDate, "setDate(self, Union[QDate, datetime.date])");

extern "C" {static PyObject *meth_QDateTimeEdit_setDate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDate* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDate(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setDate, doc_QDateTimeEdit_setDate);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setTime, "setTime(self, Union[QTime, datetime.time])");

extern "C" {static PyObject *meth_QDateTimeEdit_setTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QTime* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QTime, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTime(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setTime, doc_QDateTimeEdit_setTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_initStyleOption, "initStyleOption(self, QStyleOptionSpinBox)");

extern "C" {static PyObject *meth_QDateTimeEdit_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QStyleOptionSpinBox* a0;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QStyleOptionSpinBox, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->initStyleOption(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_initStyleOption, doc_QDateTimeEdit_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_keyPressEvent, "keyPressEvent(self, QKeyEvent)");

extern "C" {static PyObject *meth_QDateTimeEdit_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QKeyEvent* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::keyPressEvent(a0) : sipCpp->keyPressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_keyPressEvent, doc_QDateTimeEdit_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_wheelEvent, "wheelEvent(self, QWheelEvent)");

extern "C" {static PyObject *meth_QDateTimeEdit_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QWheelEvent* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QWheelEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::wheelEvent(a0) : sipCpp->wheelEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_wheelEvent, doc_QDateTimeEdit_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_focusInEvent, "focusInEvent(self, QFocusEvent)");

extern "C" {static PyObject *meth_QDateTimeEdit_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QFocusEvent* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::focusInEvent(a0) : sipCpp->focusInEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_focusInEvent, doc_QDateTimeEdit_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_focusNextPrevChild, "focusNextPrevChild(self, bool) -> bool");

extern "C" {static PyObject *meth_QDateTimeEdit_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pb", &sipSelf, sipType_QDateTimeEdit, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::focusNextPrevChild(a0) : sipCpp->focusNextPrevChild(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_focusNextPrevChild, doc_QDateTimeEdit_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_mousePressEvent, "mousePressEvent(self, QMouseEvent)");

extern "C" {static PyObject *meth_QDateTimeEdit_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QMouseEvent* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::mousePressEvent(a0) : sipCpp->mousePressEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_mousePressEvent, doc_QDateTimeEdit_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_paintEvent, "paintEvent(self, QPaintEvent)");

extern "C" {static PyObject *meth_QDateTimeEdit_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QPaintEvent* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ8", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QPaintEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::paintEvent(a0) : sipCpp->paintEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_paintEvent, doc_QDateTimeEdit_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_validate, "validate(self, QString, int) -> Tuple[QValidator.State, int]");

extern "C" {static PyObject *meth_QDateTimeEdit_validate(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
         ::QString* a0;
        int a0State = 0;
        int a1;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1i", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
             ::QValidator::State sipRes;
            PyObject *sipResObj;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::validate(*a0,a1) : sipCpp->validate(*a0,a1));
            Py_END_ALLOW_THREADS

            sipResObj = sipBuildResult(0,"(FDi)",sipRes,sipType_QValidator_State,a0,sipType_QString,NULL,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
         ::QString* a0;
        int a1;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9i", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QString,&a0, &a1))
        {
             ::QValidator::State sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::validate(*a0,a1) : sipCpp->validate(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(Fi)",sipRes,sipType_QValidator_State,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_validate, doc_QDateTimeEdit_validate);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_fixup, "fixup(self, QString)");

extern "C" {static PyObject *meth_QDateTimeEdit_fixup(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_fixup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
         ::QString* a0;
        int a0State = 0;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            PyObject *sipResObj;

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::fixup(*a0) : sipCpp->fixup(*a0));
            Py_END_ALLOW_THREADS

            sipResObj = sipConvertFromType(a0,sipType_QString,NULL);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
         ::QString* a0;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ9", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QString,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::fixup(*a0) : sipCpp->fixup(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_fixup, doc_QDateTimeEdit_fixup);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_dateTimeFromText, "dateTimeFromText(self, str) -> QDateTime");

extern "C" {static PyObject *meth_QDateTimeEdit_dateTimeFromText(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_dateTimeFromText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QDateTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDateTime((sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::dateTimeFromText(*a0) : sipCpp->dateTimeFromText(*a0)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_dateTimeFromText, doc_QDateTimeEdit_dateTimeFromText);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_textFromDateTime, "textFromDateTime(self, Union[QDateTime, datetime.datetime]) -> str");

extern "C" {static PyObject *meth_QDateTimeEdit_textFromDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_textFromDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "pJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString((sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::textFromDateTime(*a0) : sipCpp->textFromDateTime(*a0)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_textFromDateTime, doc_QDateTimeEdit_textFromDateTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_stepEnabled, "stepEnabled(self) -> QAbstractSpinBox.StepEnabled");

extern "C" {static PyObject *meth_QDateTimeEdit_stepEnabled(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_stepEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "p", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QAbstractSpinBox::StepEnabled*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QAbstractSpinBox::StepEnabled((sipSelfWasArg ? sipCpp-> ::QDateTimeEdit::stepEnabled() : sipCpp->stepEnabled()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QAbstractSpinBox_StepEnabled,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_stepEnabled, doc_QDateTimeEdit_stepEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_minimumDateTime, "minimumDateTime(self) -> QDateTime");

extern "C" {static PyObject *meth_QDateTimeEdit_minimumDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_minimumDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDateTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDateTime(sipCpp->minimumDateTime());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_minimumDateTime, doc_QDateTimeEdit_minimumDateTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clearMinimumDateTime, "clearMinimumDateTime(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clearMinimumDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clearMinimumDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearMinimumDateTime();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clearMinimumDateTime, doc_QDateTimeEdit_clearMinimumDateTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setMinimumDateTime, "setMinimumDateTime(self, Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QDateTimeEdit_setMinimumDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setMinimumDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMinimumDateTime(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setMinimumDateTime, doc_QDateTimeEdit_setMinimumDateTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_maximumDateTime, "maximumDateTime(self) -> QDateTime");

extern "C" {static PyObject *meth_QDateTimeEdit_maximumDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_maximumDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QDateTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDateTime(sipCpp->maximumDateTime());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_maximumDateTime, doc_QDateTimeEdit_maximumDateTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_clearMaximumDateTime, "clearMaximumDateTime(self)");

extern "C" {static PyObject *meth_QDateTimeEdit_clearMaximumDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_clearMaximumDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearMaximumDateTime();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_clearMaximumDateTime, doc_QDateTimeEdit_clearMaximumDateTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setMaximumDateTime, "setMaximumDateTime(self, Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QDateTimeEdit_setMaximumDateTime(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setMaximumDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTime, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaximumDateTime(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setMaximumDateTime, doc_QDateTimeEdit_setMaximumDateTime);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setDateTimeRange, "setDateTimeRange(self, Union[QDateTime, datetime.datetime], Union[QDateTime, datetime.datetime])");

extern "C" {static PyObject *meth_QDateTimeEdit_setDateTimeRange(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setDateTimeRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTime* a0;
        int a0State = 0;
        const  ::QDateTime* a1;
        int a1State = 0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QDateTime, &a0, &a0State, sipType_QDateTime, &a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDateTimeRange(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);
            sipReleaseType(const_cast< ::QDateTime *>(a1),sipType_QDateTime,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setDateTimeRange, doc_QDateTimeEdit_setDateTimeRange);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_calendarWidget, "calendarWidget(self) -> QCalendarWidget");

extern "C" {static PyObject *meth_QDateTimeEdit_calendarWidget(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_calendarWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::QCalendarWidget*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->calendarWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QCalendarWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_calendarWidget, doc_QDateTimeEdit_calendarWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setCalendarWidget, "setCalendarWidget(self, QCalendarWidget)");

extern "C" {static PyObject *meth_QDateTimeEdit_setCalendarWidget(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setCalendarWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCalendarWidget* a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_QCalendarWidget, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCalendarWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setCalendarWidget, doc_QDateTimeEdit_setCalendarWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_timeSpec, "timeSpec(self) -> Qt.TimeSpec");

extern "C" {static PyObject *meth_QDateTimeEdit_timeSpec(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_timeSpec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDateTimeEdit, &sipCpp))
        {
             ::Qt::TimeSpec sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->timeSpec();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_TimeSpec);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_timeSpec, doc_QDateTimeEdit_timeSpec);

    return NULL;
}


PyDoc_STRVAR(doc_QDateTimeEdit_setTimeSpec, "setTimeSpec(self, Qt.TimeSpec)");

extern "C" {static PyObject *meth_QDateTimeEdit_setTimeSpec(PyObject *, PyObject *);}
static PyObject *meth_QDateTimeEdit_setTimeSpec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::Qt::TimeSpec a0;
         ::QDateTimeEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QDateTimeEdit, &sipCpp, sipType_Qt_TimeSpec, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTimeSpec(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDateTimeEdit, sipName_setTimeSpec, doc_QDateTimeEdit_setTimeSpec);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QDateTimeEdit(void *, const sipTypeDef *);}
static void *cast_QDateTimeEdit(void *sipCppV, const sipTypeDef *targetType)
{
     ::QDateTimeEdit *sipCpp = reinterpret_cast< ::QDateTimeEdit *>(sipCppV);

    if (targetType == sipType_QAbstractSpinBox)
        return static_cast< ::QAbstractSpinBox *>(sipCpp);

    if (targetType == sipType_QWidget)
        return static_cast< ::QWidget *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    if (targetType == sipType_QPaintDevice)
        return static_cast< ::QPaintDevice *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDateTimeEdit(void *, int);}
static void release_QDateTimeEdit(void *sipCppV, int)
{
     ::QDateTimeEdit *sipCpp = reinterpret_cast< ::QDateTimeEdit *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDateTimeEdit(sipSimpleWrapper *);}
static void dealloc_QDateTimeEdit(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQDateTimeEdit *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QDateTimeEdit(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QDateTimeEdit(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDateTimeEdit(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQDateTimeEdit *sipCpp = 0;

    {
         ::QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDateTimeEdit(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QDateTime* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QDateTime, &a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDateTimeEdit(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QDateTime *>(a0),sipType_QDateTime,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QDate* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QDate, &a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDateTimeEdit(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QDate *>(a0),sipType_QDate,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QTime* a0;
        int a0State = 0;
         ::QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QTime, &a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDateTimeEdit(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QTime *>(a0),sipType_QTime,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDateTimeEdit[] = {{25, 255, 1}};


static PyMethodDef methods_QDateTimeEdit[] = {
    {SIP_MLNAME_CAST(sipName_calendarPopup), meth_QDateTimeEdit_calendarPopup, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_calendarPopup)},
    {SIP_MLNAME_CAST(sipName_calendarWidget), meth_QDateTimeEdit_calendarWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_calendarWidget)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QDateTimeEdit_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_clear)},
    {SIP_MLNAME_CAST(sipName_clearMaximumDate), meth_QDateTimeEdit_clearMaximumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_clearMaximumDate)},
    {SIP_MLNAME_CAST(sipName_clearMaximumDateTime), meth_QDateTimeEdit_clearMaximumDateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_clearMaximumDateTime)},
    {SIP_MLNAME_CAST(sipName_clearMaximumTime), meth_QDateTimeEdit_clearMaximumTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_clearMaximumTime)},
    {SIP_MLNAME_CAST(sipName_clearMinimumDate), meth_QDateTimeEdit_clearMinimumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_clearMinimumDate)},
    {SIP_MLNAME_CAST(sipName_clearMinimumDateTime), meth_QDateTimeEdit_clearMinimumDateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_clearMinimumDateTime)},
    {SIP_MLNAME_CAST(sipName_clearMinimumTime), meth_QDateTimeEdit_clearMinimumTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_clearMinimumTime)},
    {SIP_MLNAME_CAST(sipName_currentSection), meth_QDateTimeEdit_currentSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_currentSection)},
    {SIP_MLNAME_CAST(sipName_currentSectionIndex), meth_QDateTimeEdit_currentSectionIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_currentSectionIndex)},
    {SIP_MLNAME_CAST(sipName_date), meth_QDateTimeEdit_date, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_date)},
    {SIP_MLNAME_CAST(sipName_dateTime), meth_QDateTimeEdit_dateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_dateTime)},
    {SIP_MLNAME_CAST(sipName_dateTimeFromText), meth_QDateTimeEdit_dateTimeFromText, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_dateTimeFromText)},
    {SIP_MLNAME_CAST(sipName_displayFormat), meth_QDateTimeEdit_displayFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_displayFormat)},
    {SIP_MLNAME_CAST(sipName_displayedSections), meth_QDateTimeEdit_displayedSections, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_displayedSections)},
    {SIP_MLNAME_CAST(sipName_event), meth_QDateTimeEdit_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_event)},
    {SIP_MLNAME_CAST(sipName_fixup), meth_QDateTimeEdit_fixup, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_fixup)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QDateTimeEdit_focusInEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QDateTimeEdit_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QDateTimeEdit_initStyleOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QDateTimeEdit_keyPressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_maximumDate), meth_QDateTimeEdit_maximumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_maximumDate)},
    {SIP_MLNAME_CAST(sipName_maximumDateTime), meth_QDateTimeEdit_maximumDateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_maximumDateTime)},
    {SIP_MLNAME_CAST(sipName_maximumTime), meth_QDateTimeEdit_maximumTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_maximumTime)},
    {SIP_MLNAME_CAST(sipName_minimumDate), meth_QDateTimeEdit_minimumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_minimumDate)},
    {SIP_MLNAME_CAST(sipName_minimumDateTime), meth_QDateTimeEdit_minimumDateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_minimumDateTime)},
    {SIP_MLNAME_CAST(sipName_minimumTime), meth_QDateTimeEdit_minimumTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_minimumTime)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QDateTimeEdit_mousePressEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QDateTimeEdit_paintEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_paintEvent)},
    {SIP_MLNAME_CAST(sipName_sectionAt), meth_QDateTimeEdit_sectionAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_sectionAt)},
    {SIP_MLNAME_CAST(sipName_sectionCount), meth_QDateTimeEdit_sectionCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_sectionCount)},
    {SIP_MLNAME_CAST(sipName_sectionText), meth_QDateTimeEdit_sectionText, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_sectionText)},
    {SIP_MLNAME_CAST(sipName_setCalendarPopup), meth_QDateTimeEdit_setCalendarPopup, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setCalendarPopup)},
    {SIP_MLNAME_CAST(sipName_setCalendarWidget), meth_QDateTimeEdit_setCalendarWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setCalendarWidget)},
    {SIP_MLNAME_CAST(sipName_setCurrentSection), meth_QDateTimeEdit_setCurrentSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setCurrentSection)},
    {SIP_MLNAME_CAST(sipName_setCurrentSectionIndex), meth_QDateTimeEdit_setCurrentSectionIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setCurrentSectionIndex)},
    {SIP_MLNAME_CAST(sipName_setDate), meth_QDateTimeEdit_setDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setDate)},
    {SIP_MLNAME_CAST(sipName_setDateRange), meth_QDateTimeEdit_setDateRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setDateRange)},
    {SIP_MLNAME_CAST(sipName_setDateTime), meth_QDateTimeEdit_setDateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setDateTime)},
    {SIP_MLNAME_CAST(sipName_setDateTimeRange), meth_QDateTimeEdit_setDateTimeRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setDateTimeRange)},
    {SIP_MLNAME_CAST(sipName_setDisplayFormat), meth_QDateTimeEdit_setDisplayFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setDisplayFormat)},
    {SIP_MLNAME_CAST(sipName_setMaximumDate), meth_QDateTimeEdit_setMaximumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setMaximumDate)},
    {SIP_MLNAME_CAST(sipName_setMaximumDateTime), meth_QDateTimeEdit_setMaximumDateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setMaximumDateTime)},
    {SIP_MLNAME_CAST(sipName_setMaximumTime), meth_QDateTimeEdit_setMaximumTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setMaximumTime)},
    {SIP_MLNAME_CAST(sipName_setMinimumDate), meth_QDateTimeEdit_setMinimumDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setMinimumDate)},
    {SIP_MLNAME_CAST(sipName_setMinimumDateTime), meth_QDateTimeEdit_setMinimumDateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setMinimumDateTime)},
    {SIP_MLNAME_CAST(sipName_setMinimumTime), meth_QDateTimeEdit_setMinimumTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setMinimumTime)},
    {SIP_MLNAME_CAST(sipName_setSelectedSection), meth_QDateTimeEdit_setSelectedSection, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setSelectedSection)},
    {SIP_MLNAME_CAST(sipName_setTime), meth_QDateTimeEdit_setTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setTime)},
    {SIP_MLNAME_CAST(sipName_setTimeRange), meth_QDateTimeEdit_setTimeRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setTimeRange)},
    {SIP_MLNAME_CAST(sipName_setTimeSpec), meth_QDateTimeEdit_setTimeSpec, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_setTimeSpec)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QDateTimeEdit_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_sizeHint)},
    {SIP_MLNAME_CAST(sipName_stepBy), meth_QDateTimeEdit_stepBy, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_stepBy)},
    {SIP_MLNAME_CAST(sipName_stepEnabled), meth_QDateTimeEdit_stepEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_stepEnabled)},
    {SIP_MLNAME_CAST(sipName_textFromDateTime), meth_QDateTimeEdit_textFromDateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_textFromDateTime)},
    {SIP_MLNAME_CAST(sipName_time), meth_QDateTimeEdit_time, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_time)},
    {SIP_MLNAME_CAST(sipName_timeSpec), meth_QDateTimeEdit_timeSpec, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_timeSpec)},
    {SIP_MLNAME_CAST(sipName_validate), meth_QDateTimeEdit_validate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_validate)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QDateTimeEdit_wheelEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QDateTimeEdit_wheelEvent)}
};

static sipEnumMemberDef enummembers_QDateTimeEdit[] = {
    {sipName_AmPmSection, static_cast<int>( ::QDateTimeEdit::AmPmSection), 78},
    {sipName_DateSections_Mask, static_cast<int>( ::QDateTimeEdit::DateSections_Mask), 78},
    {sipName_DaySection, static_cast<int>( ::QDateTimeEdit::DaySection), 78},
    {sipName_HourSection, static_cast<int>( ::QDateTimeEdit::HourSection), 78},
    {sipName_MSecSection, static_cast<int>( ::QDateTimeEdit::MSecSection), 78},
    {sipName_MinuteSection, static_cast<int>( ::QDateTimeEdit::MinuteSection), 78},
    {sipName_MonthSection, static_cast<int>( ::QDateTimeEdit::MonthSection), 78},
    {sipName_NoSection, static_cast<int>( ::QDateTimeEdit::NoSection), 78},
    {sipName_SecondSection, static_cast<int>( ::QDateTimeEdit::SecondSection), 78},
    {sipName_TimeSections_Mask, static_cast<int>( ::QDateTimeEdit::TimeSections_Mask), 78},
    {sipName_YearSection, static_cast<int>( ::QDateTimeEdit::YearSection), 78},
};

PyDoc_STRVAR(doc_QDateTimeEdit, "\1QDateTimeEdit(parent: QWidget = None)\n"
    "QDateTimeEdit(Union[QDateTime, datetime.datetime], parent: QWidget = None)\n"
    "QDateTimeEdit(Union[QDate, datetime.date], parent: QWidget = None)\n"
    "QDateTimeEdit(Union[QTime, datetime.time], parent: QWidget = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QDateTimeEdit[] = {
    {"dateChanged(QDate)", "\1dateChanged(self, Union[QDate, datetime.date])", 0, 0},
    {"timeChanged(QTime)", "\1timeChanged(self, Union[QTime, datetime.time])", 0, 0},
    {"dateTimeChanged(QDateTime)", "\1dateTimeChanged(self, Union[QDateTime, datetime.datetime])", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QDateTimeEdit = {
    & ::QDateTimeEdit::staticMetaObject,
    0,
    signals_QDateTimeEdit
};


sipClassTypeDef sipTypeDef_QtGui_QDateTimeEdit = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDateTimeEdit,
        {0},
        &plugin_QDateTimeEdit
    },
    {
        sipNameNr_QDateTimeEdit,
        {0, 0, 1},
        60, methods_QDateTimeEdit,
        11, enummembers_QDateTimeEdit,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDateTimeEdit,
    -1,
    -1,
    supers_QDateTimeEdit,
    0,
    init_type_QDateTimeEdit,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDateTimeEdit,
    0,
    0,
    0,
    release_QDateTimeEdit,
    cast_QDateTimeEdit,
    0,
    0,
    0,
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 119 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtNetwork/qhttp.sip"
#include <qhttp.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"

#line 29 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 28 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtNetwork/qhttp.sip"
#include <qhttp.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 94 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtNetwork/qhttp.sip"
#include <qhttp.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 57 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 26 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtNetwork/qtcpsocket.sip"
#include <qtcpsocket.h>
#line 63 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 368 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 351 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 265 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 75 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 78 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 26 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 115 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 84 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 87 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"


class sipQHttp : public  ::QHttp
{
public:
    sipQHttp( ::QObject*);
    sipQHttp(const  ::QString&, ::quint16, ::QObject*);
    sipQHttp(const  ::QString&, ::QHttp::ConnectionMode, ::quint16, ::QObject*);
    virtual ~sipQHttp();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHttp(const sipQHttp &);
    sipQHttp &operator = (const sipQHttp &);

    char sipPyMethods[7];
};

sipQHttp::sipQHttp( ::QObject*a0):  ::QHttp(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHttp::sipQHttp(const  ::QString& a0, ::quint16 a1, ::QObject*a2):  ::QHttp(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHttp::sipQHttp(const  ::QString& a0, ::QHttp::ConnectionMode a1, ::quint16 a2, ::QObject*a3):  ::QHttp(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHttp::~sipQHttp()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQHttp::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QHttp);
}

int sipQHttp::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::QHttp::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QHttp,_c,_id,_a);

    return _id;
}

void *sipQHttp::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QHttp, _clname)) ? this :  ::QHttp::qt_metacast(_clname);
}

bool sipQHttp::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::QHttp::event(a0);

    extern bool sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_QtNetwork_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipQHttp::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::QHttp::eventFilter(a0,a1);

    extern bool sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_QtNetwork_4(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipQHttp::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::QHttp::timerEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_QtNetwork_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHttp::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::QHttp::childEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_QtNetwork_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHttp::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::QHttp::customEvent(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_QtNetwork_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHttp::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::QHttp::connectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtNetwork_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipQHttp::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::QHttp::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_QtNetwork_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QHttp_setHost, "setHost(self, str, port: int = 80) -> int\n"
    "setHost(self, str, QHttp.ConnectionMode, port: int = 0) -> int");

extern "C" {static PyObject *meth_QHttp_setHost(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHttp_setHost(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::quint16 a1 = 80;
         ::QHttp *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|t", &sipSelf, sipType_QHttp, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setHost(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QHttp::ConnectionMode a1;
         ::quint16 a2 = 0;
         ::QHttp *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1E|t", &sipSelf, sipType_QHttp, &sipCpp, sipType_QString,&a0, &a0State, sipType_QHttp_ConnectionMode, &a1, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setHost(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_setHost, doc_QHttp_setHost);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_setSocket, "setSocket(self, QTcpSocket) -> int");

extern "C" {static PyObject *meth_QHttp_setSocket(PyObject *, PyObject *);}
static PyObject *meth_QHttp_setSocket(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QTcpSocket* a0;
        PyObject *a0Keep;
         ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QHttp, &sipCpp, &a0Keep, sipType_QTcpSocket, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setSocket(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, -1, a0Keep);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_setSocket, doc_QHttp_setSocket);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_setUser, "setUser(self, str, password: str = '') -> int");

extern "C" {static PyObject *meth_QHttp_setUser(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHttp_setUser(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
         ::QHttp *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_password,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QHttp, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setUser(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_setUser, doc_QHttp_setUser);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_setProxy, "setProxy(self, str, int, user: str = '', password: str = '') -> int\n"
    "setProxy(self, QNetworkProxy) -> int");

extern "C" {static PyObject *meth_QHttp_setProxy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHttp_setProxy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        int a1;
        const  ::QString& a2def = QString();
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        const  ::QString& a3def = QString();
        const  ::QString* a3 = &a3def;
        int a3State = 0;
         ::QHttp *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_user,
            sipName_password,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1i|J1J1", &sipSelf, sipType_QHttp, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setProxy(*a0,a1,*a2,*a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QNetworkProxy* a0;
         ::QHttp *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHttp, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setProxy(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_setProxy, doc_QHttp_setProxy);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_get, "get(self, str, to: QIODevice = None) -> int");

extern "C" {static PyObject *meth_QHttp_get(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHttp_get(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QIODevice* a1 = 0;
         ::QHttp *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J8", &sipSelf, sipType_QHttp, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice, &a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_get, doc_QHttp_get);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_post, "post(self, str, QIODevice, to: QIODevice = None) -> int\n"
    "post(self, str, Union[QByteArray, bytes, bytearray], to: QIODevice = None) -> int");

extern "C" {static PyObject *meth_QHttp_post(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHttp_post(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QIODevice* a1;
         ::QIODevice* a2 = 0;
         ::QHttp *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J8|J8", &sipSelf, sipType_QHttp, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice, &a1, sipType_QIODevice, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->post(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QIODevice* a2 = 0;
         ::QHttp *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|J8", &sipSelf, sipType_QHttp, &sipCpp, sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State, sipType_QIODevice, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->post(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_post, doc_QHttp_post);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_head, "head(self, str) -> int");

extern "C" {static PyObject *meth_QHttp_head(PyObject *, PyObject *);}
static PyObject *meth_QHttp_head(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHttp, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->head(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_head, doc_QHttp_head);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_request, "request(self, QHttpRequestHeader, data: QIODevice = None, to: QIODevice = None) -> int\n"
    "request(self, QHttpRequestHeader, Union[QByteArray, bytes, bytearray], to: QIODevice = None) -> int");

extern "C" {static PyObject *meth_QHttp_request(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHttp_request(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHttpRequestHeader* a0;
         ::QIODevice* a1 = 0;
         ::QIODevice* a2 = 0;
         ::QHttp *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_data,
            sipName_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8J8", &sipSelf, sipType_QHttp, &sipCpp, sipType_QHttpRequestHeader, &a0, sipType_QIODevice, &a1, sipType_QIODevice, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->request(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const  ::QHttpRequestHeader* a0;
        const  ::QByteArray* a1;
        int a1State = 0;
         ::QIODevice* a2 = 0;
         ::QHttp *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|J8", &sipSelf, sipType_QHttp, &sipCpp, sipType_QHttpRequestHeader, &a0, sipType_QByteArray, &a1, &a1State, sipType_QIODevice, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->request(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a1),sipType_QByteArray,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_request, doc_QHttp_request);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_close, "close(self) -> int");

extern "C" {static PyObject *meth_QHttp_close(PyObject *, PyObject *);}
static PyObject *meth_QHttp_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->close();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_close, doc_QHttp_close);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_bytesAvailable, "bytesAvailable(self) -> int");

extern "C" {static PyObject *meth_QHttp_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QHttp_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
             ::qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bytesAvailable();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_bytesAvailable, doc_QHttp_bytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_read, "read(self, int) -> str");

extern "C" {static PyObject *meth_QHttp_read(PyObject *, PyObject *);}
static PyObject *meth_QHttp_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::qint64 a0;
         ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QHttp, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 188 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtNetwork/qhttp.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->read(s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 820 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQHttp.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_read, doc_QHttp_read);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_readAll, "readAll(self) -> QByteArray");

extern "C" {static PyObject *meth_QHttp_readAll(PyObject *, PyObject *);}
static PyObject *meth_QHttp_readAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->readAll());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_readAll, doc_QHttp_readAll);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_currentId, "currentId(self) -> int");

extern "C" {static PyObject *meth_QHttp_currentId(PyObject *, PyObject *);}
static PyObject *meth_QHttp_currentId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentId();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_currentId, doc_QHttp_currentId);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_currentSourceDevice, "currentSourceDevice(self) -> QIODevice");

extern "C" {static PyObject *meth_QHttp_currentSourceDevice(PyObject *, PyObject *);}
static PyObject *meth_QHttp_currentSourceDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
             ::QIODevice*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentSourceDevice();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_currentSourceDevice, doc_QHttp_currentSourceDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_currentDestinationDevice, "currentDestinationDevice(self) -> QIODevice");

extern "C" {static PyObject *meth_QHttp_currentDestinationDevice(PyObject *, PyObject *);}
static PyObject *meth_QHttp_currentDestinationDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
             ::QIODevice*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentDestinationDevice();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_currentDestinationDevice, doc_QHttp_currentDestinationDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_currentRequest, "currentRequest(self) -> QHttpRequestHeader");

extern "C" {static PyObject *meth_QHttp_currentRequest(PyObject *, PyObject *);}
static PyObject *meth_QHttp_currentRequest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
             ::QHttpRequestHeader*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QHttpRequestHeader(sipCpp->currentRequest());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QHttpRequestHeader,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_currentRequest, doc_QHttp_currentRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_lastResponse, "lastResponse(self) -> QHttpResponseHeader");

extern "C" {static PyObject *meth_QHttp_lastResponse(PyObject *, PyObject *);}
static PyObject *meth_QHttp_lastResponse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
             ::QHttpResponseHeader*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QHttpResponseHeader(sipCpp->lastResponse());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QHttpResponseHeader,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_lastResponse, doc_QHttp_lastResponse);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_hasPendingRequests, "hasPendingRequests(self) -> bool");

extern "C" {static PyObject *meth_QHttp_hasPendingRequests(PyObject *, PyObject *);}
static PyObject *meth_QHttp_hasPendingRequests(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasPendingRequests();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_hasPendingRequests, doc_QHttp_hasPendingRequests);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_clearPendingRequests, "clearPendingRequests(self)");

extern "C" {static PyObject *meth_QHttp_clearPendingRequests(PyObject *, PyObject *);}
static PyObject *meth_QHttp_clearPendingRequests(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearPendingRequests();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_clearPendingRequests, doc_QHttp_clearPendingRequests);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_state, "state(self) -> QHttp.State");

extern "C" {static PyObject *meth_QHttp_state(PyObject *, PyObject *);}
static PyObject *meth_QHttp_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
             ::QHttp::State sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QHttp_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_state, doc_QHttp_state);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_error, "error(self) -> QHttp.Error");

extern "C" {static PyObject *meth_QHttp_error(PyObject *, PyObject *);}
static PyObject *meth_QHttp_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
             ::QHttp::Error sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QHttp_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_error, doc_QHttp_error);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_errorString, "errorString(self) -> str");

extern "C" {static PyObject *meth_QHttp_errorString(PyObject *, PyObject *);}
static PyObject *meth_QHttp_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_errorString, doc_QHttp_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_abort, "abort(self)");

extern "C" {static PyObject *meth_QHttp_abort(PyObject *, PyObject *);}
static PyObject *meth_QHttp_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->abort();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_abort, doc_QHttp_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QHttp_ignoreSslErrors, "ignoreSslErrors(self)");

extern "C" {static PyObject *meth_QHttp_ignoreSslErrors(PyObject *, PyObject *);}
static PyObject *meth_QHttp_ignoreSslErrors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QHttp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHttp, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ignoreSslErrors();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHttp, sipName_ignoreSslErrors, doc_QHttp_ignoreSslErrors);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_QHttp(void *, const sipTypeDef *);}
static void *cast_QHttp(void *sipCppV, const sipTypeDef *targetType)
{
     ::QHttp *sipCpp = reinterpret_cast< ::QHttp *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHttp(void *, int);}
static void release_QHttp(void *sipCppV, int)
{
     ::QHttp *sipCpp = reinterpret_cast< ::QHttp *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QHttp(sipSimpleWrapper *);}
static void dealloc_QHttp(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipQHttp *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_QHttp(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_QHttp(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHttp(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQHttp *sipCpp = 0;

    {
         ::QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQHttp(a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::quint16 a1 = 80;
         ::QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_port,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|tJH", sipType_QString,&a0, &a0State, &a1, sipType_QObject, &a2, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQHttp(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QHttp::ConnectionMode a1;
         ::quint16 a2 = 0;
         ::QObject* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_port,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1E|tJH", sipType_QString,&a0, &a0State, sipType_QHttp_ConnectionMode, &a1, &a2, sipType_QObject, &a3, sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQHttp(*a0,a1,a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHttp[] = {{12, 0, 1}};


static PyMethodDef methods_QHttp[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QHttp_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_abort)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QHttp_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_clearPendingRequests), meth_QHttp_clearPendingRequests, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_clearPendingRequests)},
    {SIP_MLNAME_CAST(sipName_close), meth_QHttp_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_close)},
    {SIP_MLNAME_CAST(sipName_currentDestinationDevice), meth_QHttp_currentDestinationDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_currentDestinationDevice)},
    {SIP_MLNAME_CAST(sipName_currentId), meth_QHttp_currentId, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_currentId)},
    {SIP_MLNAME_CAST(sipName_currentRequest), meth_QHttp_currentRequest, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_currentRequest)},
    {SIP_MLNAME_CAST(sipName_currentSourceDevice), meth_QHttp_currentSourceDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_currentSourceDevice)},
    {SIP_MLNAME_CAST(sipName_error), meth_QHttp_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QHttp_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_errorString)},
    {SIP_MLNAME_CAST(sipName_get), (PyCFunction)meth_QHttp_get, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHttp_get)},
    {SIP_MLNAME_CAST(sipName_hasPendingRequests), meth_QHttp_hasPendingRequests, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_hasPendingRequests)},
    {SIP_MLNAME_CAST(sipName_head), meth_QHttp_head, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_head)},
    {SIP_MLNAME_CAST(sipName_ignoreSslErrors), meth_QHttp_ignoreSslErrors, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_ignoreSslErrors)},
    {SIP_MLNAME_CAST(sipName_lastResponse), meth_QHttp_lastResponse, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_lastResponse)},
    {SIP_MLNAME_CAST(sipName_post), (PyCFunction)meth_QHttp_post, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHttp_post)},
    {SIP_MLNAME_CAST(sipName_read), meth_QHttp_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_read)},
    {SIP_MLNAME_CAST(sipName_readAll), meth_QHttp_readAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_readAll)},
    {SIP_MLNAME_CAST(sipName_request), (PyCFunction)meth_QHttp_request, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHttp_request)},
    {SIP_MLNAME_CAST(sipName_setHost), (PyCFunction)meth_QHttp_setHost, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHttp_setHost)},
    {SIP_MLNAME_CAST(sipName_setProxy), (PyCFunction)meth_QHttp_setProxy, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHttp_setProxy)},
    {SIP_MLNAME_CAST(sipName_setSocket), meth_QHttp_setSocket, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_setSocket)},
    {SIP_MLNAME_CAST(sipName_setUser), (PyCFunction)meth_QHttp_setUser, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHttp_setUser)},
    {SIP_MLNAME_CAST(sipName_state), meth_QHttp_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QHttp_state)}
};

static sipEnumMemberDef enummembers_QHttp[] = {
    {sipName_Aborted, static_cast<int>( ::QHttp::Aborted), 21},
    {sipName_AuthenticationRequiredError, static_cast<int>( ::QHttp::AuthenticationRequiredError), 21},
    {sipName_Closing, static_cast<int>( ::QHttp::Closing), 22},
    {sipName_Connected, static_cast<int>( ::QHttp::Connected), 22},
    {sipName_Connecting, static_cast<int>( ::QHttp::Connecting), 22},
    {sipName_ConnectionModeHttp, static_cast<int>( ::QHttp::ConnectionModeHttp), 20},
    {sipName_ConnectionModeHttps, static_cast<int>( ::QHttp::ConnectionModeHttps), 20},
    {sipName_ConnectionRefused, static_cast<int>( ::QHttp::ConnectionRefused), 21},
    {sipName_HostLookup, static_cast<int>( ::QHttp::HostLookup), 22},
    {sipName_HostNotFound, static_cast<int>( ::QHttp::HostNotFound), 21},
    {sipName_InvalidResponseHeader, static_cast<int>( ::QHttp::InvalidResponseHeader), 21},
    {sipName_NoError, static_cast<int>( ::QHttp::NoError), 21},
    {sipName_ProxyAuthenticationRequiredError, static_cast<int>( ::QHttp::ProxyAuthenticationRequiredError), 21},
    {sipName_Reading, static_cast<int>( ::QHttp::Reading), 22},
    {sipName_Sending, static_cast<int>( ::QHttp::Sending), 22},
    {sipName_Unconnected, static_cast<int>( ::QHttp::Unconnected), 22},
    {sipName_UnexpectedClose, static_cast<int>( ::QHttp::UnexpectedClose), 21},
    {sipName_UnknownError, static_cast<int>( ::QHttp::UnknownError), 21},
    {sipName_WrongContentLength, static_cast<int>( ::QHttp::WrongContentLength), 21},
};

PyDoc_STRVAR(doc_QHttp, "\1QHttp(parent: QObject = None)\n"
    "QHttp(str, port: int = 80, parent: QObject = None)\n"
    "QHttp(str, QHttp.ConnectionMode, port: int = 0, parent: QObject = None)");


/* Define this type's signals. */
static const pyqt4QtSignal signals_QHttp[] = {
    {"sslErrors(QList<QSslError>)", "\1sslErrors(self, object)", 0, 0},
    {"authenticationRequired(QString,quint16,QAuthenticator*)", "\1authenticationRequired(self, str, int, QAuthenticator)", 0, 0},
    {"proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)", "\1proxyAuthenticationRequired(self, QNetworkProxy, QAuthenticator)", 0, 0},
    {"done(bool)", "\1done(self, bool)", 0, 0},
    {"requestFinished(int,bool)", "\1requestFinished(self, int, bool)", 0, 0},
    {"requestStarted(int)", "\1requestStarted(self, int)", 0, 0},
    {"dataReadProgress(int,int)", "\1dataReadProgress(self, int, int)", 0, 0},
    {"dataSendProgress(int,int)", "\1dataSendProgress(self, int, int)", 0, 0},
    {"readyRead(QHttpResponseHeader)", "\1readyRead(self, QHttpResponseHeader)", 0, 0},
    {"responseHeaderReceived(QHttpResponseHeader)", "\1responseHeaderReceived(self, QHttpResponseHeader)", 0, 0},
    {"stateChanged(int)", "\1stateChanged(self, int)", 0, 0},
    {0, 0, 0, 0}
};


static pyqt4ClassPluginDef plugin_QHttp = {
    & ::QHttp::staticMetaObject,
    0,
    signals_QHttp
};


sipClassTypeDef sipTypeDef_QtNetwork_QHttp = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QHttp,
        {0},
        &plugin_QHttp
    },
    {
        sipNameNr_QHttp,
        {0, 0, 1},
        24, methods_QHttp,
        19, enummembers_QHttp,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QHttp,
    -1,
    -1,
    supers_QHttp,
    0,
    init_type_QHttp,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHttp,
    0,
    0,
    0,
    release_QHttp,
    cast_QHttp,
    0,
    0,
    0,
    0,
    0,
    0
};

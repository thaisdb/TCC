/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.2
 *
 * Copyright (c) 2016 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt4.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtNetwork/qsslcertificate.sip"
#include <qsslcertificate.h>
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQSslCertificate.cpp"

#line 26 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 33 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtNetwork/qssl.sip"
#include <qssl.h>
#line 36 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 39 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 28 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 42 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 26 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 48 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 29 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtNetwork/qsslkey.sip"
#include <qsslkey.h>
#line 51 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 397 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 54 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 287 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/sip/QtNetwork/qsslcertificate.sip"
#include <QtCore/qmap.h>
#include <QtCore/qstring.h>
#include <QtNetwork/qssl.h>
#line 59 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 28 "sip/QtCore/qcryptographichash.sip"
#include <qcryptographichash.h>
#line 62 "/home/thais/Faculdade/TCC/NEW/PyQt4_gpl_x11-4.12/QtNetwork/sipQtNetworkQSslCertificate.cpp"


PyDoc_STRVAR(doc_QSslCertificate_isNull, "isNull(self) -> bool");

extern "C" {static PyObject *meth_QSslCertificate_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_isNull, doc_QSslCertificate_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_isValid, "isValid(self) -> bool");

extern "C" {static PyObject *meth_QSslCertificate_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_isValid, doc_QSslCertificate_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_clear, "clear(self)");

extern "C" {static PyObject *meth_QSslCertificate_clear(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_clear, doc_QSslCertificate_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_version, "version(self) -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_version(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->version());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_version, doc_QSslCertificate_version);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_serialNumber, "serialNumber(self) -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_serialNumber(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_serialNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->serialNumber());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_serialNumber, doc_QSslCertificate_serialNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_digest, "digest(self, algorithm: QCryptographicHash.Algorithm = QCryptographicHash.Md5) -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_digest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_digest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QCryptographicHash::Algorithm a0 = QCryptographicHash::Md5;
        const  ::QSslCertificate *sipCpp;

        static const char *sipKwdList[] = {
            sipName_algorithm,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QCryptographicHash_Algorithm, &a0))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->digest(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_digest, doc_QSslCertificate_digest);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_issuerInfo, "issuerInfo(self, QSslCertificate.SubjectInfo) -> str\n"
    "issuerInfo(self, Union[QByteArray, bytes, bytearray]) -> str");

extern "C" {static PyObject *meth_QSslCertificate_issuerInfo(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_issuerInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSslCertificate::SubjectInfo a0;
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QSslCertificate_SubjectInfo, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->issuerInfo(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->issuerInfo(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_issuerInfo, doc_QSslCertificate_issuerInfo);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_subjectInfo, "subjectInfo(self, QSslCertificate.SubjectInfo) -> str\n"
    "subjectInfo(self, Union[QByteArray, bytes, bytearray]) -> str");

extern "C" {static PyObject *meth_QSslCertificate_subjectInfo(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_subjectInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSslCertificate::SubjectInfo a0;
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QSslCertificate_SubjectInfo, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->subjectInfo(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const  ::QByteArray* a0;
        int a0State = 0;
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->subjectInfo(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_subjectInfo, doc_QSslCertificate_subjectInfo);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_alternateSubjectNames, "alternateSubjectNames(self) -> Dict[QSsl.AlternateNameEntryType, List[QString]]");

extern "C" {static PyObject *meth_QSslCertificate_alternateSubjectNames(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_alternateSubjectNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QMultiMap< ::QSsl::AlternateNameEntryType, ::QString>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QMultiMap< ::QSsl::AlternateNameEntryType, ::QString>(sipCpp->alternateSubjectNames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMultiMap_0100QSsl_AlternateNameEntryType_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_alternateSubjectNames, doc_QSslCertificate_alternateSubjectNames);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_effectiveDate, "effectiveDate(self) -> QDateTime");

extern "C" {static PyObject *meth_QSslCertificate_effectiveDate(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_effectiveDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QDateTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDateTime(sipCpp->effectiveDate());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_effectiveDate, doc_QSslCertificate_effectiveDate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_expiryDate, "expiryDate(self) -> QDateTime");

extern "C" {static PyObject *meth_QSslCertificate_expiryDate(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_expiryDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QDateTime*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QDateTime(sipCpp->expiryDate());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_expiryDate, doc_QSslCertificate_expiryDate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_publicKey, "publicKey(self) -> QSslKey");

extern "C" {static PyObject *meth_QSslCertificate_publicKey(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_publicKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QSslKey*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QSslKey(sipCpp->publicKey());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSslKey,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_publicKey, doc_QSslCertificate_publicKey);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_toPem, "toPem(self) -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_toPem(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_toPem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->toPem());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_toPem, doc_QSslCertificate_toPem);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_toDer, "toDer(self) -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_toDer(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_toDer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->toDer());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_toDer, doc_QSslCertificate_toDer);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_fromPath, "fromPath(str, format: QSsl.EncodingFormat = QSsl.Pem, syntax: QRegExp.PatternSyntax = QRegExp.FixedString) -> object");

extern "C" {static PyObject *meth_QSslCertificate_fromPath(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_fromPath(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::QSsl::EncodingFormat a1 = QSsl::Pem;
         ::QRegExp::PatternSyntax a2 = QRegExp::FixedString;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_syntax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|EE", sipType_QString,&a0, &a0State, sipType_QSsl_EncodingFormat, &a1, sipType_QRegExp_PatternSyntax, &a2))
        {
            QList< ::QSslCertificate>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QSslCertificate>( ::QSslCertificate::fromPath(*a0,a1,a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_fromPath, doc_QSslCertificate_fromPath);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_fromDevice, "fromDevice(QIODevice, format: QSsl.EncodingFormat = QSsl.Pem) -> List[QSslCertificate]");

extern "C" {static PyObject *meth_QSslCertificate_fromDevice(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_fromDevice(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::QIODevice* a0;
         ::QSsl::EncodingFormat a1 = QSsl::Pem;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8|E", sipType_QIODevice, &a0, sipType_QSsl_EncodingFormat, &a1))
        {
            QList< ::QSslCertificate>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QSslCertificate>( ::QSslCertificate::fromDevice(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_fromDevice, doc_QSslCertificate_fromDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_fromData, "fromData(Union[QByteArray, bytes, bytearray], format: QSsl.EncodingFormat = QSsl.Pem) -> List[QSslCertificate]");

extern "C" {static PyObject *meth_QSslCertificate_fromData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_fromData(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QSsl::EncodingFormat a1 = QSsl::Pem;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|E", sipType_QByteArray, &a0, &a0State, sipType_QSsl_EncodingFormat, &a1))
        {
            QList< ::QSslCertificate>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList< ::QSslCertificate>( ::QSslCertificate::fromData(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_fromData, doc_QSslCertificate_fromData);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_handle, "handle(self) -> int");

extern "C" {static PyObject *meth_QSslCertificate_handle(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
             ::Qt::HANDLE sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->handle();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_handle, doc_QSslCertificate_handle);

    return NULL;
}


extern "C" {static PyObject *slot_QSslCertificate___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSslCertificate___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSslCertificate *sipCpp = reinterpret_cast< ::QSslCertificate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslCertificate));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QSslCertificate* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslCertificate, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QSslCertificate::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, ne_slot, sipType_QSslCertificate, sipSelf, sipArg);
}


extern "C" {static PyObject *slot_QSslCertificate___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSslCertificate___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::QSslCertificate *sipCpp = reinterpret_cast< ::QSslCertificate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslCertificate));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::QSslCertificate* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslCertificate, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::QSslCertificate::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork, eq_slot, sipType_QSslCertificate, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_QSslCertificate(void *, int);}
static void release_QSslCertificate(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::QSslCertificate *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QSslCertificate(void *, SIP_SSIZE_T, const void *);}
static void assign_QSslCertificate(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast< ::QSslCertificate *>(sipDst)[sipDstIdx] = *reinterpret_cast<const  ::QSslCertificate *>(sipSrc);
}


extern "C" {static void *array_QSslCertificate(SIP_SSIZE_T);}
static void *array_QSslCertificate(SIP_SSIZE_T sipNrElem)
{
    return new  ::QSslCertificate[sipNrElem];
}


extern "C" {static void *copy_QSslCertificate(const void *, SIP_SSIZE_T);}
static void *copy_QSslCertificate(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::QSslCertificate(reinterpret_cast<const  ::QSslCertificate *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSslCertificate(sipSimpleWrapper *);}
static void dealloc_QSslCertificate(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_QSslCertificate(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_QSslCertificate(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSslCertificate(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::QSslCertificate *sipCpp = 0;

    {
         ::QIODevice* a0;
         ::QSsl::EncodingFormat a1 = QSsl::Pem;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|E", sipType_QIODevice, &a0, sipType_QSsl_EncodingFormat, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QSslCertificate(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::QByteArray& a0def = QByteArray();
        const  ::QByteArray* a0 = &a0def;
        int a0State = 0;
         ::QSsl::EncodingFormat a1 = QSsl::Pem;

        static const char *sipKwdList[] = {
            sipName_data,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1E", sipType_QByteArray, &a0, &a0State, sipType_QSsl_EncodingFormat, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QSslCertificate(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    {
        const  ::QSslCertificate* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSslCertificate, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::QSslCertificate(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSslCertificate[] = {
    {(void *)slot_QSslCertificate___ne__, ne_slot},
    {(void *)slot_QSslCertificate___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSslCertificate[] = {
    {SIP_MLNAME_CAST(sipName_alternateSubjectNames), meth_QSslCertificate_alternateSubjectNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_alternateSubjectNames)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QSslCertificate_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_clear)},
    {SIP_MLNAME_CAST(sipName_digest), (PyCFunction)meth_QSslCertificate_digest, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslCertificate_digest)},
    {SIP_MLNAME_CAST(sipName_effectiveDate), meth_QSslCertificate_effectiveDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_effectiveDate)},
    {SIP_MLNAME_CAST(sipName_expiryDate), meth_QSslCertificate_expiryDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_expiryDate)},
    {SIP_MLNAME_CAST(sipName_fromData), (PyCFunction)meth_QSslCertificate_fromData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslCertificate_fromData)},
    {SIP_MLNAME_CAST(sipName_fromDevice), (PyCFunction)meth_QSslCertificate_fromDevice, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslCertificate_fromDevice)},
    {SIP_MLNAME_CAST(sipName_fromPath), (PyCFunction)meth_QSslCertificate_fromPath, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslCertificate_fromPath)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QSslCertificate_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_handle)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QSslCertificate_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_isNull)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QSslCertificate_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_isValid)},
    {SIP_MLNAME_CAST(sipName_issuerInfo), meth_QSslCertificate_issuerInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_issuerInfo)},
    {SIP_MLNAME_CAST(sipName_publicKey), meth_QSslCertificate_publicKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_publicKey)},
    {SIP_MLNAME_CAST(sipName_serialNumber), meth_QSslCertificate_serialNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_serialNumber)},
    {SIP_MLNAME_CAST(sipName_subjectInfo), meth_QSslCertificate_subjectInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_subjectInfo)},
    {SIP_MLNAME_CAST(sipName_toDer), meth_QSslCertificate_toDer, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_toDer)},
    {SIP_MLNAME_CAST(sipName_toPem), meth_QSslCertificate_toPem, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_toPem)},
    {SIP_MLNAME_CAST(sipName_version), meth_QSslCertificate_version, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_version)}
};

static sipEnumMemberDef enummembers_QSslCertificate[] = {
    {sipName_CommonName, static_cast<int>( ::QSslCertificate::CommonName), 92},
    {sipName_CountryName, static_cast<int>( ::QSslCertificate::CountryName), 92},
    {sipName_LocalityName, static_cast<int>( ::QSslCertificate::LocalityName), 92},
    {sipName_Organization, static_cast<int>( ::QSslCertificate::Organization), 92},
    {sipName_OrganizationalUnitName, static_cast<int>( ::QSslCertificate::OrganizationalUnitName), 92},
    {sipName_StateOrProvinceName, static_cast<int>( ::QSslCertificate::StateOrProvinceName), 92},
};

PyDoc_STRVAR(doc_QSslCertificate, "\1QSslCertificate(QIODevice, format: QSsl.EncodingFormat = QSsl.Pem)\n"
    "QSslCertificate(data: Union[QByteArray, bytes, bytearray] = QByteArray(), format: QSsl.EncodingFormat = QSsl.Pem)\n"
    "QSslCertificate(QSslCertificate)");


static pyqt4ClassPluginDef plugin_QSslCertificate = {
    0,
    0,
    0
};


sipClassTypeDef sipTypeDef_QtNetwork_QSslCertificate = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QSslCertificate,
        {0},
        &plugin_QSslCertificate
    },
    {
        sipNameNr_QSslCertificate,
        {0, 0, 1},
        18, methods_QSslCertificate,
        6, enummembers_QSslCertificate,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSslCertificate,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QSslCertificate,
    init_type_QSslCertificate,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSslCertificate,
    assign_QSslCertificate,
    array_QSslCertificate,
    copy_QSslCertificate,
    release_QSslCertificate,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
